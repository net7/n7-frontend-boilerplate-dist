import { DataSource, _t } from '@n7-frontend/core';
// eslint-disable-next-line max-len
export class MrInputCheckboxDS extends DataSource {
    constructor() {
        super(...arguments);
        this.state = {
            value: [],
            disabled: false,
            hidden: false,
        };
        this.getState = () => this.state;
    }
    transform(data) {
        return {
            ...data,
            checkboxes: this.getCheckboxes(data.checkboxes)
        };
    }
    setState(newState) {
        this.state = {
            ...this.state,
            ...newState
        };
        this.refresh();
    }
    clear() {
        this.setState({ value: [] });
    }
    refresh() {
        const { hidden } = this.state;
        // render value
        this.output.checkboxes = this.getCheckboxes(this.output.checkboxes);
        // render hidden
        this.output.classes = hidden ? 'is-hidden' : '';
    }
    toggleValue({ inputPayload, value: isChecked }) {
        const { value } = this.state;
        const exists = !!(value.includes(inputPayload));
        if (isChecked && !exists) {
            value.push(inputPayload);
        }
        else if (!isChecked && exists) {
            value.splice(value.indexOf(inputPayload), 1);
        }
        this.setState({ value });
    }
    getCheckboxes(checkboxes) {
        const { value, disabled } = this.state;
        return checkboxes.map((checkbox, index) => ({
            ...checkbox,
            id: `${this.id}-${index}`,
            disabled,
            label: _t(checkbox.label),
            checked: !!(value.includes(checkbox.payload))
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtY2hlY2tib3guZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uNy1ib2lsZXJwbGF0ZS1saWIvc3JjL2xpYi9tdXJ1Y2EvZGF0YS1zb3VyY2VzL2Zvcm0vaW5wdXQtY2hlY2tib3guZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQU1uRCxtQ0FBbUM7QUFDbkMsTUFBTSxPQUFPLGlCQUFrQixTQUFRLFVBQVU7SUFBakQ7O1FBR1MsVUFBSyxHQUEyQztZQUNyRCxLQUFLLEVBQUUsRUFBRTtZQUNULFFBQVEsRUFBRSxLQUFLO1lBQ2YsTUFBTSxFQUFFLEtBQUs7U0FDZCxDQUFDO1FBU0YsYUFBUSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUE2QzlCLENBQUM7SUFwRFcsU0FBUyxDQUFDLElBQXVCO1FBQ3pDLE9BQU87WUFDTCxHQUFHLElBQUk7WUFDUCxVQUFVLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1NBQ2hELENBQUM7SUFDSixDQUFDO0lBSUQsUUFBUSxDQUFDLFFBQWdEO1FBQ3ZELElBQUksQ0FBQyxLQUFLLEdBQUc7WUFDWCxHQUFHLElBQUksQ0FBQyxLQUFLO1lBQ2IsR0FBRyxRQUFRO1NBQ1osQ0FBQztRQUNGLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsT0FBTztRQUNMLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRTlCLGVBQWU7UUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFcEUsZ0JBQWdCO1FBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDbEQsQ0FBQztJQUVELFdBQVcsQ0FBQyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO1FBQzVDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzdCLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUNoRCxJQUFJLFNBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUN4QixLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzFCO2FBQU0sSUFBSSxDQUFDLFNBQVMsSUFBSSxNQUFNLEVBQUU7WUFDL0IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzlDO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVPLGFBQWEsQ0FBQyxVQUFVO1FBQzlCLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN2QyxPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzFDLEdBQUcsUUFBUTtZQUNYLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLElBQUksS0FBSyxFQUFFO1lBQ3pCLFFBQVE7WUFDUixLQUFLLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFDekIsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzlDLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YVNvdXJjZSwgX3QgfSBmcm9tICdAbjctZnJvbnRlbmQvY29yZSc7XG5pbXBvcnQgeyBJbnB1dENoZWNrYm94RGF0YSB9IGZyb20gJ0BuNy1mcm9udGVuZC9jb21wb25lbnRzJztcbmltcG9ydCB7IE1yRm9ybUlucHV0U3RhdGUsIE1ySW5wdXREYXRhU291cmNlIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9mb3JtLmludGVyZmFjZSc7XG5cbnR5cGUgTXJJbnB1dENoZWNrYm94VmFsdWUgPSBzdHJpbmdbXTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbmV4cG9ydCBjbGFzcyBNcklucHV0Q2hlY2tib3hEUyBleHRlbmRzIERhdGFTb3VyY2UgaW1wbGVtZW50cyBNcklucHV0RGF0YVNvdXJjZTxNcklucHV0Q2hlY2tib3hWYWx1ZT4ge1xuICBwdWJsaWMgaWQ6IHN0cmluZztcblxuICBwdWJsaWMgc3RhdGU6IE1yRm9ybUlucHV0U3RhdGU8TXJJbnB1dENoZWNrYm94VmFsdWU+ID0ge1xuICAgIHZhbHVlOiBbXSxcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgaGlkZGVuOiBmYWxzZSxcbiAgfTtcblxuICBwcm90ZWN0ZWQgdHJhbnNmb3JtKGRhdGE6IElucHV0Q2hlY2tib3hEYXRhKTogSW5wdXRDaGVja2JveERhdGEge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5kYXRhLFxuICAgICAgY2hlY2tib3hlczogdGhpcy5nZXRDaGVja2JveGVzKGRhdGEuY2hlY2tib3hlcylcbiAgICB9O1xuICB9XG5cbiAgZ2V0U3RhdGUgPSAoKSA9PiB0aGlzLnN0YXRlO1xuXG4gIHNldFN0YXRlKG5ld1N0YXRlOiBNckZvcm1JbnB1dFN0YXRlPE1ySW5wdXRDaGVja2JveFZhbHVlPikge1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAuLi50aGlzLnN0YXRlLFxuICAgICAgLi4ubmV3U3RhdGVcbiAgICB9O1xuICAgIHRoaXMucmVmcmVzaCgpO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBbXSB9KTtcbiAgfVxuXG4gIHJlZnJlc2goKSB7XG4gICAgY29uc3QgeyBoaWRkZW4gfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAvLyByZW5kZXIgdmFsdWVcbiAgICB0aGlzLm91dHB1dC5jaGVja2JveGVzID0gdGhpcy5nZXRDaGVja2JveGVzKHRoaXMub3V0cHV0LmNoZWNrYm94ZXMpO1xuXG4gICAgLy8gcmVuZGVyIGhpZGRlblxuICAgIHRoaXMub3V0cHV0LmNsYXNzZXMgPSBoaWRkZW4gPyAnaXMtaGlkZGVuJyA6ICcnO1xuICB9XG5cbiAgdG9nZ2xlVmFsdWUoeyBpbnB1dFBheWxvYWQsIHZhbHVlOiBpc0NoZWNrZWQgfSkge1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgZXhpc3RzID0gISEodmFsdWUuaW5jbHVkZXMoaW5wdXRQYXlsb2FkKSk7XG4gICAgaWYgKGlzQ2hlY2tlZCAmJiAhZXhpc3RzKSB7XG4gICAgICB2YWx1ZS5wdXNoKGlucHV0UGF5bG9hZCk7XG4gICAgfSBlbHNlIGlmICghaXNDaGVja2VkICYmIGV4aXN0cykge1xuICAgICAgdmFsdWUuc3BsaWNlKHZhbHVlLmluZGV4T2YoaW5wdXRQYXlsb2FkKSwgMSk7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZSB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q2hlY2tib3hlcyhjaGVja2JveGVzKSB7XG4gICAgY29uc3QgeyB2YWx1ZSwgZGlzYWJsZWQgfSA9IHRoaXMuc3RhdGU7XG4gICAgcmV0dXJuIGNoZWNrYm94ZXMubWFwKChjaGVja2JveCwgaW5kZXgpID0+ICh7XG4gICAgICAuLi5jaGVja2JveCxcbiAgICAgIGlkOiBgJHt0aGlzLmlkfS0ke2luZGV4fWAsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGxhYmVsOiBfdChjaGVja2JveC5sYWJlbCksXG4gICAgICBjaGVja2VkOiAhISh2YWx1ZS5pbmNsdWRlcyhjaGVja2JveC5wYXlsb2FkKSlcbiAgICB9KSk7XG4gIH1cbn1cbiJdfQ==