import { Subject, ReplaySubject } from 'rxjs';
import { MrInputTextDS } from '../data-sources/form/input-text.ds';
import { MrInputTextEH } from '../event-handlers/form/input-text.eh';
import { MrInputSelectDS } from '../data-sources/form/input-select.ds';
import { MrInputSelectEH } from '../event-handlers/form/input-select.eh';
import { MrInputCheckboxDS } from '../data-sources/form/input-checkbox.ds';
import { MrInputCheckboxEH } from '../event-handlers/form/input-checkbox.eh';
export class MrFormModel {
    constructor() {
        this.loaded$ = new ReplaySubject();
        this.inputs = {};
        this.inputTypes = {
            text: {
                ds: MrInputTextDS,
                eh: MrInputTextEH
            },
            select: {
                ds: MrInputSelectDS,
                eh: MrInputSelectEH
            },
            checkbox: {
                ds: MrInputCheckboxDS,
                eh: MrInputCheckboxEH
            }
        };
        this.changed$ = new Subject();
        this.getInput = (id) => this.inputs[id].ds;
        this.getInputs = () => {
            const inputs = {};
            Object.keys(this.inputs).forEach((id) => {
                inputs[id] = this.getInput(id);
            });
            return inputs;
        };
    }
    init(config) {
        this.config = config;
        // init inputs
        this.initInputs();
        // emit signal
        this.loaded$.next(true);
    }
    getState() {
        const state = {};
        Object.keys(this.inputs).forEach((key) => {
            state[key] = this.inputs[key].ds.getState();
        });
        return state;
    }
    addInputType(type, ds, eh) {
        if (this.inputTypes[type]) {
            throw Error(`input type ${type} already exists!`);
        }
        this.inputTypes[type] = { ds, eh };
    }
    initInputs() {
        const { sections } = this.config;
        sections.forEach((section) => {
            section.inputs.forEach(({ id, type, options, state, data }) => {
                const DSClass = this.inputTypes[type].ds;
                const EHClass = this.inputTypes[type].eh;
                const DSInstance = new DSClass(options || {});
                const EHInstance = new EHClass();
                // set datasource id
                DSInstance.id = id;
                // set initial data
                if (data) {
                    DSInstance.update(data);
                }
                // set state
                if (state) {
                    DSInstance.setState(state);
                }
                // set eventhandler hostid
                EHInstance.hostId = id;
                // attach datasource to eventhandler
                EHInstance.dataSource = DSInstance;
                // attach changed$ to eventhandler
                EHInstance.changed$ = this.changed$;
                // listen to input events
                EHInstance.listen();
                // save it to input
                this.inputs[id] = {
                    ds: DSInstance,
                    eh: EHInstance,
                    emit: (t, p) => EHInstance.emitInner(t, p)
                };
            });
        });
    }
}
//# sourceMappingURL=data:application/json;base64,