import { DataSource } from '@n7-frontend/core';
import { merge } from 'lodash';
const DEFAULT_OPTIONS = {
    showToolbar: true,
    showSidebarButton: true,
    showFindButton: true,
    showPagingButtons: true,
    showZoomButtons: true,
    showPresentationModeButton: true,
    showOpenFileButton: false,
    showPrintButton: false,
    showDownloadButton: false,
    showBookmarkButton: false,
    showSecondaryToolbarButton: true,
    showRotateButton: false,
    showHandToolButton: true,
    showScrollingButton: false,
    showSpreadButton: false,
    showPropertiesButton: false
};
export class AwSchedaPdfDS extends DataSource {
    transform(data) {
        const { items } = data;
        const libOptions = merge(DEFAULT_OPTIONS, this.options.libOptions || {});
        if (!(Array.isArray(items) && items.length)) {
            return null;
        }
        this.items = items.map((item, index) => ({
            ...item,
            selected: index === 0
        }));
        console.log('libOptions----------------------------->', libOptions);
        // defaults
        return {
            libOptions,
            items: this.items,
            next: 1,
            prev: null,
            currentUrl: items[0].url,
        };
    }
    onChange(index) {
        this.output.next = index < (this.items.length - 1) ? index + 1 : null;
        this.output.prev = index > 0 ? index - 1 : null;
        this.output.currentUrl = this.items[index].url;
        this.items.forEach((item, itemIndex) => {
            item.selected = itemIndex === index;
        });
    }
    onLoaded() {
        this.output.classes = 'is-loaded';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWRhLXBkZi5kcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL243LWJvaWxlcnBsYXRlLWxpYi9zcmMvbGliL2FyaWFubmEtd2ViL2RhdGEtc291cmNlcy9zY2hlZGEtcGRmLmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRy9CLE1BQU0sZUFBZSxHQUFHO0lBQ3RCLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLGlCQUFpQixFQUFFLElBQUk7SUFDdkIsY0FBYyxFQUFFLElBQUk7SUFDcEIsaUJBQWlCLEVBQUUsSUFBSTtJQUN2QixlQUFlLEVBQUUsSUFBSTtJQUNyQiwwQkFBMEIsRUFBRSxJQUFJO0lBQ2hDLGtCQUFrQixFQUFFLEtBQUs7SUFDekIsZUFBZSxFQUFFLEtBQUs7SUFDdEIsa0JBQWtCLEVBQUUsS0FBSztJQUN6QixrQkFBa0IsRUFBRSxLQUFLO0lBQ3pCLDBCQUEwQixFQUFFLElBQUk7SUFDaEMsZ0JBQWdCLEVBQUUsS0FBSztJQUN2QixrQkFBa0IsRUFBRSxJQUFJO0lBQ3hCLG1CQUFtQixFQUFFLEtBQUs7SUFDMUIsZ0JBQWdCLEVBQUUsS0FBSztJQUN2QixvQkFBb0IsRUFBRSxLQUFLO0NBQzVCLENBQUM7QUFFRixNQUFNLE9BQU8sYUFBYyxTQUFRLFVBQVU7SUFPakMsU0FBUyxDQUFDLElBQUk7UUFDdEIsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQztRQUN2QixNQUFNLFVBQVUsR0FBRyxLQUFLLENBQ3RCLGVBQWUsRUFDZixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQzlCLENBQUM7UUFDRixJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMzQyxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN2QyxHQUFHLElBQUk7WUFDUCxRQUFRLEVBQUUsS0FBSyxLQUFLLENBQUM7U0FDdEIsQ0FBQyxDQUFDLENBQUM7UUFFSixPQUFPLENBQUMsR0FBRyxDQUFDLDBDQUEwQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRXBFLFdBQVc7UUFDWCxPQUFPO1lBQ0wsVUFBVTtZQUNWLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixJQUFJLEVBQUUsQ0FBQztZQUNQLElBQUksRUFBRSxJQUFJO1lBQ1YsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHO1NBQ3pCLENBQUM7SUFDSixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQUs7UUFDWixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3RFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUMvQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsRUFBRTtZQUNyQyxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsS0FBSyxLQUFLLENBQUM7UUFDdEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQztJQUNwQyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhU291cmNlIH0gZnJvbSAnQG43LWZyb250ZW5kL2NvcmUnO1xuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgUGRmVmlld2VyRGF0YSB9IGZyb20gJy4uL2NvbXBvbmVudHMnO1xuXG5jb25zdCBERUZBVUxUX09QVElPTlMgPSB7XG4gIHNob3dUb29sYmFyOiB0cnVlLFxuICBzaG93U2lkZWJhckJ1dHRvbjogdHJ1ZSxcbiAgc2hvd0ZpbmRCdXR0b246IHRydWUsXG4gIHNob3dQYWdpbmdCdXR0b25zOiB0cnVlLFxuICBzaG93Wm9vbUJ1dHRvbnM6IHRydWUsXG4gIHNob3dQcmVzZW50YXRpb25Nb2RlQnV0dG9uOiB0cnVlLFxuICBzaG93T3BlbkZpbGVCdXR0b246IGZhbHNlLFxuICBzaG93UHJpbnRCdXR0b246IGZhbHNlLFxuICBzaG93RG93bmxvYWRCdXR0b246IGZhbHNlLFxuICBzaG93Qm9va21hcmtCdXR0b246IGZhbHNlLFxuICBzaG93U2Vjb25kYXJ5VG9vbGJhckJ1dHRvbjogdHJ1ZSxcbiAgc2hvd1JvdGF0ZUJ1dHRvbjogZmFsc2UsXG4gIHNob3dIYW5kVG9vbEJ1dHRvbjogdHJ1ZSxcbiAgc2hvd1Njcm9sbGluZ0J1dHRvbjogZmFsc2UsXG4gIHNob3dTcHJlYWRCdXR0b246IGZhbHNlLFxuICBzaG93UHJvcGVydGllc0J1dHRvbjogZmFsc2Vcbn07XG5cbmV4cG9ydCBjbGFzcyBBd1NjaGVkYVBkZkRTIGV4dGVuZHMgRGF0YVNvdXJjZSB7XG4gIHByaXZhdGUgaXRlbXM6IHtcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIHVybDogc3RyaW5nO1xuICAgIHNlbGVjdGVkOiBib29sZWFuO1xuICB9W107XG5cbiAgcHJvdGVjdGVkIHRyYW5zZm9ybShkYXRhKTogUGRmVmlld2VyRGF0YSB7XG4gICAgY29uc3QgeyBpdGVtcyB9ID0gZGF0YTtcbiAgICBjb25zdCBsaWJPcHRpb25zID0gbWVyZ2UoXG4gICAgICBERUZBVUxUX09QVElPTlMsXG4gICAgICB0aGlzLm9wdGlvbnMubGliT3B0aW9ucyB8fCB7fVxuICAgICk7XG4gICAgaWYgKCEoQXJyYXkuaXNBcnJheShpdGVtcykgJiYgaXRlbXMubGVuZ3RoKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5pdGVtcyA9IGl0ZW1zLm1hcCgoaXRlbSwgaW5kZXgpID0+ICh7XG4gICAgICAuLi5pdGVtLFxuICAgICAgc2VsZWN0ZWQ6IGluZGV4ID09PSAwXG4gICAgfSkpO1xuXG4gICAgY29uc29sZS5sb2coJ2xpYk9wdGlvbnMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLT4nLCBsaWJPcHRpb25zKTtcblxuICAgIC8vIGRlZmF1bHRzXG4gICAgcmV0dXJuIHtcbiAgICAgIGxpYk9wdGlvbnMsXG4gICAgICBpdGVtczogdGhpcy5pdGVtcyxcbiAgICAgIG5leHQ6IDEsXG4gICAgICBwcmV2OiBudWxsLFxuICAgICAgY3VycmVudFVybDogaXRlbXNbMF0udXJsLFxuICAgIH07XG4gIH1cblxuICBvbkNoYW5nZShpbmRleCkge1xuICAgIHRoaXMub3V0cHV0Lm5leHQgPSBpbmRleCA8ICh0aGlzLml0ZW1zLmxlbmd0aCAtIDEpID8gaW5kZXggKyAxIDogbnVsbDtcbiAgICB0aGlzLm91dHB1dC5wcmV2ID0gaW5kZXggPiAwID8gaW5kZXggLSAxIDogbnVsbDtcbiAgICB0aGlzLm91dHB1dC5jdXJyZW50VXJsID0gdGhpcy5pdGVtc1tpbmRleF0udXJsO1xuICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoaXRlbSwgaXRlbUluZGV4KSA9PiB7XG4gICAgICBpdGVtLnNlbGVjdGVkID0gaXRlbUluZGV4ID09PSBpbmRleDtcbiAgICB9KTtcbiAgfVxuXG4gIG9uTG9hZGVkKCkge1xuICAgIHRoaXMub3V0cHV0LmNsYXNzZXMgPSAnaXMtbG9hZGVkJztcbiAgfVxufVxuIl19