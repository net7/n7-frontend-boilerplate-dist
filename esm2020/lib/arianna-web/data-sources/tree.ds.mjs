import { DataSource } from '@n7-frontend/core';
import helpers from '../../common/helpers';
export class AwTreeDS extends DataSource {
    constructor() {
        super(...arguments);
        this.transform = (data) => data;
        this._getCachedData = () => AwTreeDS.dataCache[this.rootId];
        this._normalize = ({ id, label, icon, img, branches, document_type: type, document_classification: classification }) => {
            const hasBranches = !!(Array.isArray(branches) && branches.length);
            this._getCachedData().flatData[id] = {
                id, label, icon, img, hasBranches, type, classification
            };
            if (hasBranches) {
                branches.forEach((data) => {
                    this._getCachedData().flatIds.push([id, data.id]);
                    this._normalize(data);
                });
            }
        };
        this._getParent = (id) => this._getCachedData().flatIds
            .filter(([, childId]) => childId === id)
            .map(([parentId]) => parentId)[0] || null;
        this._getTreePath = (id) => {
            const ids = [id];
            let currentId = id;
            while (currentId) {
                const parentId = this._getParent(currentId);
                if (parentId) {
                    ids.push(parentId);
                }
                currentId = parentId;
            }
            return ids.reverse();
        };
        this._getTree = (path) => {
            const tree = {};
            let counter = 0;
            const loadItems = (id, source) => {
                counter += 1;
                const nextParent = path[counter];
                source.items = [];
                this._getCachedData().flatIds
                    .filter(([parentId]) => parentId === id)
                    .forEach(([, childId], index) => {
                    const inPath = childId === nextParent;
                    const item = this._getTreeItem(childId, inPath);
                    source.items.push(item);
                    if (inPath) {
                        loadItems(childId, source.items[index]);
                    }
                });
            };
            // init
            loadItems(path[0], tree);
            return tree;
        };
        this._getTreeItem = (id, inPath) => {
            const { label, img, hasBranches, type, classification } = this._getCachedData().flatData[id];
            const defaultIcon = (this.options.config[type] || { icon: null }).icon;
            let specificIcon = '';
            const lastSegment = /.*\.(\w+)$/;
            if (classification && lastSegment.test(classification)) {
                const classID = classification
                    .match(lastSegment)[1] // get classification characters
                    .toUpperCase(); // normalize
                specificIcon = this.options.config[type].classifications[classID].icon;
            }
            const arrowIcons = inPath ? 'n7-icon-angle-down' : 'n7-icon-angle-right';
            const classes = [];
            if (inPath) {
                classes.push('is-expanded');
            }
            if (this.activeId === id) {
                classes.push('is-active');
            }
            return {
                classes: classes.join(' '),
                text: label || null,
                img: img || null,
                icon: (specificIcon || defaultIcon),
                toggle: hasBranches ? {
                    icon: arrowIcons,
                    payload: {
                        source: 'toggle',
                        id,
                    },
                } : null,
                meta: id,
                anchor: {
                    href: `${this.basePath}/${id}/${helpers.slugify(label)}`,
                },
            };
        };
    }
    load(data) {
        const { tree, basePath } = data;
        this.rootId = tree.id;
        this.basePath = basePath;
        // save in cache
        if (!AwTreeDS.dataCache[this.rootId]) {
            AwTreeDS.dataCache[this.rootId] = { flatIds: [], flatData: {} };
            this._normalize(tree);
        }
    }
    build(id) {
        const path = this._getTreePath(id);
        const oldPath = this._getTreePath(this.currentId);
        const oldPathIndex = oldPath.indexOf(id);
        if (oldPathIndex > 0) {
            path.splice(oldPathIndex);
            this.currentId = null;
        }
        else if (this.currentId === id) {
            const idIndex = path.indexOf(this.currentId);
            path.splice(idIndex);
            this.currentId = null;
        }
        else {
            this.currentId = id;
        }
        const tree = this._getTree(path);
        this.update(tree);
    }
    setActive(id) {
        this.activeId = id;
    }
    highlightActive() {
        const control = (items) => {
            items.forEach((item) => {
                const founded = item.meta === this.activeId;
                const hasActive = item.classes.indexOf('is-active') !== -1;
                // clear is-active
                if (hasActive && !founded) {
                    const currentClasses = item.classes.split(' ');
                    currentClasses.splice(currentClasses.indexOf('is-active'), 1);
                    item.classes = currentClasses.join(' ');
                }
                if (founded) {
                    const currentClasses = item.classes.split(' ');
                    if (currentClasses.indexOf('is-active') === -1) {
                        currentClasses.push('is-active');
                    }
                    item.classes = currentClasses.join(' ');
                }
                if (Array.isArray(item.items) && item.items.length) {
                    control(item.items);
                }
            });
        };
        control(this.output.items);
    }
}
AwTreeDS.dataCache = {};
//# sourceMappingURL=data:application/json;base64,