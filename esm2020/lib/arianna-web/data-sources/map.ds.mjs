import { DataSource } from '@n7-frontend/core';
import * as Leaflet from 'leaflet';
import { Subject } from 'rxjs';
const MARKER_ICON = Leaflet.icon({
    iconUrl: '/assets/pin.png',
    iconSize: [30, 45.5],
    popupAnchor: [0, -25],
    className: 'marker-icon'
});
const MARKER_ICON_SELECTED = Leaflet.icon({
    iconUrl: '/assets/pin-selected.png',
    iconSize: [30, 45.5],
    popupAnchor: [0, -25],
    className: 'marker-icon-selected'
});
export class AwMapDS extends DataSource {
    constructor() {
        super(...arguments);
        this.markerOpen$ = new Subject();
        this.markerClose$ = new Subject();
        this.transform = (data) => ({
            containerId: 'map-canvas',
            tileLayers: [{
                    url: 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png',
                    options: {}
                }],
            initialView: {
                center: [0, 0],
                zoom: 13
            },
            _setInstance: (map) => {
                this.map = map;
                const bounds = new Leaflet
                    .LatLngBounds(data
                    .filter((d) => this.isValidMarker(d))
                    .map(({ lat, lon }) => [lat, lon]));
                this.map.fitBounds(bounds);
                // adding markers
                const markers = Leaflet.markerClusterGroup({
                    showCoverageOnHover: false,
                });
                data
                    // skip broken markers
                    .filter((d) => (this.isValidMarker(d)))
                    // draw markers on the map
                    .forEach(({ lat, lon, item }) => {
                    const { label } = item;
                    const marker = Leaflet.marker([lat, lon], { icon: MARKER_ICON })
                        .addTo(markers)
                        .bindPopup(label)
                        .on('click', ({ target }) => {
                        const { icon } = target.options;
                        const { className } = icon.options;
                        if (className === 'marker-icon-selected') {
                            this.markerOpen$.next(item);
                        }
                    });
                    marker.getPopup().on('remove', ({ target }) => {
                        target._source.setIcon(MARKER_ICON);
                        this.markerClose$.next();
                    });
                    marker.getPopup().on('add', ({ target }) => {
                        target._source.setIcon(MARKER_ICON_SELECTED);
                    });
                });
                this.map.addLayer(markers);
            }
        });
    }
    /**
     * Performs validation for a leaflet marker data.
     * If the data is invalid displays an error.
     *
     * @param marker data for a leaflet marker
     * @returns true if the marker data is valid
     */
    isValidMarker({ lat, lon }) {
        const test = (lat
            && lon
            && /^-?\d+\.\d*$/.test(lat)
            && /^-?\d+\.\d*$/.test(lon));
        if (test)
            return true;
        console.error(`${lat}, ${lon} is not a valid marker!`);
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbjctYm9pbGVycGxhdGUtbGliL3NyYy9saWIvYXJpYW5uYS13ZWIvZGF0YS1zb3VyY2VzL21hcC5kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDL0MsT0FBTyxLQUFLLE9BQU8sTUFBTSxTQUFTLENBQUM7QUFDbkMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUvQixNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQy9CLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQztJQUNwQixXQUFXLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDckIsU0FBUyxFQUFFLGFBQWE7Q0FDekIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxvQkFBb0IsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQ3hDLE9BQU8sRUFBRSwwQkFBMEI7SUFDbkMsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQztJQUNwQixXQUFXLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDckIsU0FBUyxFQUFFLHNCQUFzQjtDQUNsQyxDQUFDLENBQUM7QUFFSCxNQUFNLE9BQU8sT0FBUSxTQUFRLFVBQVU7SUFBdkM7O1FBR1MsZ0JBQVcsR0FBb0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUU3QyxpQkFBWSxHQUFrQixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBRXpDLGNBQVMsR0FBRyxDQUFDLElBQUksRUFBVyxFQUFFLENBQUMsQ0FBQztZQUN4QyxXQUFXLEVBQUUsWUFBWTtZQUN6QixVQUFVLEVBQUUsQ0FBQztvQkFDWCxHQUFHLEVBQUUsOEVBQThFO29CQUNuRixPQUFPLEVBQUUsRUFBRTtpQkFDWixDQUFDO1lBQ0YsV0FBVyxFQUFFO2dCQUNYLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxFQUFFLEVBQUU7YUFDVDtZQUNELFlBQVksRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUNwQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztnQkFDZixNQUFNLE1BQU0sR0FBRyxJQUFJLE9BQU87cUJBQ3ZCLFlBQVksQ0FBQyxJQUFJO3FCQUNmLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDcEMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDeEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBRTNCLGlCQUFpQjtnQkFDakIsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDO29CQUN6QyxtQkFBbUIsRUFBRSxLQUFLO2lCQUMzQixDQUFDLENBQUM7Z0JBQ0gsSUFBSTtvQkFDRixzQkFBc0I7cUJBQ3JCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3ZDLDBCQUEwQjtxQkFDekIsT0FBTyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUU7b0JBQzlCLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUM7b0JBQ3ZCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLENBQUM7eUJBQzdELEtBQUssQ0FBQyxPQUFPLENBQUM7eUJBQ2QsU0FBUyxDQUFDLEtBQUssQ0FBQzt5QkFDaEIsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTt3QkFDMUIsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7d0JBQ2hDLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO3dCQUNuQyxJQUFJLFNBQVMsS0FBSyxzQkFBc0IsRUFBRTs0QkFDeEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7eUJBQzdCO29CQUNILENBQUMsQ0FBQyxDQUFDO29CQUVMLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFO3dCQUM1QyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQzt3QkFDcEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDM0IsQ0FBQyxDQUFDLENBQUM7b0JBRUgsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUU7d0JBQ3pDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7b0JBQy9DLENBQUMsQ0FBQyxDQUFDO2dCQUNMLENBQUMsQ0FBQyxDQUFDO2dCQUNMLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzdCLENBQUM7U0FDRixDQUFDLENBQUM7SUFvQkwsQ0FBQztJQWxCQzs7Ozs7O09BTUc7SUFDSyxhQUFhLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFO1FBQ2hDLE1BQU0sSUFBSSxHQUFHLENBQ1gsR0FBRztlQUNBLEdBQUc7ZUFDSCxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztlQUN4QixjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUM1QixDQUFDO1FBQ0YsSUFBSSxJQUFJO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDdEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsS0FBSyxHQUFHLHlCQUF5QixDQUFDLENBQUM7UUFDdkQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXBEYXRhIH0gZnJvbSAnQG43LWZyb250ZW5kL2NvbXBvbmVudHMnO1xyXG5pbXBvcnQgeyBEYXRhU291cmNlIH0gZnJvbSAnQG43LWZyb250ZW5kL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBMZWFmbGV0IGZyb20gJ2xlYWZsZXQnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcblxyXG5jb25zdCBNQVJLRVJfSUNPTiA9IExlYWZsZXQuaWNvbih7XHJcbiAgaWNvblVybDogJy9hc3NldHMvcGluLnBuZycsXHJcbiAgaWNvblNpemU6IFszMCwgNDUuNV0sXHJcbiAgcG9wdXBBbmNob3I6IFswLCAtMjVdLFxyXG4gIGNsYXNzTmFtZTogJ21hcmtlci1pY29uJ1xyXG59KTtcclxuXHJcbmNvbnN0IE1BUktFUl9JQ09OX1NFTEVDVEVEID0gTGVhZmxldC5pY29uKHtcclxuICBpY29uVXJsOiAnL2Fzc2V0cy9waW4tc2VsZWN0ZWQucG5nJyxcclxuICBpY29uU2l6ZTogWzMwLCA0NS41XSxcclxuICBwb3B1cEFuY2hvcjogWzAsIC0yNV0sXHJcbiAgY2xhc3NOYW1lOiAnbWFya2VyLWljb24tc2VsZWN0ZWQnXHJcbn0pO1xyXG5cclxuZXhwb3J0IGNsYXNzIEF3TWFwRFMgZXh0ZW5kcyBEYXRhU291cmNlIHtcclxuICBwdWJsaWMgbWFwO1xyXG5cclxuICBwdWJsaWMgbWFya2VyT3BlbiQ6IFN1YmplY3Q8b2JqZWN0PiA9IG5ldyBTdWJqZWN0KCk7XHJcblxyXG4gIHB1YmxpYyBtYXJrZXJDbG9zZSQ6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdCgpO1xyXG5cclxuICBwcm90ZWN0ZWQgdHJhbnNmb3JtID0gKGRhdGEpOiBNYXBEYXRhID0+ICh7XHJcbiAgICBjb250YWluZXJJZDogJ21hcC1jYW52YXMnLFxyXG4gICAgdGlsZUxheWVyczogW3tcclxuICAgICAgdXJsOiAnaHR0cHM6Ly9jYXJ0b2RiLWJhc2VtYXBzLXtzfS5nbG9iYWwuc3NsLmZhc3RseS5uZXQvbGlnaHRfYWxsL3t6fS97eH0ve3l9LnBuZycsXHJcbiAgICAgIG9wdGlvbnM6IHt9XHJcbiAgICB9XSxcclxuICAgIGluaXRpYWxWaWV3OiB7XHJcbiAgICAgIGNlbnRlcjogWzAsIDBdLFxyXG4gICAgICB6b29tOiAxM1xyXG4gICAgfSxcclxuICAgIF9zZXRJbnN0YW5jZTogKG1hcCkgPT4ge1xyXG4gICAgICB0aGlzLm1hcCA9IG1hcDtcclxuICAgICAgY29uc3QgYm91bmRzID0gbmV3IExlYWZsZXRcclxuICAgICAgICAuTGF0TG5nQm91bmRzKGRhdGFcclxuICAgICAgICAgIC5maWx0ZXIoKGQpID0+IHRoaXMuaXNWYWxpZE1hcmtlcihkKSlcclxuICAgICAgICAgIC5tYXAoKHsgbGF0LCBsb24gfSkgPT4gW2xhdCwgbG9uXSkpO1xyXG4gICAgICB0aGlzLm1hcC5maXRCb3VuZHMoYm91bmRzKTtcclxuXHJcbiAgICAgIC8vIGFkZGluZyBtYXJrZXJzXHJcbiAgICAgIGNvbnN0IG1hcmtlcnMgPSBMZWFmbGV0Lm1hcmtlckNsdXN0ZXJHcm91cCh7XHJcbiAgICAgICAgc2hvd0NvdmVyYWdlT25Ib3ZlcjogZmFsc2UsXHJcbiAgICAgIH0pO1xyXG4gICAgICBkYXRhXHJcbiAgICAgICAgLy8gc2tpcCBicm9rZW4gbWFya2Vyc1xyXG4gICAgICAgIC5maWx0ZXIoKGQpID0+ICh0aGlzLmlzVmFsaWRNYXJrZXIoZCkpKVxyXG4gICAgICAgIC8vIGRyYXcgbWFya2VycyBvbiB0aGUgbWFwXHJcbiAgICAgICAgLmZvckVhY2goKHsgbGF0LCBsb24sIGl0ZW0gfSkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgeyBsYWJlbCB9ID0gaXRlbTtcclxuICAgICAgICAgIGNvbnN0IG1hcmtlciA9IExlYWZsZXQubWFya2VyKFtsYXQsIGxvbl0sIHsgaWNvbjogTUFSS0VSX0lDT04gfSlcclxuICAgICAgICAgICAgLmFkZFRvKG1hcmtlcnMpXHJcbiAgICAgICAgICAgIC5iaW5kUG9wdXAobGFiZWwpXHJcbiAgICAgICAgICAgIC5vbignY2xpY2snLCAoeyB0YXJnZXQgfSkgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHsgaWNvbiB9ID0gdGFyZ2V0Lm9wdGlvbnM7XHJcbiAgICAgICAgICAgICAgY29uc3QgeyBjbGFzc05hbWUgfSA9IGljb24ub3B0aW9ucztcclxuICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lID09PSAnbWFya2VyLWljb24tc2VsZWN0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hcmtlck9wZW4kLm5leHQoaXRlbSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBtYXJrZXIuZ2V0UG9wdXAoKS5vbigncmVtb3ZlJywgKHsgdGFyZ2V0IH0pID0+IHtcclxuICAgICAgICAgICAgdGFyZ2V0Ll9zb3VyY2Uuc2V0SWNvbihNQVJLRVJfSUNPTik7XHJcbiAgICAgICAgICAgIHRoaXMubWFya2VyQ2xvc2UkLm5leHQoKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIG1hcmtlci5nZXRQb3B1cCgpLm9uKCdhZGQnLCAoeyB0YXJnZXQgfSkgPT4ge1xyXG4gICAgICAgICAgICB0YXJnZXQuX3NvdXJjZS5zZXRJY29uKE1BUktFUl9JQ09OX1NFTEVDVEVEKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB0aGlzLm1hcC5hZGRMYXllcihtYXJrZXJzKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgLyoqXHJcbiAgICogUGVyZm9ybXMgdmFsaWRhdGlvbiBmb3IgYSBsZWFmbGV0IG1hcmtlciBkYXRhLlxyXG4gICAqIElmIHRoZSBkYXRhIGlzIGludmFsaWQgZGlzcGxheXMgYW4gZXJyb3IuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gbWFya2VyIGRhdGEgZm9yIGEgbGVhZmxldCBtYXJrZXJcclxuICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBtYXJrZXIgZGF0YSBpcyB2YWxpZFxyXG4gICAqL1xyXG4gIHByaXZhdGUgaXNWYWxpZE1hcmtlcih7IGxhdCwgbG9uIH0pOiBib29sZWFuIHtcclxuICAgIGNvbnN0IHRlc3QgPSAoXHJcbiAgICAgIGxhdFxyXG4gICAgICAmJiBsb25cclxuICAgICAgJiYgL14tP1xcZCtcXC5cXGQqJC8udGVzdChsYXQpXHJcbiAgICAgICYmIC9eLT9cXGQrXFwuXFxkKiQvLnRlc3QobG9uKVxyXG4gICAgKTtcclxuICAgIGlmICh0ZXN0KSByZXR1cm4gdHJ1ZTtcclxuICAgIGNvbnNvbGUuZXJyb3IoYCR7bGF0fSwgJHtsb259IGlzIG5vdCBhIHZhbGlkIG1hcmtlciFgKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuIl19