import { DataSource } from '@n7-frontend/core';
import { interval } from 'rxjs';
import { filter, first } from 'rxjs/operators';
export class AwSchedaImageDS extends DataSource {
    transform(data) {
        const tileSources = this.getTileSources(data.items);
        return {
            images: [],
            viewerId: data.id,
            libOptions: {
                tileSources,
                sequenceMode: true,
                showReferenceStrip: true,
                autoHideControls: false,
                showNavigator: false,
            },
            _setViewer: (viewer) => {
                this.instance = viewer;
            }
        };
    }
    hasInstance() {
        return !!this.instance;
    }
    updateImages(data) {
        if (!this.instance)
            return;
        // container exists check
        interval(10).pipe(filter(() => !!document.getElementById(this.output.viewerId)), first()).subscribe(() => {
            // reset
            this.instance.world.removeAll();
            setTimeout(() => {
                const images = this.getTileSources(data.items);
                this.instance.open(images);
            });
        });
    }
    reset() {
        if (!this.instance)
            return;
        this.instance.world.removeAll();
    }
    getTileSources(images) {
        const tileSources = [];
        images.forEach(({ type, url, iiifImages }) => {
            if (type === 'images-simple') {
                tileSources.push({
                    url,
                    type: 'image'
                });
            }
            else if (type === 'images-iip') {
                // FIXME: togliere replace
                tileSources.push(url.replace('FIF', 'Deepzoom').replace('.tif', '.tif.dzi'));
            }
            else if (type === 'images-iiif') {
                iiifImages.forEach((iiifUrl) => {
                    tileSources.push(iiifUrl);
                });
            }
        });
        return tileSources;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWRhLWltYWdlLmRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbjctYm9pbGVycGxhdGUtbGliL3NyYy9saWIvYXJpYW5uYS13ZWIvZGF0YS1zb3VyY2VzL3NjaGVkYS1pbWFnZS5kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFL0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRS9DLE1BQU0sT0FBTyxlQUFnQixTQUFRLFVBQVU7SUFHbkMsU0FBUyxDQUFDLElBQUk7UUFDdEIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFcEQsT0FBTztZQUNMLE1BQU0sRUFBRSxFQUFFO1lBQ1YsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ2pCLFVBQVUsRUFBRTtnQkFDVixXQUFXO2dCQUNYLFlBQVksRUFBRSxJQUFJO2dCQUNsQixrQkFBa0IsRUFBRSxJQUFJO2dCQUN4QixnQkFBZ0IsRUFBRSxLQUFLO2dCQUN2QixhQUFhLEVBQUUsS0FBSzthQUNyQjtZQUNELFVBQVUsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFO2dCQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztZQUN6QixDQUFDO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFTSxXQUFXO1FBQ2hCLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQztJQUVNLFlBQVksQ0FBQyxJQUFJO1FBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUTtZQUFFLE9BQU87UUFFM0IseUJBQXlCO1FBQ3pCLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ2YsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFDN0QsS0FBSyxFQUFFLENBQ1IsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2YsUUFBUTtZQUNSLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2hDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQy9DLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzdCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sS0FBSztRQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUTtZQUFFLE9BQU87UUFDM0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVPLGNBQWMsQ0FBQyxNQUFNO1FBQzNCLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUN2QixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUU7WUFDM0MsSUFBSSxJQUFJLEtBQUssZUFBZSxFQUFFO2dCQUM1QixXQUFXLENBQUMsSUFBSSxDQUFDO29CQUNmLEdBQUc7b0JBQ0gsSUFBSSxFQUFFLE9BQU87aUJBQ2QsQ0FBQyxDQUFDO2FBQ0o7aUJBQU0sSUFBSSxJQUFJLEtBQUssWUFBWSxFQUFFO2dCQUNoQywwQkFBMEI7Z0JBQzFCLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO2FBQzlFO2lCQUFNLElBQUksSUFBSSxLQUFLLGFBQWEsRUFBRTtnQkFDakMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO29CQUM3QixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUM1QixDQUFDLENBQUMsQ0FBQzthQUNKO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhU291cmNlIH0gZnJvbSAnQG43LWZyb250ZW5kL2NvcmUnO1xyXG5pbXBvcnQgeyBJbWFnZVZpZXdlckRhdGEgfSBmcm9tICdAbjctZnJvbnRlbmQvY29tcG9uZW50cyc7XHJcbmltcG9ydCB7IGludGVydmFsIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpbHRlciwgZmlyc3QgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQXdTY2hlZGFJbWFnZURTIGV4dGVuZHMgRGF0YVNvdXJjZSB7XHJcbiAgcHJpdmF0ZSBpbnN0YW5jZTtcclxuXHJcbiAgcHJvdGVjdGVkIHRyYW5zZm9ybShkYXRhKTogSW1hZ2VWaWV3ZXJEYXRhIHtcclxuICAgIGNvbnN0IHRpbGVTb3VyY2VzID0gdGhpcy5nZXRUaWxlU291cmNlcyhkYXRhLml0ZW1zKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpbWFnZXM6IFtdLFxyXG4gICAgICB2aWV3ZXJJZDogZGF0YS5pZCxcclxuICAgICAgbGliT3B0aW9uczoge1xyXG4gICAgICAgIHRpbGVTb3VyY2VzLFxyXG4gICAgICAgIHNlcXVlbmNlTW9kZTogdHJ1ZSxcclxuICAgICAgICBzaG93UmVmZXJlbmNlU3RyaXA6IHRydWUsXHJcbiAgICAgICAgYXV0b0hpZGVDb250cm9sczogZmFsc2UsXHJcbiAgICAgICAgc2hvd05hdmlnYXRvcjogZmFsc2UsXHJcbiAgICAgIH0sXHJcbiAgICAgIF9zZXRWaWV3ZXI6ICh2aWV3ZXIpID0+IHtcclxuICAgICAgICB0aGlzLmluc3RhbmNlID0gdmlld2VyO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGhhc0luc3RhbmNlKCkge1xyXG4gICAgcmV0dXJuICEhdGhpcy5pbnN0YW5jZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB1cGRhdGVJbWFnZXMoZGF0YSkge1xyXG4gICAgaWYgKCF0aGlzLmluc3RhbmNlKSByZXR1cm47XHJcblxyXG4gICAgLy8gY29udGFpbmVyIGV4aXN0cyBjaGVja1xyXG4gICAgaW50ZXJ2YWwoMTApLnBpcGUoXHJcbiAgICAgIGZpbHRlcigoKSA9PiAhIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMub3V0cHV0LnZpZXdlcklkKSksXHJcbiAgICAgIGZpcnN0KClcclxuICAgICkuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgLy8gcmVzZXRcclxuICAgICAgdGhpcy5pbnN0YW5jZS53b3JsZC5yZW1vdmVBbGwoKTtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaW1hZ2VzID0gdGhpcy5nZXRUaWxlU291cmNlcyhkYXRhLml0ZW1zKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlLm9wZW4oaW1hZ2VzKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldCgpIHtcclxuICAgIGlmICghdGhpcy5pbnN0YW5jZSkgcmV0dXJuO1xyXG4gICAgdGhpcy5pbnN0YW5jZS53b3JsZC5yZW1vdmVBbGwoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0VGlsZVNvdXJjZXMoaW1hZ2VzKSB7XHJcbiAgICBjb25zdCB0aWxlU291cmNlcyA9IFtdO1xyXG4gICAgaW1hZ2VzLmZvckVhY2goKHsgdHlwZSwgdXJsLCBpaWlmSW1hZ2VzIH0pID0+IHtcclxuICAgICAgaWYgKHR5cGUgPT09ICdpbWFnZXMtc2ltcGxlJykge1xyXG4gICAgICAgIHRpbGVTb3VyY2VzLnB1c2goe1xyXG4gICAgICAgICAgdXJsLFxyXG4gICAgICAgICAgdHlwZTogJ2ltYWdlJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdpbWFnZXMtaWlwJykge1xyXG4gICAgICAgIC8vIEZJWE1FOiB0b2dsaWVyZSByZXBsYWNlXHJcbiAgICAgICAgdGlsZVNvdXJjZXMucHVzaCh1cmwucmVwbGFjZSgnRklGJywgJ0RlZXB6b29tJykucmVwbGFjZSgnLnRpZicsICcudGlmLmR6aScpKTtcclxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnaW1hZ2VzLWlpaWYnKSB7XHJcbiAgICAgICAgaWlpZkltYWdlcy5mb3JFYWNoKChpaWlmVXJsKSA9PiB7XHJcbiAgICAgICAgICB0aWxlU291cmNlcy5wdXNoKGlpaWZVcmwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aWxlU291cmNlcztcclxuICB9XHJcbn1cclxuIl19