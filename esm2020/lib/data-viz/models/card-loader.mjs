import { TextItemDS, DataWidgetItemDS, ApexChartItemDS, TableItemDS, InnerTitleItemDS, SelectItemDS, MapItemDS, } from '../data-sources';
import { CardEH } from '../event-handlers';
const DATASOURCE_MAP = {
    text: TextItemDS,
    table: TableItemDS,
    select: SelectItemDS,
    map: MapItemDS,
    'inner-title': InnerTitleItemDS,
    'data-widget': DataWidgetItemDS,
    'apex-bar-chart': ApexChartItemDS,
    'apex-line-chart': ApexChartItemDS,
    'apex-pie-chart': ApexChartItemDS,
    'apex-radialbar-chart': ApexChartItemDS,
    'apex-radar-chart': ApexChartItemDS,
};
export class CardLoader {
    constructor(layout, config) {
        this.layout = layout;
        this.config = config;
        this.itemsInitialized = false;
        this.addLayoutWidgets();
    }
    getCards() {
        const { cards } = this.config;
        const cardsWithWidgets = [];
        // initialize items
        if (cards && !this.itemsInitialized) {
            const { widgets } = this.layout.lb;
            this.itemsInitialized = true;
            cards.forEach(({ header, content, footer }, index) => {
                const cardWidgets = {};
                const cardSections = content.sections
                    .concat(header?.sections || [])
                    .concat(footer?.sections || []);
                cardSections.forEach(({ items }) => {
                    items.forEach(({ id, type: itemType, initialData }) => {
                        const { ds } = widgets[id];
                        const { eh } = widgets[id];
                        ds.id = id;
                        ds.type = itemType;
                        const emit = (type, payload) => eh.emitInner(type, payload);
                        cardWidgets[id] = { ds, emit };
                        // with initialData
                        if (initialData) {
                            ds.update(initialData);
                        }
                    });
                });
                // add widgets to card
                cardsWithWidgets[index] = {
                    ...cards[index],
                    widgets: cardWidgets
                };
            });
        }
        return cardsWithWidgets;
    }
    addLayoutWidgets() {
        const { cards } = this.config;
        if (cards) {
            this.layout.widgets = this.layout.widgets || [];
            cards.forEach(({ header, content, footer }) => {
                const cardSections = content.sections
                    .concat(header?.sections || [])
                    .concat(footer?.sections || []);
                cardSections.forEach(({ items }) => {
                    items.forEach(({ id, type, options }) => {
                        this.layout.widgets.push({
                            id,
                            options,
                            dataSource: DATASOURCE_MAP[type],
                            eventHandler: CardEH
                        });
                    });
                });
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC1sb2FkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uNy1ib2lsZXJwbGF0ZS1saWIvc3JjL2xpYi9kYXRhLXZpei9tb2RlbHMvY2FyZC1sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUNMLFVBQVUsRUFDVixnQkFBZ0IsRUFDaEIsZUFBZSxFQUNmLFdBQVcsRUFDWCxnQkFBZ0IsRUFDaEIsWUFBWSxFQUNaLFNBQVMsR0FDVixNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUUzQyxNQUFNLGNBQWMsR0FBRztJQUNyQixJQUFJLEVBQUUsVUFBVTtJQUNoQixLQUFLLEVBQUUsV0FBVztJQUNsQixNQUFNLEVBQUUsWUFBWTtJQUNwQixHQUFHLEVBQUUsU0FBUztJQUNkLGFBQWEsRUFBRSxnQkFBZ0I7SUFDL0IsYUFBYSxFQUFFLGdCQUFnQjtJQUMvQixnQkFBZ0IsRUFBRSxlQUFlO0lBQ2pDLGlCQUFpQixFQUFFLGVBQWU7SUFDbEMsZ0JBQWdCLEVBQUUsZUFBZTtJQUNqQyxzQkFBc0IsRUFBRSxlQUFlO0lBQ3ZDLGtCQUFrQixFQUFFLGVBQWU7Q0FDcEMsQ0FBQztBQUVGLE1BQU0sT0FBTyxVQUFVO0lBR3JCLFlBQ1UsTUFBVyxFQUNYLE1BRVA7UUFITyxXQUFNLEdBQU4sTUFBTSxDQUFLO1FBQ1gsV0FBTSxHQUFOLE1BQU0sQ0FFYjtRQU5LLHFCQUFnQixHQUFHLEtBQUssQ0FBQztRQVEvQixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRU0sUUFBUTtRQUNiLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzlCLE1BQU0sZ0JBQWdCLEdBQUcsRUFBMkIsQ0FBQztRQUNyRCxtQkFBbUI7UUFDbkIsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDbkMsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ25DLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7WUFDN0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRTtnQkFDbkQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDO2dCQUN2QixNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsUUFBUTtxQkFDbEMsTUFBTSxDQUFDLE1BQU0sRUFBRSxRQUFRLElBQUksRUFBRSxDQUFDO3FCQUM5QixNQUFNLENBQUMsTUFBTSxFQUFFLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQztnQkFFbEMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtvQkFDakMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRTt3QkFDcEQsTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQzt3QkFDM0IsTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQzt3QkFDM0IsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7d0JBQ1gsRUFBRSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7d0JBQ25CLE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBWSxFQUFFLE9BQWEsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7d0JBQzFFLFdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQzt3QkFDL0IsbUJBQW1CO3dCQUNuQixJQUFJLFdBQVcsRUFBRTs0QkFDZixFQUFFLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO3lCQUN4QjtvQkFDSCxDQUFDLENBQUMsQ0FBQztnQkFDTCxDQUFDLENBQUMsQ0FBQztnQkFFSCxzQkFBc0I7Z0JBQ3RCLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxHQUFHO29CQUN4QixHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7b0JBQ2YsT0FBTyxFQUFFLFdBQVc7aUJBQ3JCLENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxnQkFBZ0IsQ0FBQztJQUMxQixDQUFDO0lBRU8sZ0JBQWdCO1FBQ3RCLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzlCLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO1lBQ2hELEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtnQkFDNUMsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLFFBQVE7cUJBQ2xDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsUUFBUSxJQUFJLEVBQUUsQ0FBQztxQkFDOUIsTUFBTSxDQUFDLE1BQU0sRUFBRSxRQUFRLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBRWxDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7b0JBQ2pDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUNiLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUNsQixFQUFFLEVBQUU7d0JBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDOzRCQUN2QixFQUFFOzRCQUNGLE9BQU87NEJBQ1AsVUFBVSxFQUFFLGNBQWMsQ0FBQyxJQUFJLENBQUM7NEJBQ2hDLFlBQVksRUFBRSxNQUFNO3lCQUNyQixDQUFDLENBQUM7b0JBQ0wsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FyZERhdGEsIENhcmREYXRhV2l0aFdpZGdldHMgfSBmcm9tICcuLi90eXBlcy9jYXJkLnR5cGVzJztcbmltcG9ydCB7XG4gIFRleHRJdGVtRFMsXG4gIERhdGFXaWRnZXRJdGVtRFMsXG4gIEFwZXhDaGFydEl0ZW1EUyxcbiAgVGFibGVJdGVtRFMsXG4gIElubmVyVGl0bGVJdGVtRFMsXG4gIFNlbGVjdEl0ZW1EUyxcbiAgTWFwSXRlbURTLFxufSBmcm9tICcuLi9kYXRhLXNvdXJjZXMnO1xuaW1wb3J0IHsgQ2FyZEVIIH0gZnJvbSAnLi4vZXZlbnQtaGFuZGxlcnMnO1xuXG5jb25zdCBEQVRBU09VUkNFX01BUCA9IHtcbiAgdGV4dDogVGV4dEl0ZW1EUyxcbiAgdGFibGU6IFRhYmxlSXRlbURTLFxuICBzZWxlY3Q6IFNlbGVjdEl0ZW1EUyxcbiAgbWFwOiBNYXBJdGVtRFMsXG4gICdpbm5lci10aXRsZSc6IElubmVyVGl0bGVJdGVtRFMsXG4gICdkYXRhLXdpZGdldCc6IERhdGFXaWRnZXRJdGVtRFMsXG4gICdhcGV4LWJhci1jaGFydCc6IEFwZXhDaGFydEl0ZW1EUyxcbiAgJ2FwZXgtbGluZS1jaGFydCc6IEFwZXhDaGFydEl0ZW1EUyxcbiAgJ2FwZXgtcGllLWNoYXJ0JzogQXBleENoYXJ0SXRlbURTLFxuICAnYXBleC1yYWRpYWxiYXItY2hhcnQnOiBBcGV4Q2hhcnRJdGVtRFMsXG4gICdhcGV4LXJhZGFyLWNoYXJ0JzogQXBleENoYXJ0SXRlbURTLFxufTtcblxuZXhwb3J0IGNsYXNzIENhcmRMb2FkZXIge1xuICBwcml2YXRlIGl0ZW1zSW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGxheW91dDogYW55LFxuICAgIHByaXZhdGUgY29uZmlnOiB7XG4gICAgICBjYXJkczogQ2FyZERhdGFbXTtcbiAgICB9XG4gICkge1xuICAgIHRoaXMuYWRkTGF5b3V0V2lkZ2V0cygpO1xuICB9XG5cbiAgcHVibGljIGdldENhcmRzKCk6IENhcmREYXRhV2l0aFdpZGdldHNbXSB7XG4gICAgY29uc3QgeyBjYXJkcyB9ID0gdGhpcy5jb25maWc7XG4gICAgY29uc3QgY2FyZHNXaXRoV2lkZ2V0cyA9IFtdIGFzIENhcmREYXRhV2l0aFdpZGdldHNbXTtcbiAgICAvLyBpbml0aWFsaXplIGl0ZW1zXG4gICAgaWYgKGNhcmRzICYmICF0aGlzLml0ZW1zSW5pdGlhbGl6ZWQpIHtcbiAgICAgIGNvbnN0IHsgd2lkZ2V0cyB9ID0gdGhpcy5sYXlvdXQubGI7XG4gICAgICB0aGlzLml0ZW1zSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgY2FyZHMuZm9yRWFjaCgoeyBoZWFkZXIsIGNvbnRlbnQsIGZvb3RlciB9LCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjYXJkV2lkZ2V0cyA9IHt9O1xuICAgICAgICBjb25zdCBjYXJkU2VjdGlvbnMgPSBjb250ZW50LnNlY3Rpb25zXG4gICAgICAgICAgLmNvbmNhdChoZWFkZXI/LnNlY3Rpb25zIHx8IFtdKVxuICAgICAgICAgIC5jb25jYXQoZm9vdGVyPy5zZWN0aW9ucyB8fCBbXSk7XG5cbiAgICAgICAgY2FyZFNlY3Rpb25zLmZvckVhY2goKHsgaXRlbXMgfSkgPT4ge1xuICAgICAgICAgIGl0ZW1zLmZvckVhY2goKHsgaWQsIHR5cGU6IGl0ZW1UeXBlLCBpbml0aWFsRGF0YSB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGRzIH0gPSB3aWRnZXRzW2lkXTtcbiAgICAgICAgICAgIGNvbnN0IHsgZWggfSA9IHdpZGdldHNbaWRdO1xuICAgICAgICAgICAgZHMuaWQgPSBpZDtcbiAgICAgICAgICAgIGRzLnR5cGUgPSBpdGVtVHlwZTtcbiAgICAgICAgICAgIGNvbnN0IGVtaXQgPSAodHlwZTogc3RyaW5nLCBwYXlsb2FkPzogYW55KSA9PiBlaC5lbWl0SW5uZXIodHlwZSwgcGF5bG9hZCk7XG4gICAgICAgICAgICBjYXJkV2lkZ2V0c1tpZF0gPSB7IGRzLCBlbWl0IH07XG4gICAgICAgICAgICAvLyB3aXRoIGluaXRpYWxEYXRhXG4gICAgICAgICAgICBpZiAoaW5pdGlhbERhdGEpIHtcbiAgICAgICAgICAgICAgZHMudXBkYXRlKGluaXRpYWxEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYWRkIHdpZGdldHMgdG8gY2FyZFxuICAgICAgICBjYXJkc1dpdGhXaWRnZXRzW2luZGV4XSA9IHtcbiAgICAgICAgICAuLi5jYXJkc1tpbmRleF0sXG4gICAgICAgICAgd2lkZ2V0czogY2FyZFdpZGdldHNcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjYXJkc1dpdGhXaWRnZXRzO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRMYXlvdXRXaWRnZXRzKCkge1xuICAgIGNvbnN0IHsgY2FyZHMgfSA9IHRoaXMuY29uZmlnO1xuICAgIGlmIChjYXJkcykge1xuICAgICAgdGhpcy5sYXlvdXQud2lkZ2V0cyA9IHRoaXMubGF5b3V0LndpZGdldHMgfHwgW107XG4gICAgICBjYXJkcy5mb3JFYWNoKCh7IGhlYWRlciwgY29udGVudCwgZm9vdGVyIH0pID0+IHtcbiAgICAgICAgY29uc3QgY2FyZFNlY3Rpb25zID0gY29udGVudC5zZWN0aW9uc1xuICAgICAgICAgIC5jb25jYXQoaGVhZGVyPy5zZWN0aW9ucyB8fCBbXSlcbiAgICAgICAgICAuY29uY2F0KGZvb3Rlcj8uc2VjdGlvbnMgfHwgW10pO1xuXG4gICAgICAgIGNhcmRTZWN0aW9ucy5mb3JFYWNoKCh7IGl0ZW1zIH0pID0+IHtcbiAgICAgICAgICBpdGVtcy5mb3JFYWNoKCh7XG4gICAgICAgICAgICBpZCwgdHlwZSwgb3B0aW9uc1xuICAgICAgICAgIH0pID0+IHtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0LndpZGdldHMucHVzaCh7XG4gICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgICBkYXRhU291cmNlOiBEQVRBU09VUkNFX01BUFt0eXBlXSxcbiAgICAgICAgICAgICAgZXZlbnRIYW5kbGVyOiBDYXJkRUhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIl19