import { __extends } from "tslib";
import { EventHandler } from '@n7-frontend/core';
import { Subject } from 'rxjs';
import { isEmpty } from 'lodash';
import { takeUntil, filter } from 'rxjs/operators';
import helpers from '../../../common/helpers';
import { RESULTS_REQUEST_STATE_CONTEXT, INPUT_STATE_CONTEXT, FACETS_REQUEST_STATE_CONTEXT, SECTION_STATE_CONTEXT } from '../../services/search.service';
import { LayoutState } from '../../services/layout-state.service';
var MrSearchLayoutEH = /** @class */ (function (_super) {
    __extends(MrSearchLayoutEH, _super);
    function MrSearchLayoutEH() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.destroyed$ = new Subject();
        _this.searchState = {};
        return _this;
    }
    MrSearchLayoutEH.prototype.listen = function () {
        var _this = this;
        this.innerEvents$.subscribe(function (_a) {
            var type = _a.type, payload = _a.payload;
            switch (type) {
                case 'mr-search-layout.init':
                    _this.searchService = payload.searchService;
                    _this.layoutState = payload.layoutState;
                    _this.modalService = payload.modalService;
                    _this.dataSource.onInit(payload);
                    // listeners
                    _this.initStateListener();
                    // scroll top
                    window.scrollTo(0, 0);
                    // reset scroll ref
                    _this.scrollRefElement = null;
                    break;
                case 'mr-search-layout.destroy':
                    _this.searchService.destroy();
                    _this.destroyed$.next(true);
                    break;
                case 'mr-search-layout.searchreset':
                    _this.searchService.reset();
                    break;
                default:
                    console.warn('unhandled inner event of type', type);
                    break;
            }
        });
        this.outerEvents$.subscribe(function (_a) {
            var type = _a.type, payload = _a.payload;
            switch (type) {
                case 'n7-smart-pagination.click':
                    _this.searchService.setState('input', 'page', payload.page);
                    break;
                case 'n7-smart-pagination.change':
                    _this.searchService.setState('input', 'limit', payload.value);
                    break;
                case 'mr-search-results-title.change':
                    _this.searchService.setState('input', 'sort', payload.value);
                    break;
                case 'mr-search-page-description.click':
                case 'mr-search-page-title.click':
                    _this.dataSource.toggleDescription();
                    break;
                case 'mr-search-tags.click': {
                    var stateValue = _this.searchState[payload.id];
                    var newValue = null;
                    if (Array.isArray(stateValue)) {
                        newValue = stateValue.filter(function (value) { return value !== payload.value; });
                    }
                    _this.searchService.setState('input', payload.id, newValue);
                    break;
                }
                case 'mr-search-results.openresourcemodal': {
                    var id = payload.id, resourceType = payload.type;
                    _this.modalService.open(id, resourceType);
                    break;
                }
                default:
                    break;
            }
        });
    };
    MrSearchLayoutEH.prototype.initStateListener = function () {
        var _this = this;
        var _a;
        // default params
        var pageConfig = this.dataSource.pageConfig;
        var defaultLimit = pageConfig.pagination.options[0];
        var defaultSort = (_a = pageConfig.sort.options.find(function (option) { return option.selected === true; })) === null || _a === void 0 ? void 0 : _a.value;
        if (!defaultSort) {
            defaultSort = pageConfig.sort.options[0].value;
        }
        // inputs listener
        this.searchService.getState$(INPUT_STATE_CONTEXT).pipe(filter(function (_a) {
            var lastUpdated = _a.lastUpdated;
            return _this.searchService.isQueryParamKey(lastUpdated);
        }), takeUntil(this.destroyed$)).subscribe(function (_a) {
            var lastUpdated = _a.lastUpdated, state = _a.state;
            _this.searchState = state;
            if (lastUpdated !== 'page') {
                _this.searchService.setState(INPUT_STATE_CONTEXT, 'page', 1);
            }
        });
        this.searchService.getState$(INPUT_STATE_CONTEXT, 'query').pipe(takeUntil(this.destroyed$)).subscribe(function (val) {
            _this.emitOuter('inputquerychange', val);
            _this.searchService.setState(INPUT_STATE_CONTEXT, 'sort', val ? '_score' : 'sort_ASC');
        });
        this.searchService.getState$(FACETS_REQUEST_STATE_CONTEXT, 'success').pipe(takeUntil(this.destroyed$)).subscribe(function (response) {
            _this.linksResponse = response;
            _this.dataSource.updateActiveFilters(_this.searchState, _this.linksResponse);
            // update sections
            if (response) {
                var facets_1 = response.facets;
                Object.keys(facets_1).forEach(function (inputKey) {
                    var totalCount = facets_1[inputKey].total_count;
                    _this.searchService.setState(SECTION_STATE_CONTEXT, "section-" + inputKey, totalCount ? 'is-not-empty' : 'is-empty');
                });
            }
        });
        this.searchService.getState$(RESULTS_REQUEST_STATE_CONTEXT, 'loading').pipe(takeUntil(this.destroyed$)).subscribe(function () {
            _this.layoutState.set('results', LayoutState.LOADING);
        });
        // results params hook
        this.searchService.setBeforeHook(RESULTS_REQUEST_STATE_CONTEXT, 'loading', function (params) {
            if (params === void 0) { params = {}; }
            var results = {
                sort: defaultSort,
                limit: defaultLimit,
                offset: 0
            };
            // sort check
            if (params.sort) {
                results.sort = params.sort;
            }
            // limit check
            if (params.limit) {
                results.limit = params.limit;
            }
            // offset check
            if (params.page && params.page > 1) {
                results.offset = results.limit * (params.page - 1);
            }
            params.results = results;
            // cleanup
            Object.keys(params)
                .filter(function (key) { return ['sort', 'page', 'limit'].includes(key); })
                .forEach(function (key) {
                delete params[key];
            });
            return params;
        });
        // facets params hook
        this.searchService.setBeforeHook(FACETS_REQUEST_STATE_CONTEXT, 'loading', function (params) {
            if (params === void 0) { params = {}; }
            // clean up
            delete params.results;
            return params;
        });
        this.searchService.getState$(RESULTS_REQUEST_STATE_CONTEXT, 'success')
            .subscribe(function (response) {
            _this.dataSource.handleResponse(response);
            // update layout state
            _this.layoutState.set('results', isEmpty(response.results) ? LayoutState.EMPTY : LayoutState.SUCCESS);
            // scroll to ref element
            if (!_this.scrollRefElement) {
                _this.scrollRefElement = document.querySelector('.scroll-ref');
            }
            else if (!helpers.isElementInViewport(_this.scrollRefElement)) {
                _this.scrollRefElement.scrollIntoView();
            }
        });
        this.searchService.getState$(RESULTS_REQUEST_STATE_CONTEXT, 'error')
            .subscribe(function (error) {
            console.warn(RESULTS_REQUEST_STATE_CONTEXT, error);
            _this.layoutState.set('results', LayoutState.ERROR);
        });
    };
    return MrSearchLayoutEH;
}(EventHandler));
export { MrSearchLayoutEH };
//# sourceMappingURL=data:application/json;base64,