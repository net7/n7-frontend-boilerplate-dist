var hasValue = function (value) {
    if (Array.isArray(value)) {
        return value.length > 0;
    }
    return !!value;
};
var ɵ0 = hasValue;
export default {
    stateToQueryParams: function (state, schemas) {
        var queryParams = {};
        Object.keys(state).forEach(function (key) {
            var schema = schemas[key];
            var multiple = schema.multiple, valueType = schema.valueType;
            var value = state[key];
            if (hasValue(value)) {
                switch (valueType) {
                    case 'number':
                    case 'string':
                        queryParams[key] = multiple ? value.join(',') : value;
                        break;
                    case 'boolean':
                        queryParams[key] = multiple ? value.map(function (v) { return +v; }).join(',') : +value;
                        break;
                    default:
                        break;
                }
            }
        });
        return queryParams;
    },
    queryParamsToState: function (queryParams, schemas) {
        var state = {};
        Object.keys(queryParams).forEach(function (key) {
            var value = queryParams[key];
            var schema = schemas[key];
            var multiple = schema.multiple, valueType = schema.valueType;
            if (hasValue(value)) {
                if (hasValue(value)) {
                    switch (valueType) {
                        // http://localhost:4200/maps?sort=sort_ASC&limit=12&authors=D%27Elia%5C%2C%20Pasquale&continents=Asia
                        case 'number':
                            state[key] = multiple ? value.split(',').map(function (v) { return +v; }) : +value;
                            break;
                        case 'string':
                            state[key] = multiple ? value.split(',').map(function (v) { return "" + v; }) : "" + value;
                            break;
                        case 'boolean':
                            state[key] = multiple ? value.split(',').map(function (v) { return !!v; }) : !!value;
                            break;
                        default:
                            break;
                    }
                }
            }
        });
        return state;
    }
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuNy1mcm9udGVuZC9ib2lsZXJwbGF0ZS8iLCJzb3VyY2VzIjpbImxpYi9tdXJ1Y2EvaGVscGVycy9zZWFyY2gtaGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLElBQU0sUUFBUSxHQUFHLFVBQUMsS0FBSztJQUNyQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDeEIsT0FBTyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztLQUN6QjtJQUNELE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUNqQixDQUFDLENBQUM7O0FBRUYsZUFBZTtJQUNiLGtCQUFrQixFQUFsQixVQUFtQixLQUFLLEVBQUUsT0FBdUM7UUFDL0QsSUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBRXZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBRztZQUM3QixJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDcEIsSUFBQSwwQkFBUSxFQUFFLDRCQUFTLENBQVk7WUFDdkMsSUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNuQixRQUFRLFNBQVMsRUFBRTtvQkFDakIsS0FBSyxRQUFRLENBQUM7b0JBQ2QsS0FBSyxRQUFRO3dCQUNYLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQzt3QkFDdEQsTUFBTTtvQkFFUixLQUFLLFNBQVM7d0JBQ1osV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxFQUFGLENBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7d0JBQ3RFLE1BQU07b0JBRVI7d0JBQ0UsTUFBTTtpQkFDVDthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBQ0Qsa0JBQWtCLEVBQWxCLFVBQW1CLFdBQVcsRUFBRSxPQUF1QztRQUNyRSxJQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7UUFFakIsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFHO1lBQ25DLElBQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMvQixJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDcEIsSUFBQSwwQkFBUSxFQUFFLDRCQUFTLENBQVk7WUFDdkMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ25CLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUNuQixRQUFRLFNBQVMsRUFBRTt3QkFDakIsc0dBQXNHO3dCQUN0RyxLQUFLLFFBQVE7NEJBQ1gsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsRUFBRixDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7NEJBQ2pFLE1BQU07d0JBRVIsS0FBSyxRQUFROzRCQUNYLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsS0FBRyxDQUFHLEVBQU4sQ0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsS0FBTyxDQUFDOzRCQUN6RSxNQUFNO3dCQUVSLEtBQUssU0FBUzs0QkFDWixLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxDQUFDLEVBQUgsQ0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7NEJBQ25FLE1BQU07d0JBRVI7NEJBQ0UsTUFBTTtxQkFDVDtpQkFDRjthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXRTY2hlbWEgfSBmcm9tICcuLi9pbnRlcmZhY2VzL3NlYXJjaC5pbnRlcmZhY2UnO1xuXG5jb25zdCBoYXNWYWx1ZSA9ICh2YWx1ZSkgPT4ge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubGVuZ3RoID4gMDtcbiAgfVxuICByZXR1cm4gISF2YWx1ZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3RhdGVUb1F1ZXJ5UGFyYW1zKHN0YXRlLCBzY2hlbWFzOiB7IFtrZXk6IHN0cmluZ106IElucHV0U2NoZW1hIH0pIHtcbiAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHt9O1xuXG4gICAgT2JqZWN0LmtleXMoc3RhdGUpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgY29uc3Qgc2NoZW1hID0gc2NoZW1hc1trZXldO1xuICAgICAgY29uc3QgeyBtdWx0aXBsZSwgdmFsdWVUeXBlIH0gPSBzY2hlbWE7XG4gICAgICBjb25zdCB2YWx1ZSA9IHN0YXRlW2tleV07XG4gICAgICBpZiAoaGFzVmFsdWUodmFsdWUpKSB7XG4gICAgICAgIHN3aXRjaCAodmFsdWVUeXBlKSB7XG4gICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgcXVlcnlQYXJhbXNba2V5XSA9IG11bHRpcGxlID8gdmFsdWUuam9pbignLCcpIDogdmFsdWU7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICAgICAgcXVlcnlQYXJhbXNba2V5XSA9IG11bHRpcGxlID8gdmFsdWUubWFwKCh2KSA9PiArdikuam9pbignLCcpIDogK3ZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcXVlcnlQYXJhbXM7XG4gIH0sXG4gIHF1ZXJ5UGFyYW1zVG9TdGF0ZShxdWVyeVBhcmFtcywgc2NoZW1hczogeyBba2V5OiBzdHJpbmddOiBJbnB1dFNjaGVtYSB9KSB7XG4gICAgY29uc3Qgc3RhdGUgPSB7fTtcblxuICAgIE9iamVjdC5rZXlzKHF1ZXJ5UGFyYW1zKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gcXVlcnlQYXJhbXNba2V5XTtcbiAgICAgIGNvbnN0IHNjaGVtYSA9IHNjaGVtYXNba2V5XTtcbiAgICAgIGNvbnN0IHsgbXVsdGlwbGUsIHZhbHVlVHlwZSB9ID0gc2NoZW1hO1xuICAgICAgaWYgKGhhc1ZhbHVlKHZhbHVlKSkge1xuICAgICAgICBpZiAoaGFzVmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgc3dpdGNoICh2YWx1ZVR5cGUpIHtcbiAgICAgICAgICAgIC8vIGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMC9tYXBzP3NvcnQ9c29ydF9BU0MmbGltaXQ9MTImYXV0aG9ycz1EJTI3RWxpYSU1QyUyQyUyMFBhc3F1YWxlJmNvbnRpbmVudHM9QXNpYVxuICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgICAgc3RhdGVba2V5XSA9IG11bHRpcGxlID8gdmFsdWUuc3BsaXQoJywnKS5tYXAoKHYpID0+ICt2KSA6ICt2YWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgIHN0YXRlW2tleV0gPSBtdWx0aXBsZSA/IHZhbHVlLnNwbGl0KCcsJykubWFwKCh2KSA9PiBgJHt2fWApIDogYCR7dmFsdWV9YDtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICAgICAgICBzdGF0ZVtrZXldID0gbXVsdGlwbGUgPyB2YWx1ZS5zcGxpdCgnLCcpLm1hcCgodikgPT4gISF2KSA6ICEhdmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG4iXX0=