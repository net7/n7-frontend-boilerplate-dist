import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
export var LayoutState;
(function (LayoutState) {
    LayoutState["IDLE"] = "IDLE";
    LayoutState["LOADING"] = "LOADING";
    LayoutState["SUCCESS"] = "SUCCESS";
    LayoutState["EMPTY"] = "EMPTY";
    LayoutState["ERROR"] = "ERROR";
})(LayoutState || (LayoutState = {}));
var MrLayoutStateService = /** @class */ (function () {
    function MrLayoutStateService() {
        this.stateContainers = {};
    }
    MrLayoutStateService.prototype.add = function (id) {
        var _this = this;
        var ids = Array.isArray(id) ? id : [id];
        ids.forEach(function (key) {
            if (_this.stateContainers[key]) {
                throw Error("Layout state id '" + key + "' already exists");
            }
            _this.stateContainers[key] = new Subject();
            // initial state
            _this.stateContainers[key].next(LayoutState.IDLE);
        });
    };
    MrLayoutStateService.prototype.get$ = function (id) {
        if (!this.stateContainers[id]) {
            throw Error("Layout state id '" + id + "' does not exists");
        }
        return this.stateContainers[id];
    };
    MrLayoutStateService.prototype.set = function (id, newState) {
        if (!this.stateContainers[id]) {
            throw Error("Layout state id '" + id + "' does not exists");
        }
        this.stateContainers[id].next(newState);
    };
    MrLayoutStateService = __decorate([
        Injectable()
    ], MrLayoutStateService);
    return MrLayoutStateService;
}());
export { MrLayoutStateService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LXN0YXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbjctZnJvbnRlbmQvYm9pbGVycGxhdGUvIiwic291cmNlcyI6WyJsaWIvbXVydWNhL3NlcnZpY2VzL2xheW91dC1zdGF0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsTUFBTSxDQUFOLElBQVksV0FNWDtBQU5ELFdBQVksV0FBVztJQUNyQiw0QkFBYSxDQUFBO0lBQ2Isa0NBQW1CLENBQUE7SUFDbkIsa0NBQW1CLENBQUE7SUFDbkIsOEJBQWUsQ0FBQTtJQUNmLDhCQUFlLENBQUE7QUFDakIsQ0FBQyxFQU5XLFdBQVcsS0FBWCxXQUFXLFFBTXRCO0FBR0Q7SUFBQTtRQUNVLG9CQUFlLEdBRW5CLEVBQUUsQ0FBQztJQTJCVCxDQUFDO0lBekJDLGtDQUFHLEdBQUgsVUFBSSxFQUFxQjtRQUF6QixpQkFVQztRQVRDLElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMxQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBRztZQUNkLElBQUksS0FBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDN0IsTUFBTSxLQUFLLENBQUMsc0JBQW9CLEdBQUcscUJBQWtCLENBQUMsQ0FBQzthQUN4RDtZQUNELEtBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUMxQyxnQkFBZ0I7WUFDaEIsS0FBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELG1DQUFJLEdBQUosVUFBSyxFQUFVO1FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDN0IsTUFBTSxLQUFLLENBQUMsc0JBQW9CLEVBQUUsc0JBQW1CLENBQUMsQ0FBQztTQUN4RDtRQUNELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsa0NBQUcsR0FBSCxVQUFJLEVBQVUsRUFBRSxRQUFxQjtRQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUM3QixNQUFNLEtBQUssQ0FBQyxzQkFBb0IsRUFBRSxzQkFBbUIsQ0FBQyxDQUFDO1NBQ3hEO1FBQ0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQTdCVSxvQkFBb0I7UUFEaEMsVUFBVSxFQUFFO09BQ0Esb0JBQW9CLENBOEJoQztJQUFELDJCQUFDO0NBQUEsQUE5QkQsSUE4QkM7U0E5Qlksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgZW51bSBMYXlvdXRTdGF0ZSB7XG4gIElETEUgPSAnSURMRScsXG4gIExPQURJTkcgPSAnTE9BRElORycsXG4gIFNVQ0NFU1MgPSAnU1VDQ0VTUycsXG4gIEVNUFRZID0gJ0VNUFRZJyxcbiAgRVJST1IgPSAnRVJST1InLFxufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTXJMYXlvdXRTdGF0ZVNlcnZpY2Uge1xuICBwcml2YXRlIHN0YXRlQ29udGFpbmVyczoge1xuICAgIFtrZXk6IHN0cmluZ106IFN1YmplY3Q8TGF5b3V0U3RhdGU+O1xuICB9ID0ge307XG5cbiAgYWRkKGlkOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIGNvbnN0IGlkcyA9IEFycmF5LmlzQXJyYXkoaWQpID8gaWQgOiBbaWRdO1xuICAgIGlkcy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmICh0aGlzLnN0YXRlQ29udGFpbmVyc1trZXldKSB7XG4gICAgICAgIHRocm93IEVycm9yKGBMYXlvdXQgc3RhdGUgaWQgJyR7a2V5fScgYWxyZWFkeSBleGlzdHNgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhdGVDb250YWluZXJzW2tleV0gPSBuZXcgU3ViamVjdCgpO1xuICAgICAgLy8gaW5pdGlhbCBzdGF0ZVxuICAgICAgdGhpcy5zdGF0ZUNvbnRhaW5lcnNba2V5XS5uZXh0KExheW91dFN0YXRlLklETEUpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0JChpZDogc3RyaW5nKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlQ29udGFpbmVyc1tpZF0pIHtcbiAgICAgIHRocm93IEVycm9yKGBMYXlvdXQgc3RhdGUgaWQgJyR7aWR9JyBkb2VzIG5vdCBleGlzdHNgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVDb250YWluZXJzW2lkXTtcbiAgfVxuXG4gIHNldChpZDogc3RyaW5nLCBuZXdTdGF0ZTogTGF5b3V0U3RhdGUpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGVDb250YWluZXJzW2lkXSkge1xuICAgICAgdGhyb3cgRXJyb3IoYExheW91dCBzdGF0ZSBpZCAnJHtpZH0nIGRvZXMgbm90IGV4aXN0c2ApO1xuICAgIH1cbiAgICB0aGlzLnN0YXRlQ29udGFpbmVyc1tpZF0ubmV4dChuZXdTdGF0ZSk7XG4gIH1cbn1cbiJdfQ==