import { __assign, __extends } from "tslib";
import { DataSource } from '@n7-frontend/core';
var MOBILE_CLASS = 'is-mobile-nav-displayed';
var ACTIVE_CLASS = 'is-active';
var HeaderDS = /** @class */ (function (_super) {
    __extends(HeaderDS, _super);
    function HeaderDS() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeaderDS.prototype.transform = function (data) {
        if (!data) {
            return null;
        }
        return __assign(__assign({}, data), { menuToggle: {
                open: {
                    payload: 'mobile-open'
                },
                close: {
                    payload: 'mobile-close'
                }
            } });
    };
    HeaderDS.prototype.onCurrentNavChange = function (payload) {
        var _this = this;
        this.output.nav.items.forEach(function (item) {
            _this.updateItemClass(item, payload);
            if (item.subnav) {
                item.subnav.forEach(function (subNavItem) {
                    _this.updateItemClass(subNavItem, payload);
                });
            }
        });
    };
    HeaderDS.prototype.onRouterChange = function () {
        if (!this.output) {
            return;
        }
        var classes = this.output.classes;
        classes = classes || '';
        classes = classes.split(' ');
        if (classes.includes(MOBILE_CLASS)) {
            classes.splice(classes.indexOf(MOBILE_CLASS), 1);
            this.output.classes = classes.join(' ');
        }
    };
    HeaderDS.prototype.onClick = function (payload) {
        // mobile control
        if (['mobile-open', 'mobile-close'].includes(payload)) {
            var classes = this.output.classes;
            classes = classes || '';
            classes = classes.split(' ');
            if (classes.includes(MOBILE_CLASS)) {
                classes.splice(classes.indexOf(MOBILE_CLASS), 1);
            }
            else {
                classes.push(MOBILE_CLASS);
            }
            this.output.classes = classes.join(' ');
        }
    };
    HeaderDS.prototype.updateItemClass = function (item, payload) {
        var itemClasses = [];
        if (item.classes) {
            itemClasses = itemClasses.concat(item.classes.split(' '));
        }
        if (item._meta.id === payload && !itemClasses.includes(ACTIVE_CLASS)) {
            itemClasses.push(ACTIVE_CLASS);
        }
        else if (itemClasses.includes(ACTIVE_CLASS)) {
            itemClasses.splice(itemClasses.indexOf(ACTIVE_CLASS, 1));
        }
        item.classes = itemClasses.join(' ');
    };
    return HeaderDS;
}(DataSource));
export { HeaderDS };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLmRzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG43LWZyb250ZW5kL2JvaWxlcnBsYXRlLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi9kYXRhLXNvdXJjZXMvaGVhZGVyLmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHL0MsSUFBTSxZQUFZLEdBQUcseUJBQXlCLENBQUM7QUFFL0MsSUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDO0FBRWpDO0lBQThCLDRCQUFVO0lBQXhDOztJQXdFQSxDQUFDO0lBdkVXLDRCQUFTLEdBQW5CLFVBQW9CLElBQUk7UUFDdEIsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCw2QkFDSyxJQUFJLEtBQ1AsVUFBVSxFQUFFO2dCQUNWLElBQUksRUFBRTtvQkFDSixPQUFPLEVBQUUsYUFBYTtpQkFDdkI7Z0JBQ0QsS0FBSyxFQUFFO29CQUNMLE9BQU8sRUFBRSxjQUFjO2lCQUN4QjthQUNGLElBQ0Q7SUFDSixDQUFDO0lBRU0scUNBQWtCLEdBQXpCLFVBQTBCLE9BQU87UUFBakMsaUJBU0M7UUFSQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBSTtZQUNqQyxLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNwQyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQyxVQUFVO29CQUM3QixLQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDNUMsQ0FBQyxDQUFDLENBQUM7YUFDSjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLGlDQUFjLEdBQXJCO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsT0FBTztTQUNSO1FBQ0ssSUFBQSw2QkFBTyxDQUFpQjtRQUM5QixPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUN4QixPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU3QixJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDbEMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2pELElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDekM7SUFDSCxDQUFDO0lBRU0sMEJBQU8sR0FBZCxVQUFlLE9BQU87UUFDcEIsaUJBQWlCO1FBQ2pCLElBQUksQ0FBQyxhQUFhLEVBQUUsY0FBYyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQy9DLElBQUEsNkJBQU8sQ0FBaUI7WUFDOUIsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7WUFDeEIsT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFN0IsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFO2dCQUNsQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDbEQ7aUJBQU07Z0JBQ0wsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUM1QjtZQUNELElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDekM7SUFDSCxDQUFDO0lBRU8sa0NBQWUsR0FBdkIsVUFBd0IsSUFBSSxFQUFFLE9BQU87UUFDbkMsSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixXQUFXLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzNEO1FBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ3BFLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDaEM7YUFBTSxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDN0MsV0FBVyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFEO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDSCxlQUFDO0FBQUQsQ0FBQyxBQXhFRCxDQUE4QixVQUFVLEdBd0V2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFTb3VyY2UgfSBmcm9tICdAbjctZnJvbnRlbmQvY29yZSc7XHJcbmltcG9ydCB7IEhlYWRlckRhdGEgfSBmcm9tICdAbjctZnJvbnRlbmQvY29tcG9uZW50cyc7XHJcblxyXG5jb25zdCBNT0JJTEVfQ0xBU1MgPSAnaXMtbW9iaWxlLW5hdi1kaXNwbGF5ZWQnO1xyXG5cclxuY29uc3QgQUNUSVZFX0NMQVNTID0gJ2lzLWFjdGl2ZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgSGVhZGVyRFMgZXh0ZW5kcyBEYXRhU291cmNlIHtcclxuICBwcm90ZWN0ZWQgdHJhbnNmb3JtKGRhdGEpOiBIZWFkZXJEYXRhIHtcclxuICAgIGlmICghZGF0YSkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi5kYXRhLFxyXG4gICAgICBtZW51VG9nZ2xlOiB7XHJcbiAgICAgICAgb3Blbjoge1xyXG4gICAgICAgICAgcGF5bG9hZDogJ21vYmlsZS1vcGVuJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2xvc2U6IHtcclxuICAgICAgICAgIHBheWxvYWQ6ICdtb2JpbGUtY2xvc2UnXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG9uQ3VycmVudE5hdkNoYW5nZShwYXlsb2FkKSB7XHJcbiAgICB0aGlzLm91dHB1dC5uYXYuaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICB0aGlzLnVwZGF0ZUl0ZW1DbGFzcyhpdGVtLCBwYXlsb2FkKTtcclxuICAgICAgaWYgKGl0ZW0uc3VibmF2KSB7XHJcbiAgICAgICAgaXRlbS5zdWJuYXYuZm9yRWFjaCgoc3ViTmF2SXRlbSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy51cGRhdGVJdGVtQ2xhc3Moc3ViTmF2SXRlbSwgcGF5bG9hZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG9uUm91dGVyQ2hhbmdlKCkge1xyXG4gICAgaWYgKCF0aGlzLm91dHB1dCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgeyBjbGFzc2VzIH0gPSB0aGlzLm91dHB1dDtcclxuICAgIGNsYXNzZXMgPSBjbGFzc2VzIHx8ICcnO1xyXG4gICAgY2xhc3NlcyA9IGNsYXNzZXMuc3BsaXQoJyAnKTtcclxuXHJcbiAgICBpZiAoY2xhc3Nlcy5pbmNsdWRlcyhNT0JJTEVfQ0xBU1MpKSB7XHJcbiAgICAgIGNsYXNzZXMuc3BsaWNlKGNsYXNzZXMuaW5kZXhPZihNT0JJTEVfQ0xBU1MpLCAxKTtcclxuICAgICAgdGhpcy5vdXRwdXQuY2xhc3NlcyA9IGNsYXNzZXMuam9pbignICcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIG9uQ2xpY2socGF5bG9hZCkge1xyXG4gICAgLy8gbW9iaWxlIGNvbnRyb2xcclxuICAgIGlmIChbJ21vYmlsZS1vcGVuJywgJ21vYmlsZS1jbG9zZSddLmluY2x1ZGVzKHBheWxvYWQpKSB7XHJcbiAgICAgIGxldCB7IGNsYXNzZXMgfSA9IHRoaXMub3V0cHV0O1xyXG4gICAgICBjbGFzc2VzID0gY2xhc3NlcyB8fCAnJztcclxuICAgICAgY2xhc3NlcyA9IGNsYXNzZXMuc3BsaXQoJyAnKTtcclxuXHJcbiAgICAgIGlmIChjbGFzc2VzLmluY2x1ZGVzKE1PQklMRV9DTEFTUykpIHtcclxuICAgICAgICBjbGFzc2VzLnNwbGljZShjbGFzc2VzLmluZGV4T2YoTU9CSUxFX0NMQVNTKSwgMSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2xhc3Nlcy5wdXNoKE1PQklMRV9DTEFTUyk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5vdXRwdXQuY2xhc3NlcyA9IGNsYXNzZXMuam9pbignICcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVJdGVtQ2xhc3MoaXRlbSwgcGF5bG9hZCkge1xyXG4gICAgbGV0IGl0ZW1DbGFzc2VzID0gW107XHJcbiAgICBpZiAoaXRlbS5jbGFzc2VzKSB7XHJcbiAgICAgIGl0ZW1DbGFzc2VzID0gaXRlbUNsYXNzZXMuY29uY2F0KGl0ZW0uY2xhc3Nlcy5zcGxpdCgnICcpKTtcclxuICAgIH1cclxuICAgIGlmIChpdGVtLl9tZXRhLmlkID09PSBwYXlsb2FkICYmICFpdGVtQ2xhc3Nlcy5pbmNsdWRlcyhBQ1RJVkVfQ0xBU1MpKSB7XHJcbiAgICAgIGl0ZW1DbGFzc2VzLnB1c2goQUNUSVZFX0NMQVNTKTtcclxuICAgIH0gZWxzZSBpZiAoaXRlbUNsYXNzZXMuaW5jbHVkZXMoQUNUSVZFX0NMQVNTKSkge1xyXG4gICAgICBpdGVtQ2xhc3Nlcy5zcGxpY2UoaXRlbUNsYXNzZXMuaW5kZXhPZihBQ1RJVkVfQ0xBU1MsIDEpKTtcclxuICAgIH1cclxuICAgIGl0ZW0uY2xhc3NlcyA9IGl0ZW1DbGFzc2VzLmpvaW4oJyAnKTtcclxuICB9XHJcbn1cclxuIl19