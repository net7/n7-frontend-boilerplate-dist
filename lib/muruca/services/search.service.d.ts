import { ActivatedRoute, Router } from '@angular/router';
import { Subject } from 'rxjs';
import { CommunicationService } from '../../common/services/communication.service';
import * as i0 from "@angular/core";
export declare const INPUT_STATE_CONTEXT = "input";
export declare const FACET_STATE_CONTEXT = "facet";
export declare const SECTION_STATE_CONTEXT = "section";
export declare const RESULTS_REQUEST_STATE_CONTEXT = "resultsRequest";
export declare const FACETS_REQUEST_STATE_CONTEXT = "facetsRequest";
export declare class MrSearchService {
    private router;
    private activatedRoute;
    private communication;
    private destroyed$;
    private searchId;
    private config;
    private queryParamKeys;
    private initializeKeys;
    private initializeValues;
    private inputSchemas;
    private contextState;
    private internalFilterKeys;
    private internalFilterState;
    private state$;
    private beforeHook;
    constructor(router: Router, activatedRoute: ActivatedRoute, communication: CommunicationService);
    init(searchId: any, config: any): void;
    getConfig: () => any;
    getState$(context: string, id?: string): Subject<any>;
    addStateContext(context: string): void;
    addState(context: string, id: string): void;
    setState(context: string, id: string, newValue: any): void;
    setBeforeHook(context: string, id: string, hook: any): void;
    reset(): void;
    destroy(): void;
    private clear;
    private setContextState;
    private initInputState;
    private initFacetState;
    private initSectionState;
    private onRouteChange;
    private onInputsChange;
    private onInternalInputsChange;
    private doSingleFacetRequest;
    private onResultsLoading;
    private onFacetsRequestSuccess;
    private onFacetsScroll;
    isQueryParamKey: (input: any) => boolean;
    notEquals(val1: any, val2: any): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<MrSearchService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MrSearchService>;
}
