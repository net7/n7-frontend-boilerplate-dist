import { LayoutDataSource } from '@n7-frontend/core';
export declare class AwHomeLayoutDS extends LayoutDataSource {
    private communication;
    private mainState;
    private tippy;
    private configuration;
    private facetData;
    private lockedFacets;
    private lockLastFacet;
    private facetInputs;
    private allBubbles;
    private autocompletePopover;
    private autocompletePopoverOpen;
    private autocompleteChanged$;
    selectedBubbles: any[];
    numOfItemsStr: string;
    private _bubbleChart;
    private maxBubblesSelectable;
    private entityBubbleIdMap;
    private lastWindowWidth;
    private bubblePopup;
    currentHoverEntity: any;
    hasScrollBackground: boolean;
    loadingBubbles: boolean;
    bubblesEnabled: boolean;
    resultsLimit: number;
    selectedEntitiesIds: any[];
    outerLinks: any;
    outerLinksTitle: string;
    homeAutocompleteQuery: string;
    onInit({ communication, mainState, configuration, tippy }: {
        communication: any;
        mainState: any;
        configuration: any;
        tippy: any;
    }): void;
    makeRequest$(query: any, params: any): any;
    updateComponent: (id: any, data: any, options?: any) => void;
    initialFilterRequest(): any;
    parseInitialRequest(response: any): void;
    renderPreviewsFromApolloQuery(response: any): void;
    onBubbleTooltipClick(source: string, payload: any): void;
    onBubbleSelected(bubble: any): boolean;
    onBubbleDeselected(payload: any): any;
    getBubblePayload(response: any): {
        reset: boolean;
        setBubbleChart: (bubbleCref: any) => any;
        facetData: any[];
        source: any;
        selectedBubbles: any[];
    };
    private filterRequest;
    updateBubbles(response: any, onlyBubbles?: boolean): void;
    updateBubbleFilter(data: any): void;
    updateTags(onlyBubbles?: boolean): void;
    filterBubblesBasedOnFacetsEnabled(): any[];
    handleFacetSearchChange(change: any): void;
    handleFacetSearchEnter(enter: any): void;
    handleFacetHeaderClick(facetId: any): void;
    renderItemTags(): void;
    onTagClicked(payload: any): any;
    onHeroChange(value: any): void;
    private _scrollBackgroundControl;
    private _setHasScrollBackground;
    private _listenAutoCompleteChanges;
    private _toggleAutocompletePopover;
}
