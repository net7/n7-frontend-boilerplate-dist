import { Subject, merge, fromEvent } from 'rxjs';
import { debounceTime, switchMap, mapTo } from 'rxjs/operators';
// import { isEmpty } from 'lodash';
const ENTITY_LINKS_CLASS = 'entity-links';
const ENTITY_LINKS_PARENT_SELECTOR = '.n7-facets-wrapper__group:last-child .n7-facet__section-input-links';
const loaderItem = {
    counter: null,
    label: 'Loading...',
    searchData: [],
    value: '__loading__',
};
export default {
    paginationState: {},
    paginate$: new Subject(),
    listenToChanges(dataSource) {
        const facetsWrapperEH = dataSource.getWidgetEventHandler('facets-wrapper');
        return merge(facetsWrapperEH.internalFacetsChange$.pipe(mapTo(null)), this.paginate$).pipe(debounceTime(500), switchMap((pagination) => {
            const requestParams = dataSource.searchModel.getRequestParams();
            const internalFilters = dataSource.searchModel.getInternalFilters();
            this.paginationState.offset = pagination ? this.paginationState.offset : 0;
            this.updateParamsOffset(requestParams);
            const filters = [...requestParams.filters, ...internalFilters];
            const params = {
                searchParameters: Object.assign(Object.assign({ totalCount: 100, gallery: !!(dataSource.searchModel.getId() === 'aw-gallery-layout') }, requestParams), { filters }),
            };
            // initial loader
            if (this.paginationState.offset === 0) {
                this.addInitialLoader(dataSource);
            }
            return dataSource.getFacetsReq$(params);
        }));
    },
    onFacetsResponse(searchModel, facets) {
        // pagination control
        const entityLinksFacet = facets.find(({ id }) => id === ENTITY_LINKS_CLASS);
        const { totalCount } = entityLinksFacet;
        let { limit, offset } = this.paginationState;
        if (typeof limit === 'undefined') {
            limit = 10;
        }
        if (typeof offset === 'undefined') {
            offset = 0;
        }
        this.paginationState.totalCount = totalCount;
        if (offset > 0) {
            const entityLinksInput = searchModel.getInputByFacetId(ENTITY_LINKS_CLASS);
            const oldData = entityLinksInput.getData() || [];
            // remove fake loading element
            if (oldData.length) {
                oldData.pop();
            }
            const newData = oldData.concat(entityLinksFacet.data);
            entityLinksFacet.data = newData;
        }
        if (this.paginationState.totalCount > (limit + offset)) {
            entityLinksFacet.data.push(loaderItem);
        }
        // empty state
        const entityLinksInput = searchModel.getInputByFacetId(ENTITY_LINKS_CLASS);
        entityLinksInput.setIsEmpty(!totalCount);
        // fix scroll
        if (offset === 0) {
            const scrollEl = document.querySelector(ENTITY_LINKS_PARENT_SELECTOR);
            if (scrollEl) {
                scrollEl.scrollTop = 0;
            }
        }
        // update loading state
        this.paginationState.loading = false;
    },
    initPagination(searchModel) {
        searchModel.getFilters().filter((filter) => (filter.pagination)).forEach(({ pagination }) => {
            this.paginationState = Object.assign(Object.assign(Object.assign({}, pagination), this.paginationState), { loading: false });
        });
        setTimeout(() => {
            const scrollEl = document.querySelector(ENTITY_LINKS_PARENT_SELECTOR);
            const scroll$ = fromEvent(scrollEl, 'scroll');
            scroll$.pipe(debounceTime(300)).subscribe(({ target }) => {
                const { scrollTop, clientHeight, scrollHeight } = target;
                const { offset, limit, totalCount, loading } = this.paginationState;
                const margin = 150;
                if ((scrollTop + clientHeight >= scrollHeight - margin)
                    && (offset + limit < totalCount)
                    && loading === false) {
                    this.paginationState.loading = true;
                    this.paginationState.offset = offset + limit;
                    this.paginate$.next(this.paginationState);
                }
            });
        });
    },
    /* clearInternalFilters(searchModel) {
      const searchFilter = searchModel.getFiltersByFacetId('entity-search')[0];
      const typesFilter = searchModel.getFiltersByFacetId('entity-types')[0];
      if (!isEmpty(searchFilter.value) || !isEmpty(typesFilter.value)) {
        searchFilter.value = '';
        typesFilter.value = [];
        searchModel.updateInputsFromFilters();
      }
    }, */
    updateParamsOffset(params) {
        const entityLinksFilter = params.filters
            .find(({ facetId }) => facetId === ENTITY_LINKS_CLASS);
        if (entityLinksFilter) {
            entityLinksFilter.pagination.offset = this.paginationState.offset;
        }
    },
    resetOffset() {
        this.paginationState.offset = 0;
    },
    addInitialLoader(dataSource) {
        dataSource.searchModel.setInputData(ENTITY_LINKS_CLASS, [loaderItem]);
        const facetsWrapperDS = dataSource.getWidgetDataSource('facets-wrapper');
        facetsWrapperDS.updateInputLinks();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWxpbmtzLmhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuNy1mcm9udGVuZC9ib2lsZXJwbGF0ZS8iLCJzb3VyY2VzIjpbImxpYi9hcmlhbm5hLXdlYi9zZWFyY2gvZW50aXR5LWxpbmtzLmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakQsT0FBTyxFQUNMLFlBQVksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUMvQixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLG9DQUFvQztBQUVwQyxNQUFNLGtCQUFrQixHQUFHLGNBQWMsQ0FBQztBQUMxQyxNQUFNLDRCQUE0QixHQUFHLHFFQUFxRSxDQUFDO0FBRTNHLE1BQU0sVUFBVSxHQUFHO0lBQ2pCLE9BQU8sRUFBRSxJQUFJO0lBQ2IsS0FBSyxFQUFFLFlBQVk7SUFDbkIsVUFBVSxFQUFFLEVBQUU7SUFDZCxLQUFLLEVBQUUsYUFBYTtDQUNyQixDQUFDO0FBRUYsZUFBZTtJQUNiLGVBQWUsRUFBRSxFQUFTO0lBQzFCLFNBQVMsRUFBRSxJQUFJLE9BQU8sRUFBRTtJQUN4QixlQUFlLENBQUMsVUFBVTtRQUN4QixNQUFNLGVBQWUsR0FBRyxVQUFVLENBQUMscUJBQXFCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUMzRSxPQUFPLEtBQUssQ0FDVixlQUFlLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUN2RCxJQUFJLENBQUMsU0FBUyxDQUNmLENBQUMsSUFBSSxDQUNKLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFDakIsU0FBUyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDdkIsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ2hFLE1BQU0sZUFBZSxHQUFHLFVBQVUsQ0FBQyxX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QUFPLEdBQUcsSUFBSSxDQUFDO29CQUNwQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sR0FBRyxNQUFNLEdBQUcsS0FBSyxDQUFDO29CQUM3QyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7aUJBQzNDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDRDs7Ozs7Ozs7U0FRSztJQUNMLGtCQUFrQixDQUFDLE1BQU07UUFDdkIsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLENBQUMsT0FBTzthQUNyQyxJQUFJLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxPQUFPLEtBQUssa0JBQWtCLENBQUMsQ0FBQztRQUV6RCxJQUFJLGlCQUFpQixFQUFFO1lBQ3JCLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUM7U0FDbkU7SUFDSCxDQUFDO0lBQ0QsV0FBVztRQUNULElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQ0QsZ0JBQWdCLENBQUMsVUFBVTtRQUN6QixVQUFVLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDdEUsTUFBTSxlQUFlLEdBQUcsVUFBVSxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDekUsZUFBZSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDckMsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdWJqZWN0LCBtZXJnZSwgZnJvbUV2ZW50IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7XHJcbiAgZGVib3VuY2VUaW1lLCBzd2l0Y2hNYXAsIG1hcFRvXHJcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG4vLyBpbXBvcnQgeyBpc0VtcHR5IH0gZnJvbSAnbG9kYXNoJztcclxuXHJcbmNvbnN0IEVOVElUWV9MSU5LU19DTEFTUyA9ICdlbnRpdHktbGlua3MnO1xyXG5jb25zdCBFTlRJVFlfTElOS1NfUEFSRU5UX1NFTEVDVE9SID0gJy5uNy1mYWNldHMtd3JhcHBlcl9fZ3JvdXA6bGFzdC1jaGlsZCAubjctZmFjZXRfX3NlY3Rpb24taW5wdXQtbGlua3MnO1xyXG5cclxuY29uc3QgbG9hZGVySXRlbSA9IHtcclxuICBjb3VudGVyOiBudWxsLFxyXG4gIGxhYmVsOiAnTG9hZGluZy4uLicsXHJcbiAgc2VhcmNoRGF0YTogW10sXHJcbiAgdmFsdWU6ICdfX2xvYWRpbmdfXycsXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgcGFnaW5hdGlvblN0YXRlOiB7fSBhcyBhbnksXHJcbiAgcGFnaW5hdGUkOiBuZXcgU3ViamVjdCgpLFxyXG4gIGxpc3RlblRvQ2hhbmdlcyhkYXRhU291cmNlKSB7XHJcbiAgICBjb25zdCBmYWNldHNXcmFwcGVyRUggPSBkYXRhU291cmNlLmdldFdpZGdldEV2ZW50SGFuZGxlcignZmFjZXRzLXdyYXBwZXInKTtcclxuICAgIHJldHVybiBtZXJnZShcclxuICAgICAgZmFjZXRzV3JhcHBlckVILmludGVybmFsRmFjZXRzQ2hhbmdlJC5waXBlKG1hcFRvKG51bGwpKSxcclxuICAgICAgdGhpcy5wYWdpbmF0ZSQsXHJcbiAgICApLnBpcGUoXHJcbiAgICAgIGRlYm91bmNlVGltZSg1MDApLFxyXG4gICAgICBzd2l0Y2hNYXAoKHBhZ2luYXRpb24pID0+IHtcclxuICAgICAgICBjb25zdCByZXF1ZXN0UGFyYW1zID0gZGF0YVNvdXJjZS5zZWFyY2hNb2RlbC5nZXRSZXF1ZXN0UGFyYW1zKCk7XHJcbiAgICAgICAgY29uc3QgaW50ZXJuYWxGaWx0ZXJzID0gZGF0YVNvdXJjZS5zZWFyY2hNb2RlbC5nZXRJbnRlcm5hbEZpbHRlcnMoKTtcclxuICAgICAgICB0aGlzLnBhZ2luYXRpb25TdGF0ZS5vZmZzZXQgPSBwYWdpbmF0aW9uID8gdGhpcy5wYWdpbmF0aW9uU3RhdGUub2Zmc2V0IDogMDtcclxuICAgICAgICB0aGlzLnVwZGF0ZVBhcmFtc09mZnNldChyZXF1ZXN0UGFyYW1zKTtcclxuICAgICAgICBjb25zdCBmaWx0ZXJzID0gWy4uLnJlcXVlc3RQYXJhbXMuZmlsdGVycywgLi4uaW50ZXJuYWxGaWx0ZXJzXTtcclxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XHJcbiAgICAgICAgICBzZWFyY2hQYXJhbWV0ZXJzOiB7XHJcbiAgICAgICAgICAgIHRvdGFsQ291bnQ6IDEwMCxcclxuICAgICAgICAgICAgZ2FsbGVyeTogISEoZGF0YVNvdXJjZS5zZWFyY2hNb2RlbC5nZXRJZCgpID09PSAnYXctZ2FsbGVyeS1sYXlvdXQnKSxcclxuICAgICAgICAgICAgLi4ucmVxdWVzdFBhcmFtcyxcclxuICAgICAgICAgICAgZmlsdGVyc1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBpbml0aWFsIGxvYWRlclxyXG4gICAgICAgIGlmICh0aGlzLnBhZ2luYXRpb25TdGF0ZS5vZmZzZXQgPT09IDApIHtcclxuICAgICAgICAgIHRoaXMuYWRkSW5pdGlhbExvYWRlcihkYXRhU291cmNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBkYXRhU291cmNlLmdldEZhY2V0c1JlcSQocGFyYW1zKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfSxcclxuICBvbkZhY2V0c1Jlc3BvbnNlKHNlYXJjaE1vZGVsLCBmYWNldHMpIHtcclxuICAgIC8vIHBhZ2luYXRpb24gY29udHJvbFxyXG4gICAgY29uc3QgZW50aXR5TGlua3NGYWNldCA9IGZhY2V0cy5maW5kKCh7IGlkIH0pID0+IGlkID09PSBFTlRJVFlfTElOS1NfQ0xBU1MpO1xyXG4gICAgY29uc3QgeyB0b3RhbENvdW50IH0gPSBlbnRpdHlMaW5rc0ZhY2V0O1xyXG4gICAgbGV0IHsgbGltaXQsIG9mZnNldCB9ID0gdGhpcy5wYWdpbmF0aW9uU3RhdGU7XHJcbiAgICBpZiAodHlwZW9mIGxpbWl0ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICBsaW1pdCA9IDEwO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIG9mZnNldCA9IDA7XHJcbiAgICB9XHJcbiAgICB0aGlzLnBhZ2luYXRpb25TdGF0ZS50b3RhbENvdW50ID0gdG90YWxDb3VudDtcclxuICAgIGlmIChvZmZzZXQgPiAwKSB7XHJcbiAgICAgIGNvbnN0IGVudGl0eUxpbmtzSW5wdXQgPSBzZWFyY2hNb2RlbC5nZXRJbnB1dEJ5RmFjZXRJZChFTlRJVFlfTElOS1NfQ0xBU1MpO1xyXG4gICAgICBjb25zdCBvbGREYXRhID0gZW50aXR5TGlua3NJbnB1dC5nZXREYXRhKCkgfHwgW107XHJcbiAgICAgIC8vIHJlbW92ZSBmYWtlIGxvYWRpbmcgZWxlbWVudFxyXG4gICAgICBpZiAob2xkRGF0YS5sZW5ndGgpIHtcclxuICAgICAgICBvbGREYXRhLnBvcCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IG5ld0RhdGEgPSBvbGREYXRhLmNvbmNhdChlbnRpdHlMaW5rc0ZhY2V0LmRhdGEpO1xyXG4gICAgICBlbnRpdHlMaW5rc0ZhY2V0LmRhdGEgPSBuZXdEYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLnBhZ2luYXRpb25TdGF0ZS50b3RhbENvdW50ID4gKGxpbWl0ICsgb2Zmc2V0KSkge1xyXG4gICAgICBlbnRpdHlMaW5rc0ZhY2V0LmRhdGEucHVzaChsb2FkZXJJdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBlbXB0eSBzdGF0ZVxyXG4gICAgY29uc3QgZW50aXR5TGlua3NJbnB1dCA9IHNlYXJjaE1vZGVsLmdldElucHV0QnlGYWNldElkKEVOVElUWV9MSU5LU19DTEFTUyk7XHJcbiAgICBlbnRpdHlMaW5rc0lucHV0LnNldElzRW1wdHkoIXRvdGFsQ291bnQpO1xyXG5cclxuICAgIC8vIGZpeCBzY3JvbGxcclxuICAgIGlmIChvZmZzZXQgPT09IDApIHtcclxuICAgICAgY29uc3Qgc2Nyb2xsRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKEVOVElUWV9MSU5LU19QQVJFTlRfU0VMRUNUT1IpO1xyXG4gICAgICBpZiAoc2Nyb2xsRWwpIHtcclxuICAgICAgICBzY3JvbGxFbC5zY3JvbGxUb3AgPSAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdXBkYXRlIGxvYWRpbmcgc3RhdGVcclxuICAgIHRoaXMucGFnaW5hdGlvblN0YXRlLmxvYWRpbmcgPSBmYWxzZTtcclxuICB9LFxyXG4gIGluaXRQYWdpbmF0aW9uKHNlYXJjaE1vZGVsKSB7XHJcbiAgICBzZWFyY2hNb2RlbC5nZXRGaWx0ZXJzKCkuZmlsdGVyKChmaWx0ZXIpID0+IChcclxuICAgICAgZmlsdGVyLnBhZ2luYXRpb25cclxuICAgICkpLmZvckVhY2goKHsgcGFnaW5hdGlvbiB9KSA9PiB7XHJcbiAgICAgIHRoaXMucGFnaW5hdGlvblN0YXRlID0ge1xyXG4gICAgICAgIC4uLnBhZ2luYXRpb24sXHJcbiAgICAgICAgLi4udGhpcy5wYWdpbmF0aW9uU3RhdGUsXHJcbiAgICAgICAgbG9hZGluZzogZmFsc2VcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNjcm9sbEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihFTlRJVFlfTElOS1NfUEFSRU5UX1NFTEVDVE9SKTtcclxuICAgICAgY29uc3Qgc2Nyb2xsJCA9IGZyb21FdmVudChzY3JvbGxFbCwgJ3Njcm9sbCcpO1xyXG4gICAgICBzY3JvbGwkLnBpcGUoXHJcbiAgICAgICAgZGVib3VuY2VUaW1lKDMwMClcclxuICAgICAgKS5zdWJzY3JpYmUoKHsgdGFyZ2V0IH0pID0+IHtcclxuICAgICAgICBjb25zdCB7IHNjcm9sbFRvcCwgY2xpZW50SGVpZ2h0LCBzY3JvbGxIZWlnaHQgfSA9IHRhcmdldCBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICBjb25zdCB7XHJcbiAgICAgICAgICBvZmZzZXQsIGxpbWl0LCB0b3RhbENvdW50LCBsb2FkaW5nXHJcbiAgICAgICAgfSA9IHRoaXMucGFnaW5hdGlvblN0YXRlO1xyXG4gICAgICAgIGNvbnN0IG1hcmdpbiA9IDE1MDtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAoc2Nyb2xsVG9wICsgY2xpZW50SGVpZ2h0ID49IHNjcm9sbEhlaWdodCAtIG1hcmdpbilcclxuICAgICAgICAgICYmIChvZmZzZXQgKyBsaW1pdCA8IHRvdGFsQ291bnQpXHJcbiAgICAgICAgICAmJiBsb2FkaW5nID09PSBmYWxzZVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgdGhpcy5wYWdpbmF0aW9uU3RhdGUubG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICB0aGlzLnBhZ2luYXRpb25TdGF0ZS5vZmZzZXQgPSBvZmZzZXQgKyBsaW1pdDtcclxuICAgICAgICAgIHRoaXMucGFnaW5hdGUkLm5leHQodGhpcy5wYWdpbmF0aW9uU3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIC8qIGNsZWFySW50ZXJuYWxGaWx0ZXJzKHNlYXJjaE1vZGVsKSB7XHJcbiAgICBjb25zdCBzZWFyY2hGaWx0ZXIgPSBzZWFyY2hNb2RlbC5nZXRGaWx0ZXJzQnlGYWNldElkKCdlbnRpdHktc2VhcmNoJylbMF07XHJcbiAgICBjb25zdCB0eXBlc0ZpbHRlciA9IHNlYXJjaE1vZGVsLmdldEZpbHRlcnNCeUZhY2V0SWQoJ2VudGl0eS10eXBlcycpWzBdO1xyXG4gICAgaWYgKCFpc0VtcHR5KHNlYXJjaEZpbHRlci52YWx1ZSkgfHwgIWlzRW1wdHkodHlwZXNGaWx0ZXIudmFsdWUpKSB7XHJcbiAgICAgIHNlYXJjaEZpbHRlci52YWx1ZSA9ICcnO1xyXG4gICAgICB0eXBlc0ZpbHRlci52YWx1ZSA9IFtdO1xyXG4gICAgICBzZWFyY2hNb2RlbC51cGRhdGVJbnB1dHNGcm9tRmlsdGVycygpO1xyXG4gICAgfVxyXG4gIH0sICovXHJcbiAgdXBkYXRlUGFyYW1zT2Zmc2V0KHBhcmFtcykge1xyXG4gICAgY29uc3QgZW50aXR5TGlua3NGaWx0ZXIgPSBwYXJhbXMuZmlsdGVyc1xyXG4gICAgICAuZmluZCgoeyBmYWNldElkIH0pID0+IGZhY2V0SWQgPT09IEVOVElUWV9MSU5LU19DTEFTUyk7XHJcblxyXG4gICAgaWYgKGVudGl0eUxpbmtzRmlsdGVyKSB7XHJcbiAgICAgIGVudGl0eUxpbmtzRmlsdGVyLnBhZ2luYXRpb24ub2Zmc2V0ID0gdGhpcy5wYWdpbmF0aW9uU3RhdGUub2Zmc2V0O1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgcmVzZXRPZmZzZXQoKSB7XHJcbiAgICB0aGlzLnBhZ2luYXRpb25TdGF0ZS5vZmZzZXQgPSAwO1xyXG4gIH0sXHJcbiAgYWRkSW5pdGlhbExvYWRlcihkYXRhU291cmNlKSB7XHJcbiAgICBkYXRhU291cmNlLnNlYXJjaE1vZGVsLnNldElucHV0RGF0YShFTlRJVFlfTElOS1NfQ0xBU1MsIFtsb2FkZXJJdGVtXSk7XHJcbiAgICBjb25zdCBmYWNldHNXcmFwcGVyRFMgPSBkYXRhU291cmNlLmdldFdpZGdldERhdGFTb3VyY2UoJ2ZhY2V0cy13cmFwcGVyJyk7XHJcbiAgICBmYWNldHNXcmFwcGVyRFMudXBkYXRlSW5wdXRMaW5rcygpO1xyXG4gIH1cclxufTtcclxuIl19