import { DataSource } from '@n7-frontend/core';
import { interval } from 'rxjs';
import { filter, first } from 'rxjs/operators';
export class AwSchedaImageDS extends DataSource {
    transform(data) {
        const tileSources = this.getTileSources(data.items);
        return {
            images: [],
            viewerId: data.id,
            libOptions: {
                tileSources,
                sequenceMode: true,
                showReferenceStrip: true,
                autoHideControls: false,
                showNavigator: false,
            },
            _setViewer: (viewer) => {
                this.instance = viewer;
            }
        };
    }
    hasInstance() {
        return !!this.instance;
    }
    updateImages(data) {
        if (!this.instance)
            return;
        // container exists check
        interval(10).pipe(filter(() => !!document.getElementById(this.output.viewerId)), first()).subscribe(() => {
            // reset
            this.instance.world.removeAll();
            setTimeout(() => {
                const images = this.getTileSources(data.items);
                this.instance.open(images);
            });
        });
    }
    reset() {
        if (!this.instance)
            return;
        this.instance.world.removeAll();
    }
    getTileSources(images) {
        const tileSources = [];
        images.forEach(({ type, url, iiifImages }) => {
            if (type === 'images-simple') {
                tileSources.push({
                    url,
                    type: 'image'
                });
            }
            else if (type === 'images-iip') {
                // FIXME: togliere replace
                tileSources.push(url.replace('FIF', 'Deepzoom').replace('.tif', '.tif.dzi'));
            }
            else if (type === 'images-iiif') {
                iiifImages.forEach((iiifUrl) => {
                    tileSources.push(iiifUrl);
                });
            }
        });
        return tileSources;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWRhLWltYWdlLmRzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG43LWZyb250ZW5kL2JvaWxlcnBsYXRlLyIsInNvdXJjZXMiOlsibGliL2FyaWFubmEtd2ViL2RhdGEtc291cmNlcy9zY2hlZGEtaW1hZ2UuZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUvQyxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxVQUFVO0lBR25DLFNBQVMsQ0FBQyxJQUFJO1FBQ3RCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXBELE9BQU87WUFDTCxNQUFNLEVBQUUsRUFBRTtZQUNWLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRTtZQUNqQixVQUFVLEVBQUU7Z0JBQ1YsV0FBVztnQkFDWCxZQUFZLEVBQUUsSUFBSTtnQkFDbEIsa0JBQWtCLEVBQUUsSUFBSTtnQkFDeEIsZ0JBQWdCLEVBQUUsS0FBSztnQkFDdkIsYUFBYSxFQUFFLEtBQUs7YUFDckI7WUFDRCxVQUFVLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7WUFDekIsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDO0lBRU0sV0FBVztRQUNoQixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFFTSxZQUFZLENBQUMsSUFBSTtRQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7WUFBRSxPQUFPO1FBRTNCLHlCQUF5QjtRQUN6QixRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUNmLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQzdELEtBQUssRUFBRSxDQUNSLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNmLFFBQVE7WUFDUixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNoQyxVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNkLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMvQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM3QixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLEtBQUs7UUFDVixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7WUFBRSxPQUFPO1FBQzNCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFTyxjQUFjLENBQUMsTUFBTTtRQUMzQixNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDdkIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFO1lBQzNDLElBQUksSUFBSSxLQUFLLGVBQWUsRUFBRTtnQkFDNUIsV0FBVyxDQUFDLElBQUksQ0FBQztvQkFDZixHQUFHO29CQUNILElBQUksRUFBRSxPQUFPO2lCQUNkLENBQUMsQ0FBQzthQUNKO2lCQUFNLElBQUksSUFBSSxLQUFLLFlBQVksRUFBRTtnQkFDaEMsMEJBQTBCO2dCQUMxQixXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQzthQUM5RTtpQkFBTSxJQUFJLElBQUksS0FBSyxhQUFhLEVBQUU7Z0JBQ2pDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtvQkFDN0IsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDNUIsQ0FBQyxDQUFDLENBQUM7YUFDSjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YVNvdXJjZSB9IGZyb20gJ0BuNy1mcm9udGVuZC9jb3JlJztcclxuaW1wb3J0IHsgSW1hZ2VWaWV3ZXJEYXRhIH0gZnJvbSAnQG43LWZyb250ZW5kL2NvbXBvbmVudHMnO1xyXG5pbXBvcnQgeyBpbnRlcnZhbCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBmaWx0ZXIsIGZpcnN0IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEF3U2NoZWRhSW1hZ2VEUyBleHRlbmRzIERhdGFTb3VyY2Uge1xyXG4gIHByaXZhdGUgaW5zdGFuY2U7XHJcblxyXG4gIHByb3RlY3RlZCB0cmFuc2Zvcm0oZGF0YSk6IEltYWdlVmlld2VyRGF0YSB7XHJcbiAgICBjb25zdCB0aWxlU291cmNlcyA9IHRoaXMuZ2V0VGlsZVNvdXJjZXMoZGF0YS5pdGVtcyk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaW1hZ2VzOiBbXSxcclxuICAgICAgdmlld2VySWQ6IGRhdGEuaWQsXHJcbiAgICAgIGxpYk9wdGlvbnM6IHtcclxuICAgICAgICB0aWxlU291cmNlcyxcclxuICAgICAgICBzZXF1ZW5jZU1vZGU6IHRydWUsXHJcbiAgICAgICAgc2hvd1JlZmVyZW5jZVN0cmlwOiB0cnVlLFxyXG4gICAgICAgIGF1dG9IaWRlQ29udHJvbHM6IGZhbHNlLFxyXG4gICAgICAgIHNob3dOYXZpZ2F0b3I6IGZhbHNlLFxyXG4gICAgICB9LFxyXG4gICAgICBfc2V0Vmlld2VyOiAodmlld2VyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IHZpZXdlcjtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBoYXNJbnN0YW5jZSgpIHtcclxuICAgIHJldHVybiAhIXRoaXMuaW5zdGFuY2U7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdXBkYXRlSW1hZ2VzKGRhdGEpIHtcclxuICAgIGlmICghdGhpcy5pbnN0YW5jZSkgcmV0dXJuO1xyXG5cclxuICAgIC8vIGNvbnRhaW5lciBleGlzdHMgY2hlY2tcclxuICAgIGludGVydmFsKDEwKS5waXBlKFxyXG4gICAgICBmaWx0ZXIoKCkgPT4gISFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLm91dHB1dC52aWV3ZXJJZCkpLFxyXG4gICAgICBmaXJzdCgpXHJcbiAgICApLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgIC8vIHJlc2V0XHJcbiAgICAgIHRoaXMuaW5zdGFuY2Uud29ybGQucmVtb3ZlQWxsKCk7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGltYWdlcyA9IHRoaXMuZ2V0VGlsZVNvdXJjZXMoZGF0YS5pdGVtcyk7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZS5vcGVuKGltYWdlcyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVzZXQoKSB7XHJcbiAgICBpZiAoIXRoaXMuaW5zdGFuY2UpIHJldHVybjtcclxuICAgIHRoaXMuaW5zdGFuY2Uud29ybGQucmVtb3ZlQWxsKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldFRpbGVTb3VyY2VzKGltYWdlcykge1xyXG4gICAgY29uc3QgdGlsZVNvdXJjZXMgPSBbXTtcclxuICAgIGltYWdlcy5mb3JFYWNoKCh7IHR5cGUsIHVybCwgaWlpZkltYWdlcyB9KSA9PiB7XHJcbiAgICAgIGlmICh0eXBlID09PSAnaW1hZ2VzLXNpbXBsZScpIHtcclxuICAgICAgICB0aWxlU291cmNlcy5wdXNoKHtcclxuICAgICAgICAgIHVybCxcclxuICAgICAgICAgIHR5cGU6ICdpbWFnZSdcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnaW1hZ2VzLWlpcCcpIHtcclxuICAgICAgICAvLyBGSVhNRTogdG9nbGllcmUgcmVwbGFjZVxyXG4gICAgICAgIHRpbGVTb3VyY2VzLnB1c2godXJsLnJlcGxhY2UoJ0ZJRicsICdEZWVwem9vbScpLnJlcGxhY2UoJy50aWYnLCAnLnRpZi5kemknKSk7XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2ltYWdlcy1paWlmJykge1xyXG4gICAgICAgIGlpaWZJbWFnZXMuZm9yRWFjaCgoaWlpZlVybCkgPT4ge1xyXG4gICAgICAgICAgdGlsZVNvdXJjZXMucHVzaChpaWlmVXJsKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGlsZVNvdXJjZXM7XHJcbiAgfVxyXG59XHJcbiJdfQ==