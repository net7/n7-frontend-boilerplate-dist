import { DataSource } from '@n7-frontend/core';
import * as Leaflet from 'leaflet';
import { Subject } from 'rxjs';
const MARKER_ICON = Leaflet.icon({
    iconUrl: '/assets/pin.png',
    iconSize: [30, 45.5],
    popupAnchor: [0, -25],
    className: 'marker-icon'
});
const MARKER_ICON_SELECTED = Leaflet.icon({
    iconUrl: '/assets/pin-selected.png',
    iconSize: [30, 45.5],
    popupAnchor: [0, -25],
    className: 'marker-icon-selected'
});
export class AwMapDS extends DataSource {
    constructor() {
        super(...arguments);
        this.markerOpen$ = new Subject();
        this.markerClose$ = new Subject();
        this.transform = (data) => ({
            containerId: 'map-canvas',
            tileLayers: [{
                    url: 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png',
                    options: {}
                }],
            initialView: {
                center: [0, 0],
                zoom: 13
            },
            _setInstance: (map) => {
                this.map = map;
                const bounds = new Leaflet.LatLngBounds(data.map(({ lat, lon }) => [lat, lon]));
                this.map.fitBounds(bounds);
                // adding markers
                const markers = Leaflet.markerClusterGroup({
                    showCoverageOnHover: false,
                });
                data
                    // skip broken markers
                    .filter((d) => (d.lat && d.lon))
                    // draw markers on the map
                    .forEach(({ lat, lon, item }) => {
                    const { label } = item;
                    const marker = Leaflet.marker([lat, lon], { icon: MARKER_ICON })
                        .addTo(markers)
                        .bindPopup(label)
                        .on('click', ({ target }) => {
                        const { icon } = target.options;
                        const { className } = icon.options;
                        if (className === 'marker-icon-selected') {
                            this.markerOpen$.next(item);
                        }
                    });
                    marker.getPopup().on('remove', ({ target }) => {
                        target._source.setIcon(MARKER_ICON);
                        this.markerClose$.next();
                    });
                    marker.getPopup().on('add', ({ target }) => {
                        target._source.setIcon(MARKER_ICON_SELECTED);
                    });
                });
                this.map.addLayer(markers);
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmRzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG43LWZyb250ZW5kL2JvaWxlcnBsYXRlLyIsInNvdXJjZXMiOlsibGliL2FyaWFubmEtd2ViL2RhdGEtc291cmNlcy9tYXAuZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQy9DLE9BQU8sS0FBSyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztJQUMvQixPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUM7SUFDcEIsV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ3JCLFNBQVMsRUFBRSxhQUFhO0NBQ3pCLENBQUMsQ0FBQztBQUVILE1BQU0sb0JBQW9CLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztJQUN4QyxPQUFPLEVBQUUsMEJBQTBCO0lBQ25DLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUM7SUFDcEIsV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ3JCLFNBQVMsRUFBRSxzQkFBc0I7Q0FDbEMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxPQUFPLE9BQVEsU0FBUSxVQUFVO0lBQXZDOztRQUdTLGdCQUFXLEdBQW9CLElBQUksT0FBTyxFQUFFLENBQUM7UUFFN0MsaUJBQVksR0FBa0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUV6QyxjQUFTLEdBQUcsQ0FBQyxJQUFJLEVBQVcsRUFBRSxDQUFDLENBQUM7WUFDeEMsV0FBVyxFQUFFLFlBQVk7WUFDekIsVUFBVSxFQUFFLENBQUM7b0JBQ1gsR0FBRyxFQUFFLDhFQUE4RTtvQkFDbkYsT0FBTyxFQUFFLEVBQUU7aUJBQ1osQ0FBQztZQUNGLFdBQVcsRUFBRTtnQkFDWCxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLElBQUksRUFBRSxFQUFFO2FBQ1Q7WUFDRCxZQUFZLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDcEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7Z0JBQ2YsTUFBTSxNQUFNLEdBQUcsSUFBSSxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNoRixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFFM0IsaUJBQWlCO2dCQUNqQixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUM7b0JBQ3pDLG1CQUFtQixFQUFFLEtBQUs7aUJBQzNCLENBQUMsQ0FBQztnQkFDSCxJQUFJO29CQUNGLHNCQUFzQjtxQkFDckIsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNoQywwQkFBMEI7cUJBQ3pCLE9BQU8sQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO29CQUM5QixNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDO29CQUN2QixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDO3lCQUM3RCxLQUFLLENBQUMsT0FBTyxDQUFDO3lCQUNkLFNBQVMsQ0FBQyxLQUFLLENBQUM7eUJBQ2hCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUU7d0JBQzFCLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO3dCQUNoQyxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQzt3QkFDbkMsSUFBSSxTQUFTLEtBQUssc0JBQXNCLEVBQUU7NEJBQ3hDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO3lCQUM3QjtvQkFDSCxDQUFDLENBQUMsQ0FBQztvQkFFTCxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTt3QkFDNUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7d0JBQ3BDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQzNCLENBQUMsQ0FBQyxDQUFDO29CQUVILE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFO3dCQUN6QyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO29CQUMvQyxDQUFDLENBQUMsQ0FBQztnQkFDTCxDQUFDLENBQUMsQ0FBQztnQkFDTCxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM3QixDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFwRGF0YSB9IGZyb20gJ0BuNy1mcm9udGVuZC9jb21wb25lbnRzJztcbmltcG9ydCB7IERhdGFTb3VyY2UgfSBmcm9tICdAbjctZnJvbnRlbmQvY29yZSc7XG5pbXBvcnQgKiBhcyBMZWFmbGV0IGZyb20gJ2xlYWZsZXQnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5jb25zdCBNQVJLRVJfSUNPTiA9IExlYWZsZXQuaWNvbih7XG4gIGljb25Vcmw6ICcvYXNzZXRzL3Bpbi5wbmcnLFxuICBpY29uU2l6ZTogWzMwLCA0NS41XSxcbiAgcG9wdXBBbmNob3I6IFswLCAtMjVdLFxuICBjbGFzc05hbWU6ICdtYXJrZXItaWNvbidcbn0pO1xuXG5jb25zdCBNQVJLRVJfSUNPTl9TRUxFQ1RFRCA9IExlYWZsZXQuaWNvbih7XG4gIGljb25Vcmw6ICcvYXNzZXRzL3Bpbi1zZWxlY3RlZC5wbmcnLFxuICBpY29uU2l6ZTogWzMwLCA0NS41XSxcbiAgcG9wdXBBbmNob3I6IFswLCAtMjVdLFxuICBjbGFzc05hbWU6ICdtYXJrZXItaWNvbi1zZWxlY3RlZCdcbn0pO1xuXG5leHBvcnQgY2xhc3MgQXdNYXBEUyBleHRlbmRzIERhdGFTb3VyY2Uge1xuICBwdWJsaWMgbWFwO1xuXG4gIHB1YmxpYyBtYXJrZXJPcGVuJDogU3ViamVjdDxvYmplY3Q+ID0gbmV3IFN1YmplY3QoKTtcblxuICBwdWJsaWMgbWFya2VyQ2xvc2UkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3QoKTtcblxuICBwcm90ZWN0ZWQgdHJhbnNmb3JtID0gKGRhdGEpOiBNYXBEYXRhID0+ICh7XG4gICAgY29udGFpbmVySWQ6ICdtYXAtY2FudmFzJyxcbiAgICB0aWxlTGF5ZXJzOiBbe1xuICAgICAgdXJsOiAnaHR0cHM6Ly9jYXJ0b2RiLWJhc2VtYXBzLXtzfS5nbG9iYWwuc3NsLmZhc3RseS5uZXQvbGlnaHRfYWxsL3t6fS97eH0ve3l9LnBuZycsXG4gICAgICBvcHRpb25zOiB7fVxuICAgIH1dLFxuICAgIGluaXRpYWxWaWV3OiB7XG4gICAgICBjZW50ZXI6IFswLCAwXSxcbiAgICAgIHpvb206IDEzXG4gICAgfSxcbiAgICBfc2V0SW5zdGFuY2U6IChtYXApID0+IHtcbiAgICAgIHRoaXMubWFwID0gbWFwO1xuICAgICAgY29uc3QgYm91bmRzID0gbmV3IExlYWZsZXQuTGF0TG5nQm91bmRzKGRhdGEubWFwKCh7IGxhdCwgbG9uIH0pID0+IFtsYXQsIGxvbl0pKTtcbiAgICAgIHRoaXMubWFwLmZpdEJvdW5kcyhib3VuZHMpO1xuXG4gICAgICAvLyBhZGRpbmcgbWFya2Vyc1xuICAgICAgY29uc3QgbWFya2VycyA9IExlYWZsZXQubWFya2VyQ2x1c3Rlckdyb3VwKHtcbiAgICAgICAgc2hvd0NvdmVyYWdlT25Ib3ZlcjogZmFsc2UsXG4gICAgICB9KTtcbiAgICAgIGRhdGFcbiAgICAgICAgLy8gc2tpcCBicm9rZW4gbWFya2Vyc1xuICAgICAgICAuZmlsdGVyKChkKSA9PiAoZC5sYXQgJiYgZC5sb24pKVxuICAgICAgICAvLyBkcmF3IG1hcmtlcnMgb24gdGhlIG1hcFxuICAgICAgICAuZm9yRWFjaCgoeyBsYXQsIGxvbiwgaXRlbSB9KSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBsYWJlbCB9ID0gaXRlbTtcbiAgICAgICAgICBjb25zdCBtYXJrZXIgPSBMZWFmbGV0Lm1hcmtlcihbbGF0LCBsb25dLCB7IGljb246IE1BUktFUl9JQ09OIH0pXG4gICAgICAgICAgICAuYWRkVG8obWFya2VycylcbiAgICAgICAgICAgIC5iaW5kUG9wdXAobGFiZWwpXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgKHsgdGFyZ2V0IH0pID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgeyBpY29uIH0gPSB0YXJnZXQub3B0aW9ucztcbiAgICAgICAgICAgICAgY29uc3QgeyBjbGFzc05hbWUgfSA9IGljb24ub3B0aW9ucztcbiAgICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSA9PT0gJ21hcmtlci1pY29uLXNlbGVjdGVkJykge1xuICAgICAgICAgICAgICAgIHRoaXMubWFya2VyT3BlbiQubmV4dChpdGVtKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICBtYXJrZXIuZ2V0UG9wdXAoKS5vbigncmVtb3ZlJywgKHsgdGFyZ2V0IH0pID0+IHtcbiAgICAgICAgICAgIHRhcmdldC5fc291cmNlLnNldEljb24oTUFSS0VSX0lDT04pO1xuICAgICAgICAgICAgdGhpcy5tYXJrZXJDbG9zZSQubmV4dCgpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgbWFya2VyLmdldFBvcHVwKCkub24oJ2FkZCcsICh7IHRhcmdldCB9KSA9PiB7XG4gICAgICAgICAgICB0YXJnZXQuX3NvdXJjZS5zZXRJY29uKE1BUktFUl9JQ09OX1NFTEVDVEVEKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB0aGlzLm1hcC5hZGRMYXllcihtYXJrZXJzKTtcbiAgICB9XG4gIH0pO1xufVxuIl19