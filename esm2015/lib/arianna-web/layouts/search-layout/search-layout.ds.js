import { cloneDeep } from 'lodash';
import { LayoutDataSource } from '@n7-frontend/core';
import { tap, takeUntil } from 'rxjs/operators';
import { of, fromEvent, Subject, BehaviorSubject, forkJoin } from 'rxjs';
import facetsConfig from './search-facets.config';
import helpers from '../../../common/helpers';
import { AwSearchModel } from '../../search/aw-search.model';
import entityLinksHelper from '../../search/entity-links.helper';
export class AwSearchLayoutDS extends LayoutDataSource {
    constructor() {
        super(...arguments);
        this.layoutId = 'aw-search-layout';
        this.configId = 'search-layout';
        this.currentNav = 'ricerca';
        this.headTitle = 'Arianna4View - Ricerca';
        this.facetsConfig = facetsConfig;
        this.paginationList = [10, 25, 50];
        this.destroyed$ = new Subject();
        this.resetButtonEnabled = true;
        /** Pagination value (url parameter) */
        this.currentPage = 1;
        /** Linked objects page size */
        this.pageSize = 10;
        this.sidebarIsSticky = false;
        this.isFirstLoading = true;
        this.resultsLoading = false;
        /** True when the user has input a text string */
        this.isSearchingText = new BehaviorSubject(false);
        /** Current order method */
        this.orderBy = 'label_sort';
        /** Current order direction */
        this.orderDirection = 'ASC';
        this.orderByLabel = 'Ordina per';
        /** Options used to render the HTMLSelect */
        this.orderByOptions = [
            {
                value: '_score_DESC',
                label: 'Ordine per pertinenza',
                type: 'score',
                selected: false
            }, {
                value: 'label_sort_ASC',
                label: 'Ordine alfabetico (A→Z)',
                type: 'text',
                selected: true // Mirrors the default sorting method in `search-facets.config.ts`
            }, {
                value: 'label_sort_DESC',
                label: 'Ordine alfabetico (Z→A)',
                type: 'text',
                selected: false
            }
        ];
        this.drawPagination = () => {
            const { href, queryParams } = this._getPaginationParams();
            this.one('n7-smart-pagination').updateOptions({
                mode: 'href',
                href,
                queryParams,
            });
            this.one('n7-smart-pagination').update({
                totalPages: Math.ceil(this.totalCount / this.pageSize),
                currentPage: this.currentPage,
                pageLimit: 5,
                sizes: {
                    list: this.paginationList,
                    active: this.pageSize,
                },
            });
        };
        this.getSearchModelId = () => this.layoutId;
    }
    onInit({ configuration, mainState, options, communication, search, }) {
        this.configuration = configuration;
        this.mainState = mainState;
        this.communication = communication;
        this.search = search;
        this.options = options;
        this.prettifyLabels = this.configuration.get('labels');
        this.configKeys = this.configuration.get('config-keys');
        this.fallback = this.configuration.get(this.configId).fallback;
        this.pageTitle = this.configuration.get(this.configId).title;
        // remove first
        // stateless search
        if (this.search.model(this.layoutId)) {
            this.search.remove(this.layoutId);
        }
        this.search.add(this.layoutId, cloneDeep(this.facetsConfig));
        this.searchModel = this.search.model(this.layoutId);
        // query params control
        if (AwSearchModel.queryParams) {
            this.searchModel.updateFiltersFromQueryParams(AwSearchModel.queryParams);
            AwSearchModel.queryParams = null;
        }
        this._sidebarStickyControl();
        this.mainState.updateCustom('currentNav', this.currentNav);
        this.mainState.update('headTitle', this.headTitle);
    }
    onDestroy() {
        this.destroyed$.next();
        AwSearchModel.queryParams = null;
    }
    onSearchResponse() {
        this.resetButtonEnabled = true;
        if (this.isFirstLoading) {
            this.isFirstLoading = false;
            this.one('facets-wrapper').update({ searchModel: this.searchModel });
            this.searchModel.updateInputsFromFilters();
        }
    }
    /**
     * Handles changes of the HTMLSelect order control
     * @param payload _score_DESC, label_sort_ASC, label_sort_DESC
     */
    onOrderByChange(payload) {
        const orderBy = payload.substring(0, payload.lastIndexOf('_'));
        const direction = payload.substring(payload.lastIndexOf('_') + 1);
        let type = '';
        // set selected
        this.orderByOptions.forEach((option) => {
            if (option.value === payload) {
                option.selected = true;
                type = option.type;
            }
            else {
                option.selected = false;
            }
        });
        this.orderBy = orderBy;
        this.orderDirection = direction;
        this.searchModel.setSearchConfigOrderBy(orderBy);
        this.searchModel.setSearchConfigDirection(direction);
        this.searchModel.setSearchConfigType(type);
    }
    onPageSizeChange(size) {
        this.pageSize = size;
        return this._updateSearchPage(this.currentPage);
    }
    onPaginationChange(payload) {
        const page = payload.replace('page-', '');
        return this._updateSearchPage(page);
    }
    onPaginationGoToChange(payload) {
        const page = payload.replace('goto-', '');
        return this._updateSearchPage(page);
    }
    resetPagination() {
        this._updateSearchPage(1);
    }
    onResultsLimitChange(payload) {
        this.setLimit(payload);
        // reset page & offset
        this.currentPage = 1;
        this.searchModel.setPageConfigOffset(0);
    }
    setLimit(payload) {
        this.pageSize = payload;
        this.searchModel.setPageConfigLimit(payload);
        this.searchModel.setPageConfigOffset((this.currentPage - 1) * this.pageSize);
    }
    getResultsReq$(params) {
        return this.communication.request$('search', {
            params,
            onError: (error) => console.error(error),
        }).pipe(tap(({ totalCount, results }) => {
            this.totalCount = totalCount;
            let resultsTitleIndex = 0;
            // results title
            if (this.totalCount > 1) {
                resultsTitleIndex = 2;
            }
            else if (this.totalCount === 1) {
                resultsTitleIndex = 1;
            }
            this.resultsTitle = this.configuration.get(this.configId).results[resultsTitleIndex];
            this.searchModel.updateTotalCount(totalCount);
            this.one('aw-linked-objects').updateOptions({
                context: this.configId === 'gallery-layout' ? 'gallery' : 'search',
                config: this.configuration,
                page: this.currentPage,
                pagination: true,
                paginationParams: this._getPaginationParams(),
                dynamicPagination: {
                    total: totalCount,
                },
                size: this.pageSize,
            });
            this.drawPagination();
            this.one('aw-linked-objects').update({ items: this._normalizeItems(results.items) });
        }));
    }
    getFacetsReq$(params) {
        return this.communication.request$('facets', {
            params,
            onError: (error) => console.error(error),
        }).pipe(tap(({ facets }) => {
            // entity links pagination control
            entityLinksHelper.onFacetsResponse(this.searchModel, facets);
            // facets labels
            this._addFacetsLabels(facets);
            // facets options
            this._addFacetsOptions(facets);
            this.searchModel.updateFacets(facets);
        }));
    }
    doSearchRequest$() {
        const requestParams = this.searchModel.getRequestParams();
        const params = {
            searchParameters: Object.assign({ totalCount: 0, gallery: !!(this.configId === 'gallery-layout') }, requestParams),
        };
        // update offset
        entityLinksHelper.resetOffset();
        entityLinksHelper.updateParamsOffset(params.searchParameters);
        // initial loader
        entityLinksHelper.addInitialLoader(this);
        const resultsReq$ = this.getResultsReq$(params);
        const facetsReq$ = this.getFacetsReq$(params);
        return forkJoin(resultsReq$, facetsReq$);
    }
    _updateSearchPage(page) {
        if (+page === this.currentPage) {
            return of(false);
        }
        this.currentPage = +page;
        const searchConfig = this.searchModel.getConfig();
        const pageConfig = searchConfig.page;
        const { limit } = pageConfig;
        const newOffset = (this.currentPage - 1) * limit;
        this.searchModel.setPageConfigOffset(newOffset);
        return of(true);
    }
    _addFacetsLabels(facets) {
        facets
            .filter((f) => Array.isArray(f.data))
            .forEach((f) => {
            f.data.forEach((dataItem) => {
                const key = dataItem.label;
                dataItem.label = helpers.prettifySnakeCase(key, this.prettifyLabels[key]);
            });
        });
    }
    _addFacetsOptions(facets) {
        facets
            .filter((f) => f.id === 'query-links')
            .forEach((f) => {
            f.data.forEach((dataItem) => {
                const config = this.configKeys[dataItem.value];
                if (config) {
                    dataItem.options = {
                        icon: config.icon,
                        classes: `color-${config['class-name']}`,
                    };
                }
            });
        });
    }
    _normalizeItems(items) {
        return items.map((singleItem) => ({ item: Object.assign({}, singleItem) }));
    }
    _sidebarStickyControl() {
        // no sticky for Internet Explorer
        if (helpers.browserIsIE()) {
            return;
        }
        const source$ = fromEvent(window, 'scroll');
        source$.pipe(takeUntil(this.destroyed$)).subscribe(() => {
            const windowOffsetTop = window.pageYOffset;
            const stickyParent = document.getElementsByClassName('sticky-parent')[0];
            const wrapperOffsetTop = stickyParent ? stickyParent.offsetTop : 0;
            this.sidebarIsSticky = wrapperOffsetTop <= windowOffsetTop;
        });
    }
    _getPaginationParams() {
        const requestParams = this.searchModel.getRequestParams();
        const queryParams = this.searchModel.filtersAsQueryParams(requestParams.filters);
        Object.keys(queryParams).forEach((key) => { queryParams[key] = queryParams[key] || null; });
        // aditional params
        queryParams.orderby = this.orderBy;
        queryParams.orderdirection = this.orderDirection;
        queryParams.page = this.currentPage;
        queryParams.limit = this.pageSize;
        let href = this.configuration.get('paths').searchBasePath;
        if (this.configId === 'gallery-layout') {
            href = this.configuration.get('paths').galleryBasePath;
        }
        return {
            href,
            queryParams,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,