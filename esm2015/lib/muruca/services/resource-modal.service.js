import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { _t } from '@n7-frontend/core';
import { ConfigurationService } from '../../common/services/configuration.service';
import { CommunicationService } from '../../common/services/communication.service';
let MrResourceModalService = class MrResourceModalService {
    constructor(configuration, communication) {
        this.configuration = configuration;
        this.communication = communication;
        this.state$ = new Subject();
        // default state
        this.state$.next({ status: 'IDLE' });
    }
    open(resourceId, configId) {
        this.state$.next({ status: 'LOADING' });
        const config = this.configuration.get(`resource-modal-${configId}`);
        // add translations
        ['top', 'content'].forEach((type) => {
            config.sections[type] = config.sections[type].map((section) => (Object.assign(Object.assign({}, section), { title: _t(section.title) })));
        });
        this.pageRequest$(resourceId, config, (err) => {
            console.warn(`Error loading resource modal for ${resourceId}`, err.message);
            this.state$.next({ status: 'ERROR' });
        }).subscribe((response) => {
            this.state$.next({ response, config, status: 'SUCCESS', });
        });
    }
    close() {
        this.state$.next({ status: 'IDLE' });
    }
    pageRequest$(id, config, onError) {
        const { top, content } = config.sections;
        const sections = top.concat(content);
        return this.communication.request$('resource', {
            onError,
            method: 'POST',
            params: {
                id,
                type: config.type,
                sections: sections.map((s) => s.id),
            }
        });
    }
};
MrResourceModalService.ctorParameters = () => [
    { type: ConfigurationService },
    { type: CommunicationService }
];
MrResourceModalService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [ConfigurationService,
        CommunicationService])
], MrResourceModalService);
export { MrResourceModalService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2UtbW9kYWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuNy1mcm9udGVuZC9ib2lsZXJwbGF0ZS8iLCJzb3VyY2VzIjpbImxpYi9tdXJ1Y2Evc2VydmljZXMvcmVzb3VyY2UtbW9kYWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNuRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQVduRixJQUFhLHNCQUFzQixHQUFuQyxNQUFhLHNCQUFzQjtJQUdqQyxZQUNVLGFBQW1DLEVBQ25DLGFBQW1DO1FBRG5DLGtCQUFhLEdBQWIsYUFBYSxDQUFzQjtRQUNuQyxrQkFBYSxHQUFiLGFBQWEsQ0FBc0I7UUFKN0MsV0FBTSxHQUF3QixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBTTFDLGdCQUFnQjtRQUNoQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxJQUFJLENBQUMsVUFBMkIsRUFBRSxRQUFnQjtRQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGtCQUFrQixRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLG1CQUFtQjtRQUNuQixDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNsQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxpQ0FDMUQsT0FBTyxLQUNWLEtBQUssRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUN4QixDQUFDLENBQUM7UUFDTixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQzVDLE9BQU8sQ0FBQyxJQUFJLENBQUMsb0NBQW9DLFVBQVUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1RSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxHQUFHLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBMkI7UUFDbEQsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3pDLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUU7WUFDN0MsT0FBTztZQUNQLE1BQU0sRUFBRSxNQUFNO1lBQ2QsTUFBTSxFQUFFO2dCQUNOLEVBQUU7Z0JBQ0YsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO2dCQUNqQixRQUFRLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzthQUNwQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRixDQUFBOztZQTNDMEIsb0JBQW9CO1lBQ3BCLG9CQUFvQjs7QUFMbEMsc0JBQXNCO0lBRGxDLFVBQVUsRUFBRTtxQ0FLYyxvQkFBb0I7UUFDcEIsb0JBQW9CO0dBTGxDLHNCQUFzQixDQStDbEM7U0EvQ1ksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IF90IH0gZnJvbSAnQG43LWZyb250ZW5kL2NvcmUnO1xyXG5pbXBvcnQgeyBDb25maWd1cmF0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL2NvbW1vbi9zZXJ2aWNlcy9jb25maWd1cmF0aW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDb21tdW5pY2F0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL2NvbW1vbi9zZXJ2aWNlcy9jb21tdW5pY2F0aW9uLnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IHR5cGUgTW9kYWxTdGF0dXMgPSAnTE9BRElORycgfCAnRVJST1InIHwgJ1NVQ0NFU1MnIHwgJ0VNUFRZJyB8ICdJRExFJztcclxuXHJcbmV4cG9ydCB0eXBlIE1vZGFsU3RhdGUgPSB7XHJcbiAgc3RhdHVzOiBNb2RhbFN0YXR1cztcclxuICByZXNwb25zZT86IGFueTtcclxuICBjb25maWc/OiBhbnk7XHJcbn07XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBNclJlc291cmNlTW9kYWxTZXJ2aWNlIHtcclxuICBzdGF0ZSQ6IFN1YmplY3Q8TW9kYWxTdGF0ZT4gPSBuZXcgU3ViamVjdCgpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgY29uZmlndXJhdGlvbjogQ29uZmlndXJhdGlvblNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGNvbW11bmljYXRpb246IENvbW11bmljYXRpb25TZXJ2aWNlLFxyXG4gICkge1xyXG4gICAgLy8gZGVmYXVsdCBzdGF0ZVxyXG4gICAgdGhpcy5zdGF0ZSQubmV4dCh7IHN0YXR1czogJ0lETEUnIH0pO1xyXG4gIH1cclxuXHJcbiAgb3BlbihyZXNvdXJjZUlkOiBzdHJpbmcgfCBudW1iZXIsIGNvbmZpZ0lkOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuc3RhdGUkLm5leHQoeyBzdGF0dXM6ICdMT0FESU5HJyB9KTtcclxuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlndXJhdGlvbi5nZXQoYHJlc291cmNlLW1vZGFsLSR7Y29uZmlnSWR9YCk7XHJcbiAgICAvLyBhZGQgdHJhbnNsYXRpb25zXHJcbiAgICBbJ3RvcCcsICdjb250ZW50J10uZm9yRWFjaCgodHlwZSkgPT4ge1xyXG4gICAgICBjb25maWcuc2VjdGlvbnNbdHlwZV0gPSBjb25maWcuc2VjdGlvbnNbdHlwZV0ubWFwKChzZWN0aW9uKSA9PiAoe1xyXG4gICAgICAgIC4uLnNlY3Rpb24sXHJcbiAgICAgICAgdGl0bGU6IF90KHNlY3Rpb24udGl0bGUpXHJcbiAgICAgIH0pKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMucGFnZVJlcXVlc3QkKHJlc291cmNlSWQsIGNvbmZpZywgKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLndhcm4oYEVycm9yIGxvYWRpbmcgcmVzb3VyY2UgbW9kYWwgZm9yICR7cmVzb3VyY2VJZH1gLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgIHRoaXMuc3RhdGUkLm5leHQoeyBzdGF0dXM6ICdFUlJPUicgfSk7XHJcbiAgICB9KS5zdWJzY3JpYmUoKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgIHRoaXMuc3RhdGUkLm5leHQoeyByZXNwb25zZSwgY29uZmlnLCBzdGF0dXM6ICdTVUNDRVNTJywgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5zdGF0ZSQubmV4dCh7IHN0YXR1czogJ0lETEUnIH0pO1xyXG4gIH1cclxuXHJcbiAgcGFnZVJlcXVlc3QkKGlkLCBjb25maWcsIG9uRXJyb3I6IChlcnI6IGFueSkgPT4gdm9pZCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCB7IHRvcCwgY29udGVudCB9ID0gY29uZmlnLnNlY3Rpb25zO1xyXG4gICAgY29uc3Qgc2VjdGlvbnMgPSB0b3AuY29uY2F0KGNvbnRlbnQpO1xyXG4gICAgcmV0dXJuIHRoaXMuY29tbXVuaWNhdGlvbi5yZXF1ZXN0JCgncmVzb3VyY2UnLCB7XHJcbiAgICAgIG9uRXJyb3IsXHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBpZCxcclxuICAgICAgICB0eXBlOiBjb25maWcudHlwZSxcclxuICAgICAgICBzZWN0aW9uczogc2VjdGlvbnMubWFwKChzKSA9PiBzLmlkKSxcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==