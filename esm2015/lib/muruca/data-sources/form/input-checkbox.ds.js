import { DataSource, _t } from '@n7-frontend/core';
// eslint-disable-next-line max-len
export class MrInputCheckboxDS extends DataSource {
    constructor() {
        super(...arguments);
        this.state = {
            value: [],
            disabled: false,
            hidden: false,
        };
        this.getState = () => this.state;
    }
    transform(data) {
        return Object.assign(Object.assign({}, data), { checkboxes: this.getCheckboxes(data.checkboxes) });
    }
    setState(newState) {
        this.state = Object.assign(Object.assign({}, this.state), newState);
        this.refresh();
    }
    clear() {
        this.setState({ value: [] });
    }
    refresh() {
        const { hidden } = this.state;
        // render value
        this.output.checkboxes = this.getCheckboxes(this.output.checkboxes);
        // render hidden
        this.output.classes = hidden ? 'is-hidden' : '';
    }
    toggleValue({ inputPayload, value: isChecked }) {
        const { value } = this.state;
        const exists = !!(value.includes(inputPayload));
        if (isChecked && !exists) {
            value.push(inputPayload);
        }
        else if (!isChecked && exists) {
            value.splice(value.indexOf(inputPayload), 1);
        }
        this.setState({ value });
    }
    getCheckboxes(checkboxes) {
        const { value, disabled } = this.state;
        return checkboxes.map((checkbox, index) => (Object.assign(Object.assign({}, checkbox), { id: `${this.id}-${index}`, disabled, label: _t(checkbox.label), checked: !!(value.includes(checkbox.payload)) })));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtY2hlY2tib3guZHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbjctZnJvbnRlbmQvYm9pbGVycGxhdGUvIiwic291cmNlcyI6WyJsaWIvbXVydWNhL2RhdGEtc291cmNlcy9mb3JtL2lucHV0LWNoZWNrYm94LmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFNbkQsbUNBQW1DO0FBQ25DLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxVQUFVO0lBQWpEOztRQUdTLFVBQUssR0FBMkM7WUFDckQsS0FBSyxFQUFFLEVBQUU7WUFDVCxRQUFRLEVBQUUsS0FBSztZQUNmLE1BQU0sRUFBRSxLQUFLO1NBQ2QsQ0FBQztRQVNGLGFBQVEsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBNkM5QixDQUFDO0lBcERXLFNBQVMsQ0FBQyxJQUF1QjtRQUN6Qyx1Q0FDSyxJQUFJLEtBQ1AsVUFBVSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUMvQztJQUNKLENBQUM7SUFJRCxRQUFRLENBQUMsUUFBZ0Q7UUFDdkQsSUFBSSxDQUFDLEtBQUssbUNBQ0wsSUFBSSxDQUFDLEtBQUssR0FDVixRQUFRLENBQ1osQ0FBQztRQUNGLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsT0FBTztRQUNMLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRTlCLGVBQWU7UUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFcEUsZ0JBQWdCO1FBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDbEQsQ0FBQztJQUVELFdBQVcsQ0FBQyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO1FBQzVDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzdCLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUNoRCxJQUFJLFNBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUN4QixLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzFCO2FBQU0sSUFBSSxDQUFDLFNBQVMsSUFBSSxNQUFNLEVBQUU7WUFDL0IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzlDO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVPLGFBQWEsQ0FBQyxVQUFVO1FBQzlCLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN2QyxPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxpQ0FDdEMsUUFBUSxLQUNYLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLElBQUksS0FBSyxFQUFFLEVBQ3pCLFFBQVEsRUFDUixLQUFLLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFDekIsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQzdDLENBQUMsQ0FBQztJQUNOLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFTb3VyY2UsIF90IH0gZnJvbSAnQG43LWZyb250ZW5kL2NvcmUnO1xyXG5pbXBvcnQgeyBJbnB1dENoZWNrYm94RGF0YSB9IGZyb20gJ0BuNy1mcm9udGVuZC9jb21wb25lbnRzJztcclxuaW1wb3J0IHsgTXJGb3JtSW5wdXRTdGF0ZSwgTXJJbnB1dERhdGFTb3VyY2UgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2Zvcm0uaW50ZXJmYWNlJztcclxuXHJcbnR5cGUgTXJJbnB1dENoZWNrYm94VmFsdWUgPSBzdHJpbmdbXTtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXHJcbmV4cG9ydCBjbGFzcyBNcklucHV0Q2hlY2tib3hEUyBleHRlbmRzIERhdGFTb3VyY2UgaW1wbGVtZW50cyBNcklucHV0RGF0YVNvdXJjZTxNcklucHV0Q2hlY2tib3hWYWx1ZT4ge1xyXG4gIHB1YmxpYyBpZDogc3RyaW5nO1xyXG5cclxuICBwdWJsaWMgc3RhdGU6IE1yRm9ybUlucHV0U3RhdGU8TXJJbnB1dENoZWNrYm94VmFsdWU+ID0ge1xyXG4gICAgdmFsdWU6IFtdLFxyXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxyXG4gICAgaGlkZGVuOiBmYWxzZSxcclxuICB9O1xyXG5cclxuICBwcm90ZWN0ZWQgdHJhbnNmb3JtKGRhdGE6IElucHV0Q2hlY2tib3hEYXRhKTogSW5wdXRDaGVja2JveERhdGEge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4uZGF0YSxcclxuICAgICAgY2hlY2tib3hlczogdGhpcy5nZXRDaGVja2JveGVzKGRhdGEuY2hlY2tib3hlcylcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBnZXRTdGF0ZSA9ICgpID0+IHRoaXMuc3RhdGU7XHJcblxyXG4gIHNldFN0YXRlKG5ld1N0YXRlOiBNckZvcm1JbnB1dFN0YXRlPE1ySW5wdXRDaGVja2JveFZhbHVlPikge1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgLi4udGhpcy5zdGF0ZSxcclxuICAgICAgLi4ubmV3U3RhdGVcclxuICAgIH07XHJcbiAgICB0aGlzLnJlZnJlc2goKTtcclxuICB9XHJcblxyXG4gIGNsZWFyKCkge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBbXSB9KTtcclxuICB9XHJcblxyXG4gIHJlZnJlc2goKSB7XHJcbiAgICBjb25zdCB7IGhpZGRlbiB9ID0gdGhpcy5zdGF0ZTtcclxuXHJcbiAgICAvLyByZW5kZXIgdmFsdWVcclxuICAgIHRoaXMub3V0cHV0LmNoZWNrYm94ZXMgPSB0aGlzLmdldENoZWNrYm94ZXModGhpcy5vdXRwdXQuY2hlY2tib3hlcyk7XHJcblxyXG4gICAgLy8gcmVuZGVyIGhpZGRlblxyXG4gICAgdGhpcy5vdXRwdXQuY2xhc3NlcyA9IGhpZGRlbiA/ICdpcy1oaWRkZW4nIDogJyc7XHJcbiAgfVxyXG5cclxuICB0b2dnbGVWYWx1ZSh7IGlucHV0UGF5bG9hZCwgdmFsdWU6IGlzQ2hlY2tlZCB9KSB7XHJcbiAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3QgZXhpc3RzID0gISEodmFsdWUuaW5jbHVkZXMoaW5wdXRQYXlsb2FkKSk7XHJcbiAgICBpZiAoaXNDaGVja2VkICYmICFleGlzdHMpIHtcclxuICAgICAgdmFsdWUucHVzaChpbnB1dFBheWxvYWQpO1xyXG4gICAgfSBlbHNlIGlmICghaXNDaGVja2VkICYmIGV4aXN0cykge1xyXG4gICAgICB2YWx1ZS5zcGxpY2UodmFsdWUuaW5kZXhPZihpbnB1dFBheWxvYWQpLCAxKTtcclxuICAgIH1cclxuICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZSB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0Q2hlY2tib3hlcyhjaGVja2JveGVzKSB7XHJcbiAgICBjb25zdCB7IHZhbHVlLCBkaXNhYmxlZCB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIHJldHVybiBjaGVja2JveGVzLm1hcCgoY2hlY2tib3gsIGluZGV4KSA9PiAoe1xyXG4gICAgICAuLi5jaGVja2JveCxcclxuICAgICAgaWQ6IGAke3RoaXMuaWR9LSR7aW5kZXh9YCxcclxuICAgICAgZGlzYWJsZWQsXHJcbiAgICAgIGxhYmVsOiBfdChjaGVja2JveC5sYWJlbCksXHJcbiAgICAgIGNoZWNrZWQ6ICEhKHZhbHVlLmluY2x1ZGVzKGNoZWNrYm94LnBheWxvYWQpKVxyXG4gICAgfSkpO1xyXG4gIH1cclxufVxyXG4iXX0=