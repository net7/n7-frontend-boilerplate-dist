import { DataSource, _t } from '@n7-frontend/core';
// eslint-disable-next-line max-len
export class MrInputCheckboxDS extends DataSource {
    constructor() {
        super(...arguments);
        this.state = {
            value: [],
            disabled: false,
            hidden: false,
        };
        this.getState = () => this.state;
    }
    transform(data) {
        return Object.assign(Object.assign({}, data), { checkboxes: this.getCheckboxes(data.checkboxes) });
    }
    setState(newState) {
        this.state = Object.assign(Object.assign({}, this.state), newState);
        this.refresh();
    }
    clear() {
        this.setState({ value: [] });
    }
    refresh() {
        const { hidden } = this.state;
        // render value
        this.output.checkboxes = this.getCheckboxes(this.output.checkboxes);
        // render hidden
        this.output.classes = hidden ? 'is-hidden' : '';
    }
    toggleValue({ inputPayload, value: isChecked }) {
        const { value } = this.state;
        const exists = !!(value.includes(inputPayload));
        if (isChecked && !exists) {
            value.push(inputPayload);
        }
        else if (!isChecked && exists) {
            value.splice(value.indexOf(inputPayload), 1);
        }
        this.setState({ value });
    }
    getCheckboxes(checkboxes) {
        const { value, disabled } = this.state;
        return checkboxes.map((checkbox, index) => (Object.assign(Object.assign({}, checkbox), { id: `${this.id}-${index}`, disabled, label: _t(checkbox.label), checked: !!(value.includes(checkbox.payload)) })));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtY2hlY2tib3guZHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbjctZnJvbnRlbmQvYm9pbGVycGxhdGUvIiwic291cmNlcyI6WyJsaWIvbXVydWNhL2RhdGEtc291cmNlcy9mb3JtL2lucHV0LWNoZWNrYm94LmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFNbkQsbUNBQW1DO0FBQ25DLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxVQUFVO0lBQWpEOztRQUdTLFVBQUssR0FBMkM7WUFDckQsS0FBSyxFQUFFLEVBQUU7WUFDVCxRQUFRLEVBQUUsS0FBSztZQUNmLE1BQU0sRUFBRSxLQUFLO1NBQ2QsQ0FBQztRQVNGLGFBQVEsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBNkM5QixDQUFDO0lBcERXLFNBQVMsQ0FBQyxJQUF1QjtRQUN6Qyx1Q0FDSyxJQUFJLEtBQ1AsVUFBVSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUMvQztJQUNKLENBQUM7SUFJRCxRQUFRLENBQUMsUUFBZ0Q7UUFDdkQsSUFBSSxDQUFDLEtBQUssbUNBQ0wsSUFBSSxDQUFDLEtBQUssR0FDVixRQUFRLENBQ1osQ0FBQztRQUNGLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsT0FBTztRQUNMLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRTlCLGVBQWU7UUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFcEUsZ0JBQWdCO1FBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDbEQsQ0FBQztJQUVELFdBQVcsQ0FBQyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO1FBQzVDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzdCLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUNoRCxJQUFJLFNBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUN4QixLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzFCO2FBQU0sSUFBSSxDQUFDLFNBQVMsSUFBSSxNQUFNLEVBQUU7WUFDL0IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzlDO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVPLGFBQWEsQ0FBQyxVQUFVO1FBQzlCLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN2QyxPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxpQ0FDdEMsUUFBUSxLQUNYLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLElBQUksS0FBSyxFQUFFLEVBQ3pCLFFBQVEsRUFDUixLQUFLLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFDekIsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQzdDLENBQUMsQ0FBQztJQUNOLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFTb3VyY2UsIF90IH0gZnJvbSAnQG43LWZyb250ZW5kL2NvcmUnO1xuaW1wb3J0IHsgSW5wdXRDaGVja2JveERhdGEgfSBmcm9tICdAbjctZnJvbnRlbmQvY29tcG9uZW50cyc7XG5pbXBvcnQgeyBNckZvcm1JbnB1dFN0YXRlLCBNcklucHV0RGF0YVNvdXJjZSB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvZm9ybS5pbnRlcmZhY2UnO1xuXG50eXBlIE1ySW5wdXRDaGVja2JveFZhbHVlID0gc3RyaW5nW107XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG5leHBvcnQgY2xhc3MgTXJJbnB1dENoZWNrYm94RFMgZXh0ZW5kcyBEYXRhU291cmNlIGltcGxlbWVudHMgTXJJbnB1dERhdGFTb3VyY2U8TXJJbnB1dENoZWNrYm94VmFsdWU+IHtcbiAgcHVibGljIGlkOiBzdHJpbmc7XG5cbiAgcHVibGljIHN0YXRlOiBNckZvcm1JbnB1dFN0YXRlPE1ySW5wdXRDaGVja2JveFZhbHVlPiA9IHtcbiAgICB2YWx1ZTogW10sXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIGhpZGRlbjogZmFsc2UsXG4gIH07XG5cbiAgcHJvdGVjdGVkIHRyYW5zZm9ybShkYXRhOiBJbnB1dENoZWNrYm94RGF0YSk6IElucHV0Q2hlY2tib3hEYXRhIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uZGF0YSxcbiAgICAgIGNoZWNrYm94ZXM6IHRoaXMuZ2V0Q2hlY2tib3hlcyhkYXRhLmNoZWNrYm94ZXMpXG4gICAgfTtcbiAgfVxuXG4gIGdldFN0YXRlID0gKCkgPT4gdGhpcy5zdGF0ZTtcblxuICBzZXRTdGF0ZShuZXdTdGF0ZTogTXJGb3JtSW5wdXRTdGF0ZTxNcklucHV0Q2hlY2tib3hWYWx1ZT4pIHtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgIC4uLm5ld1N0YXRlXG4gICAgfTtcbiAgICB0aGlzLnJlZnJlc2goKTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogW10gfSk7XG4gIH1cblxuICByZWZyZXNoKCkge1xuICAgIGNvbnN0IHsgaGlkZGVuIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgLy8gcmVuZGVyIHZhbHVlXG4gICAgdGhpcy5vdXRwdXQuY2hlY2tib3hlcyA9IHRoaXMuZ2V0Q2hlY2tib3hlcyh0aGlzLm91dHB1dC5jaGVja2JveGVzKTtcblxuICAgIC8vIHJlbmRlciBoaWRkZW5cbiAgICB0aGlzLm91dHB1dC5jbGFzc2VzID0gaGlkZGVuID8gJ2lzLWhpZGRlbicgOiAnJztcbiAgfVxuXG4gIHRvZ2dsZVZhbHVlKHsgaW5wdXRQYXlsb2FkLCB2YWx1ZTogaXNDaGVja2VkIH0pIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGV4aXN0cyA9ICEhKHZhbHVlLmluY2x1ZGVzKGlucHV0UGF5bG9hZCkpO1xuICAgIGlmIChpc0NoZWNrZWQgJiYgIWV4aXN0cykge1xuICAgICAgdmFsdWUucHVzaChpbnB1dFBheWxvYWQpO1xuICAgIH0gZWxzZSBpZiAoIWlzQ2hlY2tlZCAmJiBleGlzdHMpIHtcbiAgICAgIHZhbHVlLnNwbGljZSh2YWx1ZS5pbmRleE9mKGlucHV0UGF5bG9hZCksIDEpO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWUgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldENoZWNrYm94ZXMoY2hlY2tib3hlcykge1xuICAgIGNvbnN0IHsgdmFsdWUsIGRpc2FibGVkIH0gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiBjaGVja2JveGVzLm1hcCgoY2hlY2tib3gsIGluZGV4KSA9PiAoe1xuICAgICAgLi4uY2hlY2tib3gsXG4gICAgICBpZDogYCR7dGhpcy5pZH0tJHtpbmRleH1gLFxuICAgICAgZGlzYWJsZWQsXG4gICAgICBsYWJlbDogX3QoY2hlY2tib3gubGFiZWwpLFxuICAgICAgY2hlY2tlZDogISEodmFsdWUuaW5jbHVkZXMoY2hlY2tib3gucGF5bG9hZCkpXG4gICAgfSkpO1xuICB9XG59XG4iXX0=