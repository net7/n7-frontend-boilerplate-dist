import { DataSource, _t } from '@n7-frontend/core';
export class MrSearchResultsTitleDS extends DataSource {
    transform(data) {
        const { totalResultsText, sort } = this.options.config;
        const { total_count: totalCount, sort: currentSort } = data;
        const mainText = _t(totalResultsText, { total: totalCount }, (key, { total }) => {
            if (total === 0) {
                return `${key}_0`;
            }
            if (total === 1) {
                return `${key}_1`;
            }
            return key;
        });
        return {
            title: {
                main: {
                    text: mainText
                }
            },
            actions: {
                select: {
                    label: sort.label,
                    options: sort.options.map(({ label, value, selected, disabled }) => ({
                        value,
                        disabled,
                        selected: currentSort ? value === currentSort : selected,
                        text: label
                    })),
                    payload: 'sort'
                }
            }
        };
    }
    OnInputQueryChange(value) {
        const { sort } = this.options.config;
        sort.options.forEach((option) => {
            if (option.value === '_score') {
                option.disabled = !value;
            }
        });
        this.update(this.input);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXJlc3VsdHMtdGl0bGUuZHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbjctZnJvbnRlbmQvYm9pbGVycGxhdGUvIiwic291cmNlcyI6WyJsaWIvbXVydWNhL2RhdGEtc291cmNlcy9zZWFyY2gvc2VhcmNoLXJlc3VsdHMtdGl0bGUuZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVuRCxNQUFNLE9BQU8sc0JBQXVCLFNBQVEsVUFBVTtJQUMxQyxTQUFTLENBQUMsSUFBSTtRQUN0QixNQUFNLEVBQ0osZ0JBQWdCLEVBQ2hCLElBQUksRUFDTCxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDNUQsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixFQUFFLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUM5RSxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7Z0JBQ2YsT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDO2FBQ25CO1lBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO2dCQUNqQixPQUFPLEdBQUcsR0FBRyxJQUFJLENBQUM7YUFDbkI7WUFDRCxPQUFPLEdBQUcsQ0FBQztRQUNiLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTztZQUNMLEtBQUssRUFBRTtnQkFDTCxJQUFJLEVBQUU7b0JBQ0osSUFBSSxFQUFFLFFBQVE7aUJBQ2Y7YUFDRjtZQUNELE9BQU8sRUFBRTtnQkFDUCxNQUFNLEVBQUU7b0JBQ04sS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO29CQUNqQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUN6QixLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQ2pDLEVBQUUsRUFBRSxDQUFDLENBQUM7d0JBQ0wsS0FBSzt3QkFDTCxRQUFRO3dCQUNSLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLFFBQVE7d0JBQ3hELElBQUksRUFBRSxLQUFLO3FCQUNaLENBQUMsQ0FBQztvQkFDSCxPQUFPLEVBQUUsTUFBTTtpQkFDaEI7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsa0JBQWtCLENBQUMsS0FBSztRQUN0QixNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUM5QixJQUFJLE1BQU0sQ0FBQyxLQUFLLEtBQUssUUFBUSxFQUFFO2dCQUM3QixNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsS0FBSyxDQUFDO2FBQzFCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhU291cmNlLCBfdCB9IGZyb20gJ0BuNy1mcm9udGVuZC9jb3JlJztcblxuZXhwb3J0IGNsYXNzIE1yU2VhcmNoUmVzdWx0c1RpdGxlRFMgZXh0ZW5kcyBEYXRhU291cmNlIHtcbiAgcHJvdGVjdGVkIHRyYW5zZm9ybShkYXRhKSB7XG4gICAgY29uc3Qge1xuICAgICAgdG90YWxSZXN1bHRzVGV4dCxcbiAgICAgIHNvcnRcbiAgICB9ID0gdGhpcy5vcHRpb25zLmNvbmZpZztcbiAgICBjb25zdCB7IHRvdGFsX2NvdW50OiB0b3RhbENvdW50LCBzb3J0OiBjdXJyZW50U29ydCB9ID0gZGF0YTtcbiAgICBjb25zdCBtYWluVGV4dCA9IF90KHRvdGFsUmVzdWx0c1RleHQsIHsgdG90YWw6IHRvdGFsQ291bnQgfSwgKGtleSwgeyB0b3RhbCB9KSA9PiB7XG4gICAgICBpZiAodG90YWwgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGAke2tleX1fMGA7XG4gICAgICB9IGlmICh0b3RhbCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gYCR7a2V5fV8xYDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBrZXk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdGl0bGU6IHtcbiAgICAgICAgbWFpbjoge1xuICAgICAgICAgIHRleHQ6IG1haW5UZXh0XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhY3Rpb25zOiB7XG4gICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgIGxhYmVsOiBzb3J0LmxhYmVsLFxuICAgICAgICAgIG9wdGlvbnM6IHNvcnQub3B0aW9ucy5tYXAoKHtcbiAgICAgICAgICAgIGxhYmVsLCB2YWx1ZSwgc2VsZWN0ZWQsIGRpc2FibGVkXG4gICAgICAgICAgfSkgPT4gKHtcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgZGlzYWJsZWQsXG4gICAgICAgICAgICBzZWxlY3RlZDogY3VycmVudFNvcnQgPyB2YWx1ZSA9PT0gY3VycmVudFNvcnQgOiBzZWxlY3RlZCxcbiAgICAgICAgICAgIHRleHQ6IGxhYmVsXG4gICAgICAgICAgfSkpLFxuICAgICAgICAgIHBheWxvYWQ6ICdzb3J0J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIE9uSW5wdXRRdWVyeUNoYW5nZSh2YWx1ZSkge1xuICAgIGNvbnN0IHsgc29ydCB9ID0gdGhpcy5vcHRpb25zLmNvbmZpZztcbiAgICBzb3J0Lm9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG4gICAgICBpZiAob3B0aW9uLnZhbHVlID09PSAnX3Njb3JlJykge1xuICAgICAgICBvcHRpb24uZGlzYWJsZWQgPSAhdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy51cGRhdGUodGhpcy5pbnB1dCk7XG4gIH1cbn1cbiJdfQ==