import { DataSource, _t } from '@n7-frontend/core';
import dateHelper from '../helpers/date-helper';
export class MrStaticMetadataDS extends DataSource {
    transform(data) {
        const items = ['authors', 'date', 'time_to_read']
            .filter((metakey) => data[metakey])
            .map((metakey) => {
            const itemValue = metakey === 'date' ? dateHelper.format(data[metakey], _t('global#date_human')) : data[metakey];
            if (metakey === 'time_to_read') {
                return {
                    value: _t(`resource#${metakey}`, { value: itemValue }, (key, placeholders) => (placeholders.value === 1 ? `${key}_1` : key))
                };
            }
            return {
                value: _t(`resource#${metakey}`, { value: itemValue })
            };
        });
        return { group: [{ items }] };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljLW1ldGFkYXRhLmRzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG43LWZyb250ZW5kL2JvaWxlcnBsYXRlLyIsInNvdXJjZXMiOlsibGliL211cnVjYS9kYXRhLXNvdXJjZXMvc3RhdGljLW1ldGFkYXRhLmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxVQUFVLE1BQU0sd0JBQXdCLENBQUM7QUFFaEQsTUFBTSxPQUFPLGtCQUFtQixTQUFRLFVBQVU7SUFDdEMsU0FBUyxDQUFDLElBQVM7UUFDM0IsTUFBTSxLQUFLLEdBQUcsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLGNBQWMsQ0FBQzthQUM5QyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNsQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNmLE1BQU0sU0FBUyxHQUFHLE9BQU8sS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNqSCxJQUFJLE9BQU8sS0FBSyxjQUFjLEVBQUU7Z0JBQzlCLE9BQU87b0JBQ0wsS0FBSyxFQUFFLEVBQUUsQ0FDUCxZQUFZLE9BQU8sRUFBRSxFQUNyQixFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFDcEIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FDckU7aUJBQ0YsQ0FBQzthQUNIO1lBQ0QsT0FBTztnQkFDTCxLQUFLLEVBQUUsRUFBRSxDQUFDLFlBQVksT0FBTyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUM7YUFDdkQsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO1FBRUwsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ2hDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFTb3VyY2UsIF90IH0gZnJvbSAnQG43LWZyb250ZW5kL2NvcmUnO1xuaW1wb3J0IGRhdGVIZWxwZXIgZnJvbSAnLi4vaGVscGVycy9kYXRlLWhlbHBlcic7XG5cbmV4cG9ydCBjbGFzcyBNclN0YXRpY01ldGFkYXRhRFMgZXh0ZW5kcyBEYXRhU291cmNlIHtcbiAgcHJvdGVjdGVkIHRyYW5zZm9ybShkYXRhOiBhbnkpOiBhbnkge1xuICAgIGNvbnN0IGl0ZW1zID0gWydhdXRob3JzJywgJ2RhdGUnLCAndGltZV90b19yZWFkJ11cbiAgICAgIC5maWx0ZXIoKG1ldGFrZXkpID0+IGRhdGFbbWV0YWtleV0pXG4gICAgICAubWFwKChtZXRha2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW1WYWx1ZSA9IG1ldGFrZXkgPT09ICdkYXRlJyA/IGRhdGVIZWxwZXIuZm9ybWF0KGRhdGFbbWV0YWtleV0sIF90KCdnbG9iYWwjZGF0ZV9odW1hbicpKSA6IGRhdGFbbWV0YWtleV07XG4gICAgICAgIGlmIChtZXRha2V5ID09PSAndGltZV90b19yZWFkJykge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogX3QoXG4gICAgICAgICAgICAgIGByZXNvdXJjZSMke21ldGFrZXl9YCxcbiAgICAgICAgICAgICAgeyB2YWx1ZTogaXRlbVZhbHVlIH0sXG4gICAgICAgICAgICAgIChrZXksIHBsYWNlaG9sZGVycykgPT4gKHBsYWNlaG9sZGVycy52YWx1ZSA9PT0gMSA/IGAke2tleX1fMWAgOiBrZXkpXG4gICAgICAgICAgICApXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlOiBfdChgcmVzb3VyY2UjJHttZXRha2V5fWAsIHsgdmFsdWU6IGl0ZW1WYWx1ZSB9KVxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICByZXR1cm4geyBncm91cDogW3sgaXRlbXMgfV0gfTtcbiAgfVxufVxuIl19