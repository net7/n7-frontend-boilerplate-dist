import { DataSource } from '@n7-frontend/core';
const ACTIVE_CLASS = 'is-active';
export class FacetHistogramDS extends DataSource {
    constructor() {
        super(...arguments);
        this.value = '';
        this.isUpdate = false;
        this.getValue = () => this.value;
    }
    transform({ links }) {
        // Remap the response values in the correct
        // format for histogram-range-component
        const items = links.map((link) => ({
            label: link.text,
            value: link.counter,
            payload: link.payload,
            range: link.range ? {
                payload: link.range.payload,
                label: link.range.text
            } : undefined,
        })).sort((a, b) => +a.label - b.label);
        return {
            containerId: 'container-for-histogram',
            width: 450,
            height: 50,
            colours: {
                top: '#7091B3',
                bottom: '#96c2f2',
                accent: '#2F528B',
            },
            margin: {
                left: 30,
                right: 0,
                top: 10,
                bottom: 45
            },
            axis: {
                yAxis: {
                    show: true,
                    // tickAmount: 3
                    values: [0, 5, 20, 60]
                }
            },
            items,
        };
    }
    setValue(value, update = false) {
        this.value = value;
        this.isUpdate = update;
        if (update) {
            const { links } = this.input;
            const updatedLinks = links.map((link) => (Object.assign(Object.assign({}, link), { classes: this.value && (this.value === link.payload) ? ACTIVE_CLASS : '' })));
            this.update(Object.assign(Object.assign({}, this.input), { links: updatedLinks }));
        }
    }
    clear() {
        this.value = '';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZXQtaGlzdG9ncmFtLmRzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG43LWZyb250ZW5kL2JvaWxlcnBsYXRlLyIsInNvdXJjZXMiOlsibGliL211cnVjYS9kYXRhLXNvdXJjZXMvZmFjZXRzL2ZhY2V0LWhpc3RvZ3JhbS5kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHL0MsTUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDO0FBSWpDLE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxVQUFVO0lBQWhEOztRQUdFLFVBQUssR0FBZ0IsRUFBRSxDQUFDO1FBRXhCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUEwRGpCLGFBQVEsR0FBRyxHQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUszQyxDQUFDO0lBN0RXLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRTtRQUMzQiwyQ0FBMkM7UUFDM0MsdUNBQXVDO1FBQ3ZDLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDakMsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2hCLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTztZQUNuQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNsQixPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPO2dCQUMzQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJO2FBQ3ZCLENBQUMsQ0FBQyxDQUFDLFNBQVM7U0FDZCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXZDLE9BQU87WUFDTCxXQUFXLEVBQUUseUJBQXlCO1lBQ3RDLEtBQUssRUFBRSxHQUFHO1lBQ1YsTUFBTSxFQUFFLEVBQUU7WUFDVixPQUFPLEVBQUU7Z0JBQ1AsR0FBRyxFQUFFLFNBQVM7Z0JBQ2QsTUFBTSxFQUFFLFNBQVM7Z0JBQ2pCLE1BQU0sRUFBRSxTQUFTO2FBQ2xCO1lBQ0QsTUFBTSxFQUFFO2dCQUNOLElBQUksRUFBRSxFQUFFO2dCQUNSLEtBQUssRUFBRSxDQUFDO2dCQUNSLEdBQUcsRUFBRSxFQUFFO2dCQUNQLE1BQU0sRUFBRSxFQUFFO2FBQ1g7WUFDRCxJQUFJLEVBQUU7Z0JBQ0osS0FBSyxFQUFFO29CQUNMLElBQUksRUFBRSxJQUFJO29CQUNWLGdCQUFnQjtvQkFDaEIsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO2lCQUN2QjthQUNGO1lBQ0QsS0FBSztTQUNOLENBQUM7SUFDSixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLEdBQUcsS0FBSztRQUM1QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztRQUV2QixJQUFJLE1BQU0sRUFBRTtZQUNWLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQzdCLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLGlDQUNwQyxJQUFJLEtBQ1AsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQ3hFLENBQUMsQ0FBQztZQUNKLElBQUksQ0FBQyxNQUFNLGlDQUNOLElBQUksQ0FBQyxLQUFLLEtBQ2IsS0FBSyxFQUFFLFlBQVksSUFDbkIsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUlELEtBQUs7UUFDSCxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNsQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIaXN0b2dyYW1SYW5nZURhdGEgfSBmcm9tICdAbjctZnJvbnRlbmQvY29tcG9uZW50cyc7XHJcbmltcG9ydCB7IERhdGFTb3VyY2UgfSBmcm9tICdAbjctZnJvbnRlbmQvY29yZSc7XHJcbmltcG9ydCB7IEZhY2V0RGF0YVNvdXJjZSB9IGZyb20gJy4vZmFjZXQtZGF0YXNvdXJjZSc7XHJcblxyXG5jb25zdCBBQ1RJVkVfQ0xBU1MgPSAnaXMtYWN0aXZlJztcclxuXHJcbnR5cGUgRkFDRVRfVkFMVUUgPSBzdHJpbmc7XHJcblxyXG5leHBvcnQgY2xhc3MgRmFjZXRIaXN0b2dyYW1EUyBleHRlbmRzIERhdGFTb3VyY2UgaW1wbGVtZW50cyBGYWNldERhdGFTb3VyY2Uge1xyXG4gIGlkOiBzdHJpbmc7XHJcblxyXG4gIHZhbHVlOiBGQUNFVF9WQUxVRSA9ICcnO1xyXG5cclxuICBpc1VwZGF0ZSA9IGZhbHNlO1xyXG5cclxuICBwcm90ZWN0ZWQgdHJhbnNmb3JtKHsgbGlua3MgfSk6IEhpc3RvZ3JhbVJhbmdlRGF0YSB7XHJcbiAgICAvLyBSZW1hcCB0aGUgcmVzcG9uc2UgdmFsdWVzIGluIHRoZSBjb3JyZWN0XHJcbiAgICAvLyBmb3JtYXQgZm9yIGhpc3RvZ3JhbS1yYW5nZS1jb21wb25lbnRcclxuICAgIGNvbnN0IGl0ZW1zID0gbGlua3MubWFwKChsaW5rKSA9PiAoe1xyXG4gICAgICBsYWJlbDogbGluay50ZXh0LFxyXG4gICAgICB2YWx1ZTogbGluay5jb3VudGVyLFxyXG4gICAgICBwYXlsb2FkOiBsaW5rLnBheWxvYWQsXHJcbiAgICAgIHJhbmdlOiBsaW5rLnJhbmdlID8ge1xyXG4gICAgICAgIHBheWxvYWQ6IGxpbmsucmFuZ2UucGF5bG9hZCxcclxuICAgICAgICBsYWJlbDogbGluay5yYW5nZS50ZXh0XHJcbiAgICAgIH0gOiB1bmRlZmluZWQsXHJcbiAgICB9KSkuc29ydCgoYSwgYikgPT4gK2EubGFiZWwgLSBiLmxhYmVsKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBjb250YWluZXJJZDogJ2NvbnRhaW5lci1mb3ItaGlzdG9ncmFtJyxcclxuICAgICAgd2lkdGg6IDQ1MCxcclxuICAgICAgaGVpZ2h0OiA1MCxcclxuICAgICAgY29sb3Vyczoge1xyXG4gICAgICAgIHRvcDogJyM3MDkxQjMnLFxyXG4gICAgICAgIGJvdHRvbTogJyM5NmMyZjInLFxyXG4gICAgICAgIGFjY2VudDogJyMyRjUyOEInLFxyXG4gICAgICB9LFxyXG4gICAgICBtYXJnaW46IHtcclxuICAgICAgICBsZWZ0OiAzMCxcclxuICAgICAgICByaWdodDogMCxcclxuICAgICAgICB0b3A6IDEwLFxyXG4gICAgICAgIGJvdHRvbTogNDVcclxuICAgICAgfSxcclxuICAgICAgYXhpczoge1xyXG4gICAgICAgIHlBeGlzOiB7XHJcbiAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgLy8gdGlja0Ftb3VudDogM1xyXG4gICAgICAgICAgdmFsdWVzOiBbMCwgNSwgMjAsIDYwXVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgaXRlbXMsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc2V0VmFsdWUodmFsdWUsIHVwZGF0ZSA9IGZhbHNlKSB7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICB0aGlzLmlzVXBkYXRlID0gdXBkYXRlO1xyXG5cclxuICAgIGlmICh1cGRhdGUpIHtcclxuICAgICAgY29uc3QgeyBsaW5rcyB9ID0gdGhpcy5pbnB1dDtcclxuICAgICAgY29uc3QgdXBkYXRlZExpbmtzID0gbGlua3MubWFwKChsaW5rKSA9PiAoe1xyXG4gICAgICAgIC4uLmxpbmssXHJcbiAgICAgICAgY2xhc3NlczogdGhpcy52YWx1ZSAmJiAodGhpcy52YWx1ZSA9PT0gbGluay5wYXlsb2FkKSA/IEFDVElWRV9DTEFTUyA6ICcnXHJcbiAgICAgIH0pKTtcclxuICAgICAgdGhpcy51cGRhdGUoe1xyXG4gICAgICAgIC4uLnRoaXMuaW5wdXQsXHJcbiAgICAgICAgbGlua3M6IHVwZGF0ZWRMaW5rc1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFZhbHVlID0gKCk6IEZBQ0VUX1ZBTFVFID0+IHRoaXMudmFsdWU7XHJcblxyXG4gIGNsZWFyKCkge1xyXG4gICAgdGhpcy52YWx1ZSA9ICcnO1xyXG4gIH1cclxufVxyXG4iXX0=