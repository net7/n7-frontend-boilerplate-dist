import { DataSource } from '@n7-frontend/core';
import 'leaflet.markercluster';
import { Subject } from 'rxjs';
const ACTIVE_CLASS = 'is-active';
const MARKER_ICON = L.icon({
    iconUrl: '/assets/pin.png',
    iconSize: [30, 45.5],
    popupAnchor: [0, -25],
    className: 'marker-icon'
});
const MARKER_ICON_UNAVAILABLE = L.icon({
    iconUrl: '/assets/pin-unavailable.png',
    iconSize: [30, 45.5],
    popupAnchor: [0, -25],
    className: 'marker-icon'
});
const MARKER_ICON_SELECTED = L.icon({
    iconUrl: '/assets/pin-selected.png',
    iconSize: [30, 45.5],
    popupAnchor: [0, -25],
    className: 'marker-icon-selected'
});
export class FacetMapDS extends DataSource {
    constructor() {
        super(...arguments);
        this.value = [];
        this.markerEvents$ = new Subject();
        this.isUpdate = false;
        this.getIcon = (id, counter) => {
            if (this.value.includes(id))
                return MARKER_ICON_SELECTED;
            if (counter > 0)
                return MARKER_ICON;
            return MARKER_ICON_UNAVAILABLE;
        };
        this.getValue = () => this.value;
    }
    transform({ links }) {
        const markers = links
            .filter((d) => { var _a, _b; return ((_a = d.args) === null || _a === void 0 ? void 0 : _a.lat) && ((_b = d.args) === null || _b === void 0 ? void 0 : _b.lon); })
            .map((d) => ({
            coords: [+d.args.lat, +d.args.lon],
            template: d.text,
            title: d.text,
            id: d.payload,
            slug: d.payload,
            counter: d.counter,
        }));
        return {
            containerId: 'map-canvas',
            tileLayers: [{
                    url: 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png',
                    options: {
                        attribution: 'Hello, world',
                    },
                }],
            initialView: {
                center: [46.49, 11.33],
                zoom: 8
            },
            _setInstance: (map) => {
                this.mapInstance = map;
                this.buildMarkers(markers);
            },
        };
    }
    /**
     * Builds markers with a custom icon and adds them to the map.
     * @param markers an array of markers
     */
    buildMarkers(markers) {
        if (!markers)
            return;
        // remove all existing markers
        if (this.markerLayer) {
            this.markerLayer.clearLayers();
            this.mapInstance.removeLayer(this.markerLayer);
        }
        const markerGroup = L.markerClusterGroup();
        markers.forEach(({ coords, template, id, slug, counter }) => {
            // create custom icon marker
            const newMarker = L.marker(coords, { icon: this.getIcon(id, counter) });
            if (id && slug) {
                newMarker.id = id;
                newMarker.counter = counter;
                newMarker.slug = slug;
            }
            newMarker
                // add the marker to the group
                .addTo(markerGroup)
                // add the on-click tooltip
                .bindPopup(template);
            newMarker.on('click', ({ target }) => {
                this.markerEvents$.next({
                    type: 'marker.click',
                    id: target.id
                });
            });
            newMarker.on('mouseover', ({ target }) => {
                target.openPopup();
            });
            newMarker.on('mouseout', ({ target }) => {
                target.closePopup();
            });
        });
        // add the markers to the map instance
        this.mapInstance.addLayer(markerGroup);
        // update the marker layer instance
        this.markerLayer = markerGroup;
    }
    setValue(value, update = false) {
        this.value = value;
        this.isUpdate = update;
        if (update && this.input) {
            const { links } = this.input;
            const updatedLinks = links.map((link) => (Object.assign(Object.assign({}, link), { classes: this.value.includes(link.payload) ? ACTIVE_CLASS : '' })));
            // update marker icons
            if (this.markerLayer) {
                this.markerLayer.eachLayer((marker) => {
                    var _a;
                    const { id } = marker;
                    const counter = ((_a = links.find(({ payload }) => payload === id)) === null || _a === void 0 ? void 0 : _a.counter) || 0;
                    marker.getPopup()._source.setIcon(this.getIcon(id, counter));
                });
            }
            // ---
            this.update(Object.assign(Object.assign({}, this.input), { links: updatedLinks }));
        }
    }
    toggleValue(value) {
        const exists = this.value.includes(value);
        if (!exists) {
            this.value.push(value);
        }
        else if (exists) {
            this.value.splice(this.value.indexOf(value), 1);
        }
        // update
        this.setValue(this.value, true);
    }
    clear() {
        this.value = [];
    }
}
//# sourceMappingURL=data:application/json;base64,