import { DataSource } from '@n7-frontend/core';
import 'leaflet.markercluster';
import { Subject } from 'rxjs';
const ACTIVE_CLASS = 'is-active';
const MARKER_ICON = L.icon({
    iconUrl: '/assets/pin.png',
    iconSize: [16, 25],
    popupAnchor: [0, -15],
    className: 'marker-icon'
});
const MARKER_ICON_UNAVAILABLE = L.icon({
    iconUrl: '/assets/pin-unavailable.png',
    iconSize: [16, 25],
    popupAnchor: [0, -15],
    className: 'marker-icon'
});
const MARKER_ICON_SELECTED = L.icon({
    iconUrl: '/assets/pin-selected.png',
    iconSize: [16, 25],
    popupAnchor: [0, -15],
    className: 'marker-icon-selected'
});
export class FacetMapDS extends DataSource {
    constructor() {
        super(...arguments);
        this.value = [];
        this.markerEvents$ = new Subject();
        this.isUpdate = false;
        this.getIcon = (id, counter) => {
            if (this.value.includes(id))
                return MARKER_ICON_SELECTED;
            if (counter > 0)
                return MARKER_ICON;
            return MARKER_ICON_UNAVAILABLE;
        };
        this.getValue = () => this.value;
    }
    transform({ links }) {
        const markers = [];
        links
            .filter((d) => { var _a, _b; return ((_a = d.args) === null || _a === void 0 ? void 0 : _a.lat) && ((_b = d.args) === null || _b === void 0 ? void 0 : _b.lon); })
            .forEach((d) => {
            // if a link has more than one corresponding marker
            if (Array.isArray(d.args.lat)) {
                d.args.lat.forEach((element, i) => {
                    markers.push({
                        coords: [+d.args.lat[i], +d.args.lon[i]],
                        template: d.text,
                        title: d.text,
                        id: d.payload,
                        slug: d.payload,
                        counter: d.counter,
                    });
                });
            }
            else {
                // if a link has only one marker
                markers.push({
                    coords: [+d.args.lat, +d.args.lon],
                    template: d.text,
                    title: d.text,
                    id: d.payload,
                    slug: d.payload,
                    counter: d.counter,
                });
            }
        });
        return {
            containerId: 'map-canvas',
            libOptions: {
                attributionControl: false,
            },
            tileLayers: [{
                    url: 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png',
                    options: null
                }],
            initialView: {
                center: [46.06, 11.21],
                zoom: 9
            },
            _setInstance: (map) => {
                this.mapInstance = map;
                this.buildMarkers(markers);
            },
        };
    }
    /**
     * Builds markers with a custom icon and adds them to the map.
     * @param markers an array of markers
     */
    buildMarkers(markers) {
        if (!markers)
            return;
        // remove all existing markers
        if (this.markerLayer) {
            this.markerLayer.clearLayers();
            this.mapInstance.removeLayer(this.markerLayer);
        }
        const markerGroup = L.markerClusterGroup({
            maxClusterRadius: 10,
            disableClusteringAtZoom: 8
        });
        markers.forEach(({ coords, template, id, slug, counter }) => {
            // create custom icon marker
            const newMarker = L.marker(coords, { icon: this.getIcon(id, counter) });
            if (id && slug) {
                newMarker.id = id;
                newMarker.counter = counter;
                newMarker.slug = slug;
            }
            newMarker
                // add the marker to the group
                .addTo(markerGroup)
                // add the on-click tooltip
                .bindPopup(template);
            newMarker.on('click', ({ target }) => {
                this.markerEvents$.next({
                    type: 'marker.click',
                    id: target.id
                });
            });
            newMarker.on('mouseover', ({ target }) => {
                target.openPopup();
            });
            newMarker.on('mouseout', ({ target }) => {
                target.closePopup();
            });
        });
        // add the markers to the map instance
        this.mapInstance.addLayer(markerGroup);
        // update the marker layer instance
        this.markerLayer = markerGroup;
    }
    setValue(value, update = false) {
        // prevent the search service from assigning a plain string
        // eslint-disable-next-line no-param-reassign
        if (typeof value === 'string')
            value = [value];
        if (this.value !== value) {
            this.value = value;
        }
        this.isUpdate = update || this.value === [];
        if (update && this.input) {
            const { links } = this.input;
            const updatedLinks = links.map((link) => (Object.assign(Object.assign({}, link), { classes: this.value.includes(link.payload) ? ACTIVE_CLASS : '' })));
            // update marker icons
            if (this.markerLayer) {
                this.markerLayer.eachLayer((marker) => {
                    var _a;
                    const { id } = marker;
                    const counter = ((_a = links.find(({ payload }) => payload === id)) === null || _a === void 0 ? void 0 : _a.counter) || 0;
                    marker.getPopup()._source.setIcon(this.getIcon(id, counter));
                });
            }
            // ---
            this.update(Object.assign(Object.assign({}, this.input), { links: updatedLinks }));
        }
    }
    toggleValue(value) {
        const exists = this.value.includes(value);
        if (!exists) {
            this.value.push(value);
        }
        else if (exists) {
            this.value.splice(this.value.indexOf(value), 1);
        }
        // update
        this.setValue(this.value, true);
    }
    clear() {
        this.value = [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZXQtbWFwLmRzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG43LWZyb250ZW5kL2JvaWxlcnBsYXRlLyIsInNvdXJjZXMiOlsibGliL211cnVjYS9kYXRhLXNvdXJjZXMvZmFjZXRzL2ZhY2V0LW1hcC5kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFL0MsT0FBTyx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBTS9CLE1BQU0sWUFBWSxHQUFHLFdBQVcsQ0FBQztBQXlCakMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN6QixPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDbEIsV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ3JCLFNBQVMsRUFBRSxhQUFhO0NBQ3pCLENBQUMsQ0FBQztBQUVILE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNyQyxPQUFPLEVBQUUsNkJBQTZCO0lBQ3RDLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDbEIsV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ3JCLFNBQVMsRUFBRSxhQUFhO0NBQ3pCLENBQUMsQ0FBQztBQUVILE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNsQyxPQUFPLEVBQUUsMEJBQTBCO0lBQ25DLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDbEIsV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ3JCLFNBQVMsRUFBRSxzQkFBc0I7Q0FDbEMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxPQUFPLFVBQVcsU0FBUSxV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QUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNqRDtRQUVELFNBQVM7UUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUlELEtBQUs7UUFDSCxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNsQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhU291cmNlIH0gZnJvbSAnQG43LWZyb250ZW5kL2NvcmUnO1xyXG5pbXBvcnQgeyBNYXBEYXRhLCBNYXJrZXJEYXRhIH0gZnJvbSAnQG43LWZyb250ZW5kL2NvbXBvbmVudHMnO1xyXG5pbXBvcnQgJ2xlYWZsZXQubWFya2VyY2x1c3Rlcic7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgRmFjZXREYXRhU291cmNlIH0gZnJvbSAnLi9mYWNldC1kYXRhc291cmNlJztcclxuLy8gbGVhZmxldCBpcyBhbHJlYWR5IHByZXNlbnQgaW4gdGhlIHdpbmRvdyxcclxuLy8gYSBkb3VibGUgaW1wb3J0IHJlc3VsdHMgaW4gZXJyb3JzIHdpdGggdG9vbHRpcHMuXHJcbmRlY2xhcmUgY29uc3QgTDtcclxuXHJcbmNvbnN0IEFDVElWRV9DTEFTUyA9ICdpcy1hY3RpdmUnO1xyXG5cclxudHlwZSBGQUNFVF9WQUxVRSA9IHN0cmluZ1tdO1xyXG5cclxudHlwZSBDYWRhc3RyYWxVbml0ID0ge1xyXG4gIHRleHQ6IHN0cmluZztcclxuICBwYXlsb2FkOiBzdHJpbmc7XHJcbiAgY291bnRlcjogbnVtYmVyO1xyXG4gIGFyZ3M6IHtcclxuICAgIGxhdDogc3RyaW5nIHwgbnVsbDtcclxuICAgIGxvbjogc3RyaW5nIHwgbnVsbDtcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE1hcmtlckV2ZW50IHtcclxuICB0eXBlOiBzdHJpbmc7XHJcbiAgaWQ6IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIE1hcmtlcldpdGhJRCBleHRlbmRzIE1hcmtlckRhdGEge1xyXG4gIGlkPzogc3RyaW5nO1xyXG4gIGNvdW50ZXI6IG51bWJlcjtcclxuICBzbHVnOiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IE1BUktFUl9JQ09OID0gTC5pY29uKHtcclxuICBpY29uVXJsOiAnL2Fzc2V0cy9waW4ucG5nJyxcclxuICBpY29uU2l6ZTogWzE2LCAyNV0sXHJcbiAgcG9wdXBBbmNob3I6IFswLCAtMTVdLFxyXG4gIGNsYXNzTmFtZTogJ21hcmtlci1pY29uJ1xyXG59KTtcclxuXHJcbmNvbnN0IE1BUktFUl9JQ09OX1VOQVZBSUxBQkxFID0gTC5pY29uKHtcclxuICBpY29uVXJsOiAnL2Fzc2V0cy9waW4tdW5hdmFpbGFibGUucG5nJyxcclxuICBpY29uU2l6ZTogWzE2LCAyNV0sXHJcbiAgcG9wdXBBbmNob3I6IFswLCAtMTVdLFxyXG4gIGNsYXNzTmFtZTogJ21hcmtlci1pY29uJ1xyXG59KTtcclxuXHJcbmNvbnN0IE1BUktFUl9JQ09OX1NFTEVDVEVEID0gTC5pY29uKHtcclxuICBpY29uVXJsOiAnL2Fzc2V0cy9waW4tc2VsZWN0ZWQucG5nJyxcclxuICBpY29uU2l6ZTogWzE2LCAyNV0sXHJcbiAgcG9wdXBBbmNob3I6IFswLCAtMTVdLFxyXG4gIGNsYXNzTmFtZTogJ21hcmtlci1pY29uLXNlbGVjdGVkJ1xyXG59KTtcclxuXHJcbmV4cG9ydCBjbGFzcyBGYWNldE1hcERTIGV4dGVuZHMgRGF0YVNvdXJjZSBpbXBsZW1lbnRzIEZhY2V0RGF0YVNvdXJjZSB7XHJcbiAgaWQ6IHN0cmluZztcclxuXHJcbiAgdmFsdWU6IEZBQ0VUX1ZBTFVFID0gW107XHJcblxyXG4gIG1hcEluc3RhbmNlO1xyXG5cclxuICBtYXJrZXJMYXllcjtcclxuXHJcbiAgbWFya2VyRXZlbnRzJCA9IG5ldyBTdWJqZWN0PE1hcmtlckV2ZW50PigpO1xyXG5cclxuICBpc1VwZGF0ZSA9IGZhbHNlO1xyXG5cclxuICBwcm90ZWN0ZWQgdHJhbnNmb3JtKHsgbGlua3MgfTogeyBsaW5rczogQ2FkYXN0cmFsVW5pdFtdIH0pOiBNYXBEYXRhIHtcclxuICAgIGNvbnN0IG1hcmtlcnMgPSBbXTtcclxuICAgIGxpbmtzXHJcbiAgICAgIC5maWx0ZXIoKGQpID0+IGQuYXJncz8ubGF0ICYmIGQuYXJncz8ubG9uKVxyXG4gICAgICAuZm9yRWFjaCgoZCkgPT4ge1xyXG4gICAgICAgIC8vIGlmIGEgbGluayBoYXMgbW9yZSB0aGFuIG9uZSBjb3JyZXNwb25kaW5nIG1hcmtlclxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGQuYXJncy5sYXQpKSB7XHJcbiAgICAgICAgICBkLmFyZ3MubGF0LmZvckVhY2goKGVsZW1lbnQsIGkpID0+IHtcclxuICAgICAgICAgICAgbWFya2Vycy5wdXNoKHtcclxuICAgICAgICAgICAgICBjb29yZHM6IFsrZC5hcmdzLmxhdFtpXSwgK2QuYXJncy5sb25baV1dIGFzIFtudW1iZXIsIG51bWJlcl0sXHJcbiAgICAgICAgICAgICAgdGVtcGxhdGU6IGQudGV4dCxcclxuICAgICAgICAgICAgICB0aXRsZTogZC50ZXh0LFxyXG4gICAgICAgICAgICAgIGlkOiBkLnBheWxvYWQsXHJcbiAgICAgICAgICAgICAgc2x1ZzogZC5wYXlsb2FkLFxyXG4gICAgICAgICAgICAgIGNvdW50ZXI6IGQuY291bnRlcixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gaWYgYSBsaW5rIGhhcyBvbmx5IG9uZSBtYXJrZXJcclxuICAgICAgICAgIG1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgIGNvb3JkczogWytkLmFyZ3MubGF0LCArZC5hcmdzLmxvbl0gYXMgW251bWJlciwgbnVtYmVyXSxcclxuICAgICAgICAgICAgdGVtcGxhdGU6IGQudGV4dCxcclxuICAgICAgICAgICAgdGl0bGU6IGQudGV4dCxcclxuICAgICAgICAgICAgaWQ6IGQucGF5bG9hZCxcclxuICAgICAgICAgICAgc2x1ZzogZC5wYXlsb2FkLFxyXG4gICAgICAgICAgICBjb3VudGVyOiBkLmNvdW50ZXIsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY29udGFpbmVySWQ6ICdtYXAtY2FudmFzJyxcclxuICAgICAgbGliT3B0aW9uczoge1xyXG4gICAgICAgIGF0dHJpYnV0aW9uQ29udHJvbDogZmFsc2UsXHJcbiAgICAgIH0sXHJcbiAgICAgIHRpbGVMYXllcnM6IFt7XHJcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9jYXJ0b2RiLWJhc2VtYXBzLXtzfS5nbG9iYWwuc3NsLmZhc3RseS5uZXQvbGlnaHRfYWxsL3t6fS97eH0ve3l9LnBuZycsXHJcbiAgICAgICAgb3B0aW9uczogbnVsbFxyXG4gICAgICB9XSxcclxuICAgICAgaW5pdGlhbFZpZXc6IHtcclxuICAgICAgICBjZW50ZXI6IFs0Ni4wNiwgMTEuMjFdLFxyXG4gICAgICAgIHpvb206IDlcclxuICAgICAgfSxcclxuICAgICAgX3NldEluc3RhbmNlOiAobWFwKSA9PiB7XHJcbiAgICAgICAgdGhpcy5tYXBJbnN0YW5jZSA9IG1hcDtcclxuICAgICAgICB0aGlzLmJ1aWxkTWFya2VycyhtYXJrZXJzKTtcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBCdWlsZHMgbWFya2VycyB3aXRoIGEgY3VzdG9tIGljb24gYW5kIGFkZHMgdGhlbSB0byB0aGUgbWFwLlxyXG4gICAqIEBwYXJhbSBtYXJrZXJzIGFuIGFycmF5IG9mIG1hcmtlcnNcclxuICAgKi9cclxuICBwcml2YXRlIGJ1aWxkTWFya2VycyhtYXJrZXJzOiBNYXJrZXJXaXRoSURbXSkge1xyXG4gICAgaWYgKCFtYXJrZXJzKSByZXR1cm47XHJcbiAgICAvLyByZW1vdmUgYWxsIGV4aXN0aW5nIG1hcmtlcnNcclxuICAgIGlmICh0aGlzLm1hcmtlckxheWVyKSB7XHJcbiAgICAgIHRoaXMubWFya2VyTGF5ZXIuY2xlYXJMYXllcnMoKTtcclxuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5yZW1vdmVMYXllcih0aGlzLm1hcmtlckxheWVyKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG1hcmtlckdyb3VwID0gTC5tYXJrZXJDbHVzdGVyR3JvdXAoXHJcbiAgICAgIHtcclxuICAgICAgICBtYXhDbHVzdGVyUmFkaXVzOiAxMCxcclxuICAgICAgICBkaXNhYmxlQ2x1c3RlcmluZ0F0Wm9vbTogOFxyXG4gICAgICB9XHJcbiAgICApO1xyXG4gICAgbWFya2Vycy5mb3JFYWNoKCh7XHJcbiAgICAgIGNvb3JkcywgdGVtcGxhdGUsIGlkLCBzbHVnLCBjb3VudGVyXHJcbiAgICB9KSA9PiB7XHJcbiAgICAgIC8vIGNyZWF0ZSBjdXN0b20gaWNvbiBtYXJrZXJcclxuICAgICAgY29uc3QgbmV3TWFya2VyID0gTC5tYXJrZXIoY29vcmRzLCB7IGljb246IHRoaXMuZ2V0SWNvbihpZCwgY291bnRlcikgfSk7XHJcbiAgICAgIGlmIChpZCAmJiBzbHVnKSB7XHJcbiAgICAgICAgbmV3TWFya2VyLmlkID0gaWQ7XHJcbiAgICAgICAgbmV3TWFya2VyLmNvdW50ZXIgPSBjb3VudGVyO1xyXG4gICAgICAgIG5ld01hcmtlci5zbHVnID0gc2x1ZztcclxuICAgICAgfVxyXG4gICAgICBuZXdNYXJrZXJcclxuICAgICAgICAvLyBhZGQgdGhlIG1hcmtlciB0byB0aGUgZ3JvdXBcclxuICAgICAgICAuYWRkVG8obWFya2VyR3JvdXApXHJcbiAgICAgICAgLy8gYWRkIHRoZSBvbi1jbGljayB0b29sdGlwXHJcbiAgICAgICAgLmJpbmRQb3B1cCh0ZW1wbGF0ZSk7XHJcblxyXG4gICAgICBuZXdNYXJrZXIub24oJ2NsaWNrJywgKHsgdGFyZ2V0IH0pID0+IHtcclxuICAgICAgICB0aGlzLm1hcmtlckV2ZW50cyQubmV4dCh7XHJcbiAgICAgICAgICB0eXBlOiAnbWFya2VyLmNsaWNrJyxcclxuICAgICAgICAgIGlkOiB0YXJnZXQuaWRcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBuZXdNYXJrZXIub24oJ21vdXNlb3ZlcicsICh7IHRhcmdldCB9KSA9PiB7XHJcbiAgICAgICAgdGFyZ2V0Lm9wZW5Qb3B1cCgpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIG5ld01hcmtlci5vbignbW91c2VvdXQnLCAoeyB0YXJnZXQgfSkgPT4ge1xyXG4gICAgICAgIHRhcmdldC5jbG9zZVBvcHVwKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICAvLyBhZGQgdGhlIG1hcmtlcnMgdG8gdGhlIG1hcCBpbnN0YW5jZVxyXG4gICAgdGhpcy5tYXBJbnN0YW5jZS5hZGRMYXllcihtYXJrZXJHcm91cCk7XHJcbiAgICAvLyB1cGRhdGUgdGhlIG1hcmtlciBsYXllciBpbnN0YW5jZVxyXG4gICAgdGhpcy5tYXJrZXJMYXllciA9IG1hcmtlckdyb3VwO1xyXG4gIH1cclxuXHJcbiAgc2V0VmFsdWUodmFsdWU6IEZBQ0VUX1ZBTFVFLCB1cGRhdGUgPSBmYWxzZSkge1xyXG4gICAgLy8gcHJldmVudCB0aGUgc2VhcmNoIHNlcnZpY2UgZnJvbSBhc3NpZ25pbmcgYSBwbGFpbiBzdHJpbmdcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHZhbHVlID0gW3ZhbHVlXTtcclxuXHJcbiAgICBpZiAodGhpcy52YWx1ZSAhPT0gdmFsdWUpIHtcclxuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5pc1VwZGF0ZSA9IHVwZGF0ZSB8fCB0aGlzLnZhbHVlID09PSBbXTtcclxuXHJcbiAgICBpZiAodXBkYXRlICYmIHRoaXMuaW5wdXQpIHtcclxuICAgICAgY29uc3QgeyBsaW5rcyB9ID0gdGhpcy5pbnB1dDtcclxuICAgICAgY29uc3QgdXBkYXRlZExpbmtzID0gbGlua3MubWFwKChsaW5rOiBDYWRhc3RyYWxVbml0KSA9PiAoe1xyXG4gICAgICAgIC4uLmxpbmssXHJcbiAgICAgICAgY2xhc3NlczogdGhpcy52YWx1ZS5pbmNsdWRlcyhsaW5rLnBheWxvYWQpID8gQUNUSVZFX0NMQVNTIDogJydcclxuICAgICAgfSkpO1xyXG4gICAgICAvLyB1cGRhdGUgbWFya2VyIGljb25zXHJcbiAgICAgIGlmICh0aGlzLm1hcmtlckxheWVyKSB7XHJcbiAgICAgICAgdGhpcy5tYXJrZXJMYXllci5lYWNoTGF5ZXIoKG1hcmtlcikgPT4ge1xyXG4gICAgICAgICAgY29uc3QgeyBpZCB9ID0gbWFya2VyO1xyXG4gICAgICAgICAgY29uc3QgY291bnRlciA9IGxpbmtzLmZpbmQoKHsgcGF5bG9hZCB9KSA9PiBwYXlsb2FkID09PSBpZCk/LmNvdW50ZXIgfHwgMDtcclxuICAgICAgICAgIG1hcmtlci5nZXRQb3B1cCgpLl9zb3VyY2Uuc2V0SWNvbih0aGlzLmdldEljb24oaWQsIGNvdW50ZXIpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICAvLyAtLS1cclxuICAgICAgdGhpcy51cGRhdGUoe1xyXG4gICAgICAgIC4uLnRoaXMuaW5wdXQsXHJcbiAgICAgICAgbGlua3M6IHVwZGF0ZWRMaW5rc1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldEljb24gPSAoaWQ6IHN0cmluZywgY291bnRlcjogbnVtYmVyKSA9PiB7XHJcbiAgICBpZiAodGhpcy52YWx1ZS5pbmNsdWRlcyhpZCkpIHJldHVybiBNQVJLRVJfSUNPTl9TRUxFQ1RFRDtcclxuICAgIGlmIChjb3VudGVyID4gMCkgcmV0dXJuIE1BUktFUl9JQ09OO1xyXG4gICAgcmV0dXJuIE1BUktFUl9JQ09OX1VOQVZBSUxBQkxFO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlVmFsdWUodmFsdWU6IHN0cmluZykge1xyXG4gICAgY29uc3QgZXhpc3RzID0gdGhpcy52YWx1ZS5pbmNsdWRlcyh2YWx1ZSk7XHJcbiAgICBpZiAoIWV4aXN0cykge1xyXG4gICAgICB0aGlzLnZhbHVlLnB1c2godmFsdWUpO1xyXG4gICAgfSBlbHNlIGlmIChleGlzdHMpIHtcclxuICAgICAgdGhpcy52YWx1ZS5zcGxpY2UodGhpcy52YWx1ZS5pbmRleE9mKHZhbHVlKSwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdXBkYXRlXHJcbiAgICB0aGlzLnNldFZhbHVlKHRoaXMudmFsdWUsIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VmFsdWUgPSAoKTogRkFDRVRfVkFMVUUgPT4gdGhpcy52YWx1ZTtcclxuXHJcbiAgY2xlYXIoKSB7XHJcbiAgICB0aGlzLnZhbHVlID0gW107XHJcbiAgfVxyXG59XHJcbiJdfQ==