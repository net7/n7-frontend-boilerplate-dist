import { DataSource, _t } from '@n7-frontend/core';
export class MrBreadcrumbsDS extends DataSource {
    transform(data) {
        let items = [];
        if (Array.isArray(data) && data.length) {
            let { base } = this.options || {};
            base = Array.isArray(base) ? base : [];
            items = [
                ...base.map(({ link, title }) => ({
                    label: _t(title),
                    anchor: { href: link }
                })),
                ...data.map(({ link, title }) => ({
                    label: title,
                    anchor: { href: link }
                }))
            ];
        }
        // remove last link
        if (items.length) {
            items[items.length - 1].anchor = null;
        }
        return { items };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYnMuZHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbjctZnJvbnRlbmQvYm9pbGVycGxhdGUvIiwic291cmNlcyI6WyJsaWIvbXVydWNhL2RhdGEtc291cmNlcy9icmVhZGNydW1icy5kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBR25ELE1BQU0sT0FBTyxlQUFnQixTQUFRLFVBQVU7SUFDbkMsU0FBUyxDQUFDLElBQVM7UUFDM0IsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2YsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDdEMsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO1lBQ2xDLElBQUksR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUN2QyxLQUFLLEdBQUc7Z0JBQ04sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBQ2hDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDO29CQUNoQixNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO2lCQUN2QixDQUFDLENBQUM7Z0JBQ0gsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBQ2hDLEtBQUssRUFBRSxLQUFLO29CQUNaLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUU7aUJBQ3ZCLENBQUMsQ0FBQzthQUNKLENBQUM7U0FDSDtRQUVELG1CQUFtQjtRQUNuQixJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDaEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztTQUN2QztRQUNELE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUNuQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhU291cmNlLCBfdCB9IGZyb20gJ0BuNy1mcm9udGVuZC9jb3JlJztcclxuaW1wb3J0IHsgQnJlYWRjcnVtYnNEYXRhIH0gZnJvbSAnQG43LWZyb250ZW5kL2NvbXBvbmVudHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1yQnJlYWRjcnVtYnNEUyBleHRlbmRzIERhdGFTb3VyY2Uge1xyXG4gIHByb3RlY3RlZCB0cmFuc2Zvcm0oZGF0YTogYW55KTogQnJlYWRjcnVtYnNEYXRhIHtcclxuICAgIGxldCBpdGVtcyA9IFtdO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgJiYgZGF0YS5sZW5ndGgpIHtcclxuICAgICAgbGV0IHsgYmFzZSB9ID0gdGhpcy5vcHRpb25zIHx8IHt9O1xyXG4gICAgICBiYXNlID0gQXJyYXkuaXNBcnJheShiYXNlKSA/IGJhc2UgOiBbXTtcclxuICAgICAgaXRlbXMgPSBbXHJcbiAgICAgICAgLi4uYmFzZS5tYXAoKHsgbGluaywgdGl0bGUgfSkgPT4gKHtcclxuICAgICAgICAgIGxhYmVsOiBfdCh0aXRsZSksXHJcbiAgICAgICAgICBhbmNob3I6IHsgaHJlZjogbGluayB9XHJcbiAgICAgICAgfSkpLFxyXG4gICAgICAgIC4uLmRhdGEubWFwKCh7IGxpbmssIHRpdGxlIH0pID0+ICh7XHJcbiAgICAgICAgICBsYWJlbDogdGl0bGUsXHJcbiAgICAgICAgICBhbmNob3I6IHsgaHJlZjogbGluayB9XHJcbiAgICAgICAgfSkpXHJcbiAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmVtb3ZlIGxhc3QgbGlua1xyXG4gICAgaWYgKGl0ZW1zLmxlbmd0aCkge1xyXG4gICAgICBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXS5hbmNob3IgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgaXRlbXMgfTtcclxuICB9XHJcbn1cclxuIl19