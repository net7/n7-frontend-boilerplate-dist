import { DataSource, _t } from '@n7-frontend/core';
export class MrBreadcrumbsDS extends DataSource {
    transform(data) {
        if (!data)
            return null;
        let items = [];
        if (Array.isArray(data) && data.length) {
            let { base } = this.options || {};
            base = Array.isArray(base) ? base : [];
            items = [
                ...base.map(({ link, title }) => ({
                    label: _t(title),
                    anchor: { href: link }
                })),
                ...data.map(({ link, title }) => ({
                    label: title,
                    anchor: { href: link }
                }))
            ];
        }
        // remove last link
        if (items.length) {
            items[items.length - 1].anchor = null;
        }
        return { items };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYnMuZHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbjctZnJvbnRlbmQvYm9pbGVycGxhdGUvIiwic291cmNlcyI6WyJsaWIvbXVydWNhL2RhdGEtc291cmNlcy9icmVhZGNydW1icy5kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBR25ELE1BQU0sT0FBTyxlQUFnQixTQUFRLFVBQVU7SUFDbkMsU0FBUyxDQUFDLElBQVM7UUFDM0IsSUFBSSxDQUFDLElBQUk7WUFBRSxPQUFPLElBQUksQ0FBQztRQUN2QixJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUN0QyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7WUFDbEMsSUFBSSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3ZDLEtBQUssR0FBRztnQkFDTixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFDaEMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUM7b0JBQ2hCLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUU7aUJBQ3ZCLENBQUMsQ0FBQztnQkFDSCxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFDaEMsS0FBSyxFQUFFLEtBQUs7b0JBQ1osTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtpQkFDdkIsQ0FBQyxDQUFDO2FBQ0osQ0FBQztTQUNIO1FBRUQsbUJBQW1CO1FBQ25CLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNoQixLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQ3ZDO1FBQ0QsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQ25CLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFTb3VyY2UsIF90IH0gZnJvbSAnQG43LWZyb250ZW5kL2NvcmUnO1xyXG5pbXBvcnQgeyBCcmVhZGNydW1ic0RhdGEgfSBmcm9tICdAbjctZnJvbnRlbmQvY29tcG9uZW50cyc7XHJcblxyXG5leHBvcnQgY2xhc3MgTXJCcmVhZGNydW1ic0RTIGV4dGVuZHMgRGF0YVNvdXJjZSB7XHJcbiAgcHJvdGVjdGVkIHRyYW5zZm9ybShkYXRhOiBhbnkpOiBCcmVhZGNydW1ic0RhdGEge1xyXG4gICAgaWYgKCFkYXRhKSByZXR1cm4gbnVsbDtcclxuICAgIGxldCBpdGVtcyA9IFtdO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgJiYgZGF0YS5sZW5ndGgpIHtcclxuICAgICAgbGV0IHsgYmFzZSB9ID0gdGhpcy5vcHRpb25zIHx8IHt9O1xyXG4gICAgICBiYXNlID0gQXJyYXkuaXNBcnJheShiYXNlKSA/IGJhc2UgOiBbXTtcclxuICAgICAgaXRlbXMgPSBbXHJcbiAgICAgICAgLi4uYmFzZS5tYXAoKHsgbGluaywgdGl0bGUgfSkgPT4gKHtcclxuICAgICAgICAgIGxhYmVsOiBfdCh0aXRsZSksXHJcbiAgICAgICAgICBhbmNob3I6IHsgaHJlZjogbGluayB9XHJcbiAgICAgICAgfSkpLFxyXG4gICAgICAgIC4uLmRhdGEubWFwKCh7IGxpbmssIHRpdGxlIH0pID0+ICh7XHJcbiAgICAgICAgICBsYWJlbDogdGl0bGUsXHJcbiAgICAgICAgICBhbmNob3I6IHsgaHJlZjogbGluayB9XHJcbiAgICAgICAgfSkpXHJcbiAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmVtb3ZlIGxhc3QgbGlua1xyXG4gICAgaWYgKGl0ZW1zLmxlbmd0aCkge1xyXG4gICAgICBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXS5hbmNob3IgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgaXRlbXMgfTtcclxuICB9XHJcbn1cclxuIl19