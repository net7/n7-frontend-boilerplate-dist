import { DataSource, _t } from '@n7-frontend/core';
export class MrMetadataDS extends DataSource {
    constructor() {
        super(...arguments);
        /** Test if a string is a valid URL */
        this.isUrl = /^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w.-]+)+[\w\-._~:/?#[\]@!$&'()*+,;=.]+$/;
        /** Turn a string into an anchor element */
        this.toUrl = (string) => `<a href="${string}" target="_blank">${string}<a>`;
    }
    transform(data) {
        const { hideLabels } = this.options;
        const { group } = data;
        if (!(group || []).length) {
            return null;
        }
        const result = { group: [] };
        group.forEach(({ items }) => {
            items.forEach(({ label, value }) => {
                const itemLabel = label && !hideLabels ? label : null;
                if (Array.isArray(value)) {
                    result.group.push({
                        group: [Object.assign({ title: _t(itemLabel) }, this.getItemGroup(value))]
                    });
                }
                else {
                    result.group.push({
                        group: [{
                                items: value ? [{
                                        label: _t(itemLabel),
                                        value: this.getItemValue(value)
                                    }] : []
                            }]
                    });
                }
            });
        });
        return result;
    }
    getItemGroup(value) {
        if (Array.isArray(value) && Array.isArray(value[0])) {
            return {
                group: value.map((val) => (Object.assign({}, this.getItemGroup(val))))
            };
        }
        return {
            items: value
                .filter((childItem) => !!childItem.value)
                .map((childItem) => ({
                label: _t(childItem.label),
                value: this.getItemValue(childItem.value)
            }))
        };
    }
    getItemValue(value) {
        return this.isUrl.test(value) ? this.toUrl(value) : value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGEuZHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbjctZnJvbnRlbmQvYm9pbGVycGxhdGUvIiwic291cmNlcyI6WyJsaWIvbXVydWNhL2RhdGEtc291cmNlcy9tZXRhZGF0YS5kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRW5ELE1BQU0sT0FBTyxZQUFhLFNBQVEsVUFBVTtJQUE1Qzs7UUFDRSxzQ0FBc0M7UUFDdEMsVUFBSyxHQUFHLHlFQUF5RSxDQUFBO1FBRWpGLDJDQUEyQztRQUMzQyxVQUFLLEdBQUcsQ0FBQyxNQUFjLEVBQUUsRUFBRSxDQUFDLFlBQVksTUFBTSxxQkFBcUIsTUFBTSxLQUFLLENBQUE7SUF5RGhGLENBQUM7SUF2RFcsU0FBUyxDQUFDLElBQVM7UUFDM0IsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDcEMsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQztRQUV2QixJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxNQUFNLE1BQU0sR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUM3QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBQzFCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO2dCQUNqQyxNQUFNLFNBQVMsR0FBRyxLQUFLLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUN0RCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ3hCLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO3dCQUNoQixLQUFLLEVBQUUsaUJBQ0wsS0FBSyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFDakIsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFDM0I7cUJBQ0gsQ0FBQyxDQUFDO2lCQUNKO3FCQUFNO29CQUNMLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO3dCQUNoQixLQUFLLEVBQUUsQ0FBQztnQ0FDTixLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dDQUNkLEtBQUssRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDO3dDQUNwQixLQUFLLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7cUNBQ2hDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTs2QkFDUixDQUFDO3FCQUNILENBQUMsQ0FBQztpQkFDSjtZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRU8sWUFBWSxDQUFDLEtBQUs7UUFDeEIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDbkQsT0FBTztnQkFDTCxLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsbUJBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQ3pCLENBQUM7YUFDSixDQUFDO1NBQ0g7UUFDRCxPQUFPO1lBQ0wsS0FBSyxFQUFFLEtBQUs7aUJBQ1QsTUFBTSxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztpQkFDeEMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNuQixLQUFLLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7Z0JBQzFCLEtBQUssRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7YUFDMUMsQ0FBQyxDQUFDO1NBQ04sQ0FBQztJQUNKLENBQUM7SUFFTyxZQUFZLENBQUMsS0FBSztRQUN4QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDNUQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YVNvdXJjZSwgX3QgfSBmcm9tICdAbjctZnJvbnRlbmQvY29yZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTXJNZXRhZGF0YURTIGV4dGVuZHMgRGF0YVNvdXJjZSB7XHJcbiAgLyoqIFRlc3QgaWYgYSBzdHJpbmcgaXMgYSB2YWxpZCBVUkwgKi9cclxuICBpc1VybCA9IC9eKD86aHR0cChzKT86XFwvXFwvKT9bXFx3Li1dKyg/OlxcLltcXHcuLV0rKStbXFx3XFwtLl9+Oi8/I1tcXF1AISQmJygpKissOz0uXSskL1xyXG5cclxuICAvKiogVHVybiBhIHN0cmluZyBpbnRvIGFuIGFuY2hvciBlbGVtZW50ICovXHJcbiAgdG9VcmwgPSAoc3RyaW5nOiBzdHJpbmcpID0+IGA8YSBocmVmPVwiJHtzdHJpbmd9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHtzdHJpbmd9PGE+YFxyXG5cclxuICBwcm90ZWN0ZWQgdHJhbnNmb3JtKGRhdGE6IGFueSk6IGFueSB7XHJcbiAgICBjb25zdCB7IGhpZGVMYWJlbHMgfSA9IHRoaXMub3B0aW9ucztcclxuICAgIGNvbnN0IHsgZ3JvdXAgfSA9IGRhdGE7XHJcblxyXG4gICAgaWYgKCEoZ3JvdXAgfHwgW10pLmxlbmd0aCkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSB7IGdyb3VwOiBbXSB9O1xyXG4gICAgZ3JvdXAuZm9yRWFjaCgoeyBpdGVtcyB9KSA9PiB7XHJcbiAgICAgIGl0ZW1zLmZvckVhY2goKHsgbGFiZWwsIHZhbHVlIH0pID0+IHtcclxuICAgICAgICBjb25zdCBpdGVtTGFiZWwgPSBsYWJlbCAmJiAhaGlkZUxhYmVscyA/IGxhYmVsIDogbnVsbDtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgIHJlc3VsdC5ncm91cC5wdXNoKHtcclxuICAgICAgICAgICAgZ3JvdXA6IFt7XHJcbiAgICAgICAgICAgICAgdGl0bGU6IF90KGl0ZW1MYWJlbCksXHJcbiAgICAgICAgICAgICAgLi4udGhpcy5nZXRJdGVtR3JvdXAodmFsdWUpXHJcbiAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVzdWx0Lmdyb3VwLnB1c2goe1xyXG4gICAgICAgICAgICBncm91cDogW3tcclxuICAgICAgICAgICAgICBpdGVtczogdmFsdWUgPyBbe1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IF90KGl0ZW1MYWJlbCksXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5nZXRJdGVtVmFsdWUodmFsdWUpXHJcbiAgICAgICAgICAgICAgfV0gOiBbXVxyXG4gICAgICAgICAgICB9XVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0SXRlbUdyb3VwKHZhbHVlKSB7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZVswXSkpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBncm91cDogdmFsdWUubWFwKCh2YWwpID0+ICh7XHJcbiAgICAgICAgICAuLi50aGlzLmdldEl0ZW1Hcm91cCh2YWwpXHJcbiAgICAgICAgfSkpXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpdGVtczogdmFsdWVcclxuICAgICAgICAuZmlsdGVyKChjaGlsZEl0ZW0pID0+ICEhY2hpbGRJdGVtLnZhbHVlKVxyXG4gICAgICAgIC5tYXAoKGNoaWxkSXRlbSkgPT4gKHtcclxuICAgICAgICAgIGxhYmVsOiBfdChjaGlsZEl0ZW0ubGFiZWwpLFxyXG4gICAgICAgICAgdmFsdWU6IHRoaXMuZ2V0SXRlbVZhbHVlKGNoaWxkSXRlbS52YWx1ZSlcclxuICAgICAgICB9KSlcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEl0ZW1WYWx1ZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHRoaXMuaXNVcmwudGVzdCh2YWx1ZSkgPyB0aGlzLnRvVXJsKHZhbHVlKSA6IHZhbHVlO1xyXG4gIH1cclxufVxyXG4iXX0=