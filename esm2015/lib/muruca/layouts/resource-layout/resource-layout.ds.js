import { LayoutDataSource, _t } from '@n7-frontend/core';
export class MrResourceLayoutDS extends LayoutDataSource {
    constructor() {
        super(...arguments);
        this.errorTitle = _t('global#layout_error_title');
        this.errorDescription = _t('global#layout_error_description');
    }
    onInit(payload) {
        this.configuration = payload.configuration;
        this.communication = payload.communication;
        this.mainState = payload.mainState;
        this.configId = payload.configId;
        this.pageConfig = this.configuration.get(this.configId);
        // tabs config
        const tabs = this.configuration.get('tabs');
        const pageTabs = this.pageConfig.tabs;
        if (tabs && pageTabs) {
            this.tabConfig = tabs[pageTabs];
        }
        // add translations
        ['top', 'content'].forEach((type) => {
            this.pageConfig.sections[type] = this.pageConfig.sections[type].map((section) => (Object.assign(Object.assign({}, section), { title: _t(section.title) })));
        });
    }
    /** Request the configured widgets data */
    pageRequest$(id, onError) {
        const { top, content } = this.pageConfig.sections;
        const sections = top.concat(content);
        return this.communication.request$('resource', {
            onError,
            method: 'POST',
            params: {
                id,
                type: this.pageConfig.type,
                sections: sections.map((s) => s.id),
            }
        });
    }
    handleResponse(response) {
        this.initSections(response);
        this.updateHeadTitle(response);
    }
    /** Load all the configured widgets */
    initSections(response) {
        const { top, content } = this.pageConfig.sections;
        const sections = top.concat(content);
        sections.forEach(({ id }) => {
            const widgetDataSource = this.getWidgetDataSource(id);
            if (!widgetDataSource)
                return;
            const responseSection = response.sections[id];
            // set id
            widgetDataSource.id = id;
            // update data
            if (responseSection) {
                this.one(id).update(responseSection);
            }
        });
        // update tabs
        if (this.tabConfig) {
            const tabSection = sections.find(({ type }) => type === 'tabs');
            this.one(tabSection.id).updateOptions({
                id: this.id,
                root: this.pageConfig.tabs,
                slug: this.slug,
                currentTab: this.tab
            });
            this.one(tabSection.id).update(this.tabConfig);
        }
    }
    updateHeadTitle({ title: resourceTitle }) {
        const appName = this.configuration.get('name');
        const pageTitle = this.pageConfig.title;
        this.mainState.update('headTitle', [appName, _t(pageTitle), resourceTitle].join(' > '));
    }
}
//# sourceMappingURL=data:application/json;base64,