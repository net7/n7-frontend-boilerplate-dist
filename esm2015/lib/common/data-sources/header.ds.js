import { DataSource } from '@n7-frontend/core';
const MOBILE_CLASS = 'is-mobile-nav-displayed';
const ACTIVE_CLASS = 'is-active';
export class HeaderDS extends DataSource {
    transform(data) {
        if (!data) {
            return null;
        }
        return Object.assign(Object.assign({}, data), { menuToggle: {
                open: {
                    payload: 'mobile-open'
                },
                close: {
                    payload: 'mobile-close'
                }
            } });
    }
    onCurrentNavChange(payload) {
        this.output.nav.items.forEach((item) => {
            this.updateItemClass(item, payload);
            if (item.subnav) {
                item.subnav.forEach((subNavItem) => {
                    this.updateItemClass(subNavItem, payload);
                });
            }
        });
    }
    onRouterChange() {
        if (!this.output) {
            return;
        }
        let { classes } = this.output;
        classes = classes || '';
        classes = classes.split(' ');
        if (classes.includes(MOBILE_CLASS)) {
            classes.splice(classes.indexOf(MOBILE_CLASS), 1);
            this.output.classes = classes.join(' ');
        }
    }
    onClick(payload) {
        // mobile control
        if (['mobile-open', 'mobile-close'].includes(payload)) {
            let { classes } = this.output;
            classes = classes || '';
            classes = classes.split(' ');
            if (classes.includes(MOBILE_CLASS)) {
                classes.splice(classes.indexOf(MOBILE_CLASS), 1);
            }
            else {
                classes.push(MOBILE_CLASS);
            }
            this.output.classes = classes.join(' ');
        }
    }
    updateItemClass(item, payload) {
        let itemClasses = [];
        if (item.classes) {
            itemClasses = itemClasses.concat(item.classes.split(' '));
        }
        if (item._meta.id === payload && !itemClasses.includes(ACTIVE_CLASS)) {
            itemClasses.push(ACTIVE_CLASS);
        }
        else if (itemClasses.includes(ACTIVE_CLASS)) {
            itemClasses.splice(itemClasses.indexOf(ACTIVE_CLASS, 1));
        }
        item.classes = itemClasses.join(' ');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLmRzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG43LWZyb250ZW5kL2JvaWxlcnBsYXRlLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi9kYXRhLXNvdXJjZXMvaGVhZGVyLmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUcvQyxNQUFNLFlBQVksR0FBRyx5QkFBeUIsQ0FBQztBQUUvQyxNQUFNLFlBQVksR0FBRyxXQUFXLENBQUM7QUFFakMsTUFBTSxPQUFPLFFBQVMsU0FBUSxVQUFVO0lBQzVCLFNBQVMsQ0FBQyxJQUFJO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVCxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsdUNBQ0ssSUFBSSxLQUNQLFVBQVUsRUFBRTtnQkFDVixJQUFJLEVBQUU7b0JBQ0osT0FBTyxFQUFFLGFBQWE7aUJBQ3ZCO2dCQUNELEtBQUssRUFBRTtvQkFDTCxPQUFPLEVBQUUsY0FBYztpQkFDeEI7YUFDRixJQUNEO0lBQ0osQ0FBQztJQUVNLGtCQUFrQixDQUFDLE9BQU87UUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3BDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDZixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFO29CQUNqQyxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDNUMsQ0FBQyxDQUFDLENBQUM7YUFDSjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLGNBQWM7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsT0FBTztTQUNSO1FBQ0QsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDOUIsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFDeEIsT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFN0IsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ2xDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNqRCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3pDO0lBQ0gsQ0FBQztJQUVNLE9BQU8sQ0FBQyxPQUFPO1FBQ3BCLGlCQUFpQjtRQUNqQixJQUFJLENBQUMsYUFBYSxFQUFFLGNBQWMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNyRCxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUM5QixPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztZQUN4QixPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUU3QixJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUU7Z0JBQ2xDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNsRDtpQkFBTTtnQkFDTCxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQzVCO1lBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN6QztJQUNILENBQUM7SUFFTyxlQUFlLENBQUMsSUFBSSxFQUFFLE9BQU87UUFDbkMsSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixXQUFXLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzNEO1FBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ3BFLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDaEM7YUFBTSxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDN0MsV0FBVyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFEO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFTb3VyY2UgfSBmcm9tICdAbjctZnJvbnRlbmQvY29yZSc7XG5pbXBvcnQgeyBIZWFkZXJEYXRhIH0gZnJvbSAnQG43LWZyb250ZW5kL2NvbXBvbmVudHMnO1xuXG5jb25zdCBNT0JJTEVfQ0xBU1MgPSAnaXMtbW9iaWxlLW5hdi1kaXNwbGF5ZWQnO1xuXG5jb25zdCBBQ1RJVkVfQ0xBU1MgPSAnaXMtYWN0aXZlJztcblxuZXhwb3J0IGNsYXNzIEhlYWRlckRTIGV4dGVuZHMgRGF0YVNvdXJjZSB7XG4gIHByb3RlY3RlZCB0cmFuc2Zvcm0oZGF0YSk6IEhlYWRlckRhdGEge1xuICAgIGlmICghZGF0YSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmRhdGEsXG4gICAgICBtZW51VG9nZ2xlOiB7XG4gICAgICAgIG9wZW46IHtcbiAgICAgICAgICBwYXlsb2FkOiAnbW9iaWxlLW9wZW4nXG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlOiB7XG4gICAgICAgICAgcGF5bG9hZDogJ21vYmlsZS1jbG9zZSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgb25DdXJyZW50TmF2Q2hhbmdlKHBheWxvYWQpIHtcbiAgICB0aGlzLm91dHB1dC5uYXYuaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgdGhpcy51cGRhdGVJdGVtQ2xhc3MoaXRlbSwgcGF5bG9hZCk7XG4gICAgICBpZiAoaXRlbS5zdWJuYXYpIHtcbiAgICAgICAgaXRlbS5zdWJuYXYuZm9yRWFjaCgoc3ViTmF2SXRlbSkgPT4ge1xuICAgICAgICAgIHRoaXMudXBkYXRlSXRlbUNsYXNzKHN1Yk5hdkl0ZW0sIHBheWxvYWQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBvblJvdXRlckNoYW5nZSgpIHtcbiAgICBpZiAoIXRoaXMub3V0cHV0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB7IGNsYXNzZXMgfSA9IHRoaXMub3V0cHV0O1xuICAgIGNsYXNzZXMgPSBjbGFzc2VzIHx8ICcnO1xuICAgIGNsYXNzZXMgPSBjbGFzc2VzLnNwbGl0KCcgJyk7XG5cbiAgICBpZiAoY2xhc3Nlcy5pbmNsdWRlcyhNT0JJTEVfQ0xBU1MpKSB7XG4gICAgICBjbGFzc2VzLnNwbGljZShjbGFzc2VzLmluZGV4T2YoTU9CSUxFX0NMQVNTKSwgMSk7XG4gICAgICB0aGlzLm91dHB1dC5jbGFzc2VzID0gY2xhc3Nlcy5qb2luKCcgJyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG9uQ2xpY2socGF5bG9hZCkge1xuICAgIC8vIG1vYmlsZSBjb250cm9sXG4gICAgaWYgKFsnbW9iaWxlLW9wZW4nLCAnbW9iaWxlLWNsb3NlJ10uaW5jbHVkZXMocGF5bG9hZCkpIHtcbiAgICAgIGxldCB7IGNsYXNzZXMgfSA9IHRoaXMub3V0cHV0O1xuICAgICAgY2xhc3NlcyA9IGNsYXNzZXMgfHwgJyc7XG4gICAgICBjbGFzc2VzID0gY2xhc3Nlcy5zcGxpdCgnICcpO1xuXG4gICAgICBpZiAoY2xhc3Nlcy5pbmNsdWRlcyhNT0JJTEVfQ0xBU1MpKSB7XG4gICAgICAgIGNsYXNzZXMuc3BsaWNlKGNsYXNzZXMuaW5kZXhPZihNT0JJTEVfQ0xBU1MpLCAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChNT0JJTEVfQ0xBU1MpO1xuICAgICAgfVxuICAgICAgdGhpcy5vdXRwdXQuY2xhc3NlcyA9IGNsYXNzZXMuam9pbignICcpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlSXRlbUNsYXNzKGl0ZW0sIHBheWxvYWQpIHtcbiAgICBsZXQgaXRlbUNsYXNzZXMgPSBbXTtcbiAgICBpZiAoaXRlbS5jbGFzc2VzKSB7XG4gICAgICBpdGVtQ2xhc3NlcyA9IGl0ZW1DbGFzc2VzLmNvbmNhdChpdGVtLmNsYXNzZXMuc3BsaXQoJyAnKSk7XG4gICAgfVxuICAgIGlmIChpdGVtLl9tZXRhLmlkID09PSBwYXlsb2FkICYmICFpdGVtQ2xhc3Nlcy5pbmNsdWRlcyhBQ1RJVkVfQ0xBU1MpKSB7XG4gICAgICBpdGVtQ2xhc3Nlcy5wdXNoKEFDVElWRV9DTEFTUyk7XG4gICAgfSBlbHNlIGlmIChpdGVtQ2xhc3Nlcy5pbmNsdWRlcyhBQ1RJVkVfQ0xBU1MpKSB7XG4gICAgICBpdGVtQ2xhc3Nlcy5zcGxpY2UoaXRlbUNsYXNzZXMuaW5kZXhPZihBQ1RJVkVfQ0xBU1MsIDEpKTtcbiAgICB9XG4gICAgaXRlbS5jbGFzc2VzID0gaXRlbUNsYXNzZXMuam9pbignICcpO1xuICB9XG59XG4iXX0=